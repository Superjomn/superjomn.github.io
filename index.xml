<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Superjomn&#39;s Blog</title>
    <link>https://superjomn.github.io/</link>
    <description>Recent content on Superjomn&#39;s Blog</description>
    <image>
      <url>https://superjomn.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://superjomn.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://superjomn.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python VM 执行方式简要探索</title>
      <link>https://superjomn.github.io/posts/python-vm-brief-introduction/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://superjomn.github.io/posts/python-vm-brief-introduction/</guid>
      <description>Python Code Object 有用的 attribute Python Bytecode 理解 Python Frame 修改 Frame 的 Code Object 总结 FYI 最近在看 TorchDynamo 的东西，里面需要对 Python 执行机制有一些了解，所以单独拆开放到了这篇文章里。
本文会从可复现的角度，多一些可以执行的例子。
Python Code Object 这里是简单的介绍，详细的可以参考 code objects 这本书的章节。
Code object 用来记录 Python 的 byte code，对应的粒度是 Block，这里的 Block 可以包含从 Module 到 Class definition 到 Function body 的各类结构（有别于编译器里面的 BasicBlock）。 可以理解 Code object 是可以嵌套的。
我们先从一个简单的函数开始
1 2 3 4 def foo(name, age): &amp;#39;&amp;#39;&amp;#39; Get the information of a person. &amp;#39;&amp;#39;&amp;#39; born = 2023 - age return f&amp;#34;hello {name}, born at {born}!</description>
    </item>
    
    <item>
      <title>Python functools 包简要实践</title>
      <link>https://superjomn.github.io/posts/python-functools-introduction/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://superjomn.github.io/posts/python-functools-introduction/</guid>
      <description>Python functools 包简要实践 在阅读 Pytorch 代码时，发现很多 Python 的新的用法比较有趣，之前笔者大部分时间在 C++ 上，这里整理和记录一些有趣的用法。 本文先从 functools 这个包开始。
@total_ordering shortcut to make class orderable 为了让一个 Class 能够比较，我们正常需要定义一堆 slots， __gt__(), __ge__(),~_lt_()~, __le__(), __eq__() 等等。 但其实只需要 __eq__() 和 其他任一方法(比如 __gt__() ) 便可以组合出其他方法。
@total_ordering 便用于这类场景的 helper，如下代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from functools import total_ordering @total_ordering class Stuff: def __init__(self, x): self.x = x def __eq__(self, other:&amp;#34;Stuff&amp;#34;): return self.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://superjomn.github.io/posts/about/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://superjomn.github.io/posts/about/</guid>
      <description>About me Thank you for your interest.
I am a Deep Learning system architect at NVIDIA, and my current focus is high-performance AI Compiler(on GPU).
Before this, I was a senior engineer in Baidu, working as an architect on PaddlePaddle (one of the most popular open-sourced deep learning frameworks in China market).
I was the creator &amp;amp; primary author &amp;amp; tech lead of the following projects in PaddlePaddle ecosystem (before 2022-6)</description>
    </item>
    
    <item>
      <title>Emacs essentials</title>
      <link>https://superjomn.github.io/posts/emacs-essentials/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://superjomn.github.io/posts/emacs-essentials/</guid>
      <description>It is a steep learning curve to master Emacs lisp, there are mainly two issues in it from my experience
the lisp syntax and functional programming the fragmented methods and libraries For the 1st issue, it is easy to master the syntax after writing several programs and getting used to them, but for the 2nd one, one needs to take notes or remember something.
In this blog, I focus on the 2nd point and keep updating the notes of some methods and libraries that I think are essential for writing Emacs lisp packages.</description>
    </item>
    
  </channel>
</rss>
