#+title: Notes on Clang-IR
#+date: 2023-09-15

* What is clangir?

* Definitions

* Some examples
** Basic control-flows
*** if-else
C++ code:

#+BEGIN_SRC C++
int if0() {
  int a = 0;
  int b = 1;
  if (a > b) {
    return a + b;
  } else {
    return a - b;
  }
}
#+END_SRC

cir:

#+BEGIN_SRC mlir
cir.func @if0() -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64} loc(#loc64)
    %2 = cir.alloca !s32i, cir.ptr <!s32i>, ["b", init] {alignment = 4 : i64} loc(#loc65)
    %3 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc4)
    cir.store %3, %1 : !s32i, cir.ptr <!s32i> loc(#loc64)
    %4 = cir.const(#cir.int<1> : !s32i) : !s32i loc(#loc6)
    cir.store %4, %2 : !s32i, cir.ptr <!s32i> loc(#loc65)
    cir.scope {
      %6 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc9)
      %7 = cir.load %2 : cir.ptr <!s32i>, !s32i loc(#loc10)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc67)
      cir.if %8 {
        %9 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc14)
        %10 = cir.load %2 : cir.ptr <!s32i>, !s32i loc(#loc15)
        %11 = cir.binop(add, %9, %10) : !s32i loc(#loc69)
        cir.store %11, %0 : !s32i, cir.ptr <!s32i> loc(#loc70)
        %12 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc70)
        cir.return %12 : !s32i loc(#loc70)
      } else {
        %9 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc17)
        %10 = cir.load %2 : cir.ptr <!s32i>, !s32i loc(#loc18)
        %11 = cir.binop(sub, %9, %10) : !s32i loc(#loc71)
        cir.store %11, %0 : !s32i, cir.ptr <!s32i> loc(#loc72)
        %12 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc72)
        cir.return %12 : !s32i loc(#loc72)
      } loc(#loc68)
    } loc(#loc66)
    %5 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc2)
    cir.return %5 : !s32i loc(#loc2)
  } loc(#loc63)
#+END_SRC

*** while
C++ code:


#+BEGIN_SRC C++
int while0() {
  int a = 100;
  while(a >= 0) {
    a += 1;
  }
  return a;
}
#+END_SRC

cir:

#+BEGIN_SRC mlir
  cir.func @while0() -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc34)
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["a", init] {alignment = 4 : i64} loc(#loc82)
    %2 = cir.const(#cir.int<100> : !s32i) : !s32i loc(#loc36)
    cir.store %2, %1 : !s32i, cir.ptr <!s32i> loc(#loc82)
    cir.scope {
      cir.loop while(cond : {
        %5 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc39)
        %6 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc40)
        %7 = cir.cmp(ge, %5, %6) : !s32i, !cir.bool loc(#loc84)
        cir.brcond %7 ^bb1, ^bb2 loc(#loc83)
      ^bb1:  // pred: ^bb0
        cir.yield continue loc(#loc83)
      ^bb2:  // pred: ^bb0
        cir.yield loc(#loc83)
      }, step : {
        cir.yield loc(#loc83)
      }) {
        %5 = cir.const(#cir.int<1> : !s32i) : !s32i loc(#loc41)
        %6 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc42)
        %7 = cir.binop(add, %6, %5) : !s32i loc(#loc85)
        cir.store %7, %1 : !s32i, cir.ptr <!s32i> loc(#loc85)
        cir.yield loc(#loc38)
      } loc(#loc83)
    } loc(#loc83)
    %3 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc44)
    cir.store %3, %0 : !s32i, cir.ptr <!s32i> loc(#loc86)
    %4 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc86)
    cir.return %4 : !s32i loc(#loc86)
  } loc(#loc81)
#+END_SRC


*** for
C++ code:

#+BEGIN_SRC C++
int for0() {
  int v = 0;
  for (int i = 0; i < 100; i++) {
    v += 2;
  }
  return v;
}
#+END_SRC


cir:

#+BEGIN_SRC mlir
  cir.func @for0() -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["v", init] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc49)
    cir.store %2, %1 : !s32i, cir.ptr <!s32i> loc(#loc88)
    cir.scope {
      %5 = cir.alloca !s32i, cir.ptr <!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc90)
      %6 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc53)
      cir.store %6, %5 : !s32i, cir.ptr <!s32i> loc(#loc90)
      cir.loop for(cond : {
        %7 = cir.load %5 : cir.ptr <!s32i>, !s32i loc(#loc54)
        %8 = cir.const(#cir.int<100> : !s32i) : !s32i loc(#loc55)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc91)
        cir.brcond %9 ^bb1, ^bb2 loc(#loc89)
      ^bb1:  // pred: ^bb0
        cir.yield continue loc(#loc89)
      ^bb2:  // pred: ^bb0
        cir.yield loc(#loc89)
      }, step : {
        %7 = cir.load %5 : cir.ptr <!s32i>, !s32i loc(#loc56)
        %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc57)
        cir.store %8, %5 : !s32i, cir.ptr <!s32i> loc(#loc92)
        cir.yield loc(#loc89)
      }) {
        %7 = cir.const(#cir.int<2> : !s32i) : !s32i loc(#loc58)
        %8 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc59)
        %9 = cir.binop(add, %8, %7) : !s32i loc(#loc93)
        cir.store %9, %1 : !s32i, cir.ptr <!s32i> loc(#loc93)
        cir.yield loc(#loc51)
      } loc(#loc89)
    } loc(#loc89)
    %3 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc61)
    cir.store %3, %0 : !s32i, cir.ptr <!s32i> loc(#loc94)
    %4 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc94)
    cir.return %4 : !s32i loc(#loc94)
  } loc(#loc87)
} loc(#loc)
#+END_SRC

** Functions

C++ code:


#+BEGIN_SRC C++
void apply(int* arr, int len, int (*f)(int)) {
  for (int i = 0; i < len; i++) {
    arr[i] = f(arr[i]);
  }
}
#+END_SRC


cir:

#+BEGIN_SRC mlir
module @"/home/chunwei/project/clang-tour/function.cc" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"} {
  cir.func @apply(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4]), %arg1: !s32i loc(fused[#loc5, #loc6]), %arg2: !cir.ptr<!cir.func<!s32i (!s32i)>> loc(fused[#loc7, #loc8])) {
    %0 = cir.alloca !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>>, ["arr", init] {alignment = 8 : i64} loc(#loc27)
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["len", init] {alignment = 4 : i64} loc(#loc28)
    %2 = cir.alloca !cir.ptr<!cir.func<!s32i (!s32i)>>, cir.ptr <!cir.ptr<!cir.func<!s32i (!s32i)>>>, ["f", init] {alignment = 8 : i64} loc(#loc29)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>> loc(#loc9)
    cir.store %arg1, %1 : !s32i, cir.ptr <!s32i> loc(#loc9)
    cir.store %arg2, %2 : !cir.ptr<!cir.func<!s32i (!s32i)>>, cir.ptr <!cir.ptr<!cir.func<!s32i (!s32i)>>> loc(#loc9)
    cir.scope {
      %3 = cir.alloca !s32i, cir.ptr <!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc31)
      %4 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc13)
      cir.store %4, %3 : !s32i, cir.ptr <!s32i> loc(#loc31)
      cir.loop for(cond : {
        %5 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc14)
        %6 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc15)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc32)
        cir.brcond %7 ^bb1, ^bb2 loc(#loc30)
      ^bb1:  // pred: ^bb0
        cir.yield continue loc(#loc30)
      ^bb2:  // pred: ^bb0
        cir.yield loc(#loc30)
      }, step : {
        %5 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc16)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc17)
        cir.store %6, %3 : !s32i, cir.ptr <!s32i> loc(#loc33)
        cir.yield loc(#loc30)
      }) {
        %5 = cir.load %2 : cir.ptr <!cir.ptr<!cir.func<!s32i (!s32i)>>>, !cir.ptr<!cir.func<!s32i (!s32i)>> loc(#loc18)
        %6 = cir.load %0 : cir.ptr <!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc19)
        %7 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc20)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc21)
        %9 = cir.load %8 : cir.ptr <!s32i>, !s32i loc(#loc19)
        %10 = cir.call %5(%9) : (!cir.ptr<!cir.func<!s32i (!s32i)>>, !s32i) -> !s32i loc(#loc18)
        %11 = cir.load %0 : cir.ptr <!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
        %12 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc23)
        %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc24)
        cir.store %10, %13 : !s32i, cir.ptr <!s32i> loc(#loc34)
        cir.yield loc(#loc11)
      } loc(#loc30)
    } loc(#loc30)
    cir.return loc(#loc2)
  } loc(#loc26)
} loc(#loc)
#+END_SRC

** Classes
Not supported yet.

** Type convertion

i32 to i64:

#+BEGIN_SRC mlir
    %2 = cir.cast(integral, %1 : !s32i), !s64i loc(#loc3)
#+END_SRC


* How ClangAST works with cir?

* FYI
