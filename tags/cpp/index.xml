<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cpp on Superjomn's blog</title><link>/tags/cpp/</link><description>Recent content in Cpp on Superjomn's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 17 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>LLVM Utilities (keep updating)</title><link>/posts/llvm-utils/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>/posts/llvm-utils/</guid><description>&lt;p>There are many handy functions or data structures in LLVM project, which are widely used by other projects that rely on LLVM. In this page, I will introduce some common utilities that are worthy of using in your own project or frequently used in LLVM code that you should be familiar with.&lt;/p>
&lt;h2 id="basic-data-type">Basic data type&lt;/h2>
&lt;h3 id="llvm-stringref">llvm::StringRef&lt;/h3>
&lt;p>It is a lightweight, non-owning reference to a sequence of characters.
It is similar to &lt;code>std::string_view&lt;/code> introduced in &lt;code>C++17&lt;/code>.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from a C-string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> &lt;span style="color:#902000">char&lt;/span>&lt;span style="color:#666">*&lt;/span> cStr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef(cStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from a C++-string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>std&lt;span style="color:#666">::&lt;/span>string cppStr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef1(cppStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from pointer and length
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef2(cppStr.c_str(), cppStr.size());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-arrayref">llvm::ArrayRef&lt;/h3>
&lt;p>It is a lightweight, non-owning reference to an array of elements. It is similar to &lt;code>std::span&lt;/code> introduced in C++20.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> myArray[] &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>ArrayRef&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> arrayRef(myArray, &lt;span style="color:#40a070">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-twine">llvm::Twine&lt;/h3>
&lt;p>&lt;code>llvm::Twine&lt;/code> is a class used to efficiently concatenate strings in both memory and performance.&lt;/p>
&lt;p>To concate two strings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine1(&lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine2(&lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> twine1 &lt;span style="color:#666">+&lt;/span> twine2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To concate string with other elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine1(&lt;span style="color:#4070a0">&amp;#34;The answer is &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> value &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> twine1 &lt;span style="color:#666">+&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>Twine(value);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is possible to concate multiple elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>Twine(&lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">42&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, the first &amp;ldquo;Hello&amp;rdquo; is a &lt;code>Twine&lt;/code> instance, and all the following &amp;ldquo;+&amp;rdquo; will use &lt;code>Twine&lt;/code>&amp;rsquo;s &lt;code>operator+&lt;/code> and get new &lt;code>Twine&lt;/code> instances, so it is able to concate any number of elements in the real usages.&lt;/p>
&lt;h3 id="llvm-nullableptr">llvm::NullablePtr&lt;/h3>
&lt;p>It is used to represent a pointer that can be either a valid pointer or null.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>NullablePtr&lt;span style="color:#666">&amp;lt;&lt;/span>MyType&lt;span style="color:#666">&amp;gt;&lt;/span> ptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ptr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> MyType();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// or ptr = nullptr;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (ptr.isNull()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>} &lt;span style="color:#007020;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">delete&lt;/span> ptr.get(); &lt;span style="color:#60a0b0;font-style:italic">// get the underlying pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="container">Container&lt;/h2>
&lt;h3 id="llvm-densemap">llvm::DenseMap&lt;/h3>
&lt;p>&lt;code>llvm::DenseMap&lt;/code> has higher performance than &lt;code>std::unordered_map&lt;/code> and a similar usage.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>DenseMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>, &lt;span style="color:#902000">float&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map[&lt;span style="color:#40a070">20&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">20.f&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.insert(std&lt;span style="color:#666">::&lt;/span>make_pair(&lt;span style="color:#40a070">20&lt;/span>, &lt;span style="color:#40a070">20.f&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-densemapinfo">llvm::DenseMapInfo&lt;/h3>
&lt;p>&lt;code>llvm::DenseMapInfo&lt;/code> is a utility class that provides information and hashing for custom types used as keys in &lt;code>llvm::DenseMap&lt;/code>. To use it, you should define your custom type with the following methods provided:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static KeyTy getEmptyKey()&lt;/code>: This function should return a unique value representing an &amp;ldquo;empty&amp;rdquo; or &amp;ldquo;deleted&amp;rdquo; key in your custom type&lt;/li>
&lt;li>&lt;code>static KeyTy getTombstoneKey()&lt;/code>: It should return a unique value representing a &amp;ldquo;tombstone&amp;rdquo; key, which is used when a key is removed.&lt;/li>
&lt;li>&lt;code>static unique getHashValue(const KeyTy&amp;amp; key)&lt;/code>: This function returns the hash value of a given key.&lt;/li>
&lt;li>&lt;code>static bool isEqual(const KeyTy&amp;amp; a, const KeyTy &amp;amp;b)&lt;/code>: This function compares two keys and returns true if they are equal, or false if they are not.&lt;/li>
&lt;/ul>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">struct&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyKeyType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getEmptyKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType{&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getTombstoneKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType{&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">2&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#06287e">getHashValue&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>key) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>hash_value(key.value); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">bool&lt;/span> &lt;span style="color:#06287e">isEqual&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>a, &lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>b) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> a.value &lt;span style="color:#666">==&lt;/span> b.value; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this, you should specialize the &lt;code>llvm::DenseMapInfo&lt;/code> template for your custom type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">namespace&lt;/span> llvm {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">struct&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">DenseMapInfo&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>MyKeyType&lt;span style="color:#666">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getEmptyKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getEmptyKey(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getTombstoneKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getTombstoneKey(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#06287e">getHashValue&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>key) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getHashValue(key); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">bool&lt;/span> &lt;span style="color:#06287e">isEqual&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>a, &lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>b) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>isEqual(a, b); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-stringmap">llvm::StringMap&lt;/h3>
&lt;p>It is a map-like container that is specially optimized for string keys.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> stringToIntMap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stringToIntMap[&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tim&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stringToIntMap.insert(std&lt;span style="color:#666">::&lt;/span>map_pair(&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-smallvector">llvm::SmallVector&lt;/h3>
&lt;p>It is a dynamic array container that quite similar to &lt;code>std::vector&lt;/code> but optimized for situations where the number of elements is expected to be small.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>SmallVector&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> vec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vec.push_back(&lt;span style="color:#40a070">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="misc">Misc&lt;/h2>
&lt;h3 id="llvm-bumpptrallocator">llvm::BumpPtrAllocator&lt;/h3>
&lt;p>This is an allocator used to allocate memory in a highly efficient manner. But note that, it doesn&amp;rsquo;t support deallocation for the elements allocated.
Once the &lt;code>llvm::BumpPtrAllocator&lt;/code> instance is freed, all the allocated elements will be deallocated in bulk automatically.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>BumpPtrAllocator allocator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> intPtr &lt;span style="color:#666">=&lt;/span> allocator.Allocate&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">*&lt;/span>intPtr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="updating-log">Updating log&lt;/h2>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[2024-02-25 Sun] &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> Publish the post&lt;/li>
&lt;/ul></description></item></channel></rss>