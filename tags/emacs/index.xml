<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Emacs on Superjomn's blog</title><link>/tags/emacs/</link><description>Recent content in Emacs on Superjomn's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 02 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>Enable Jupyter in Doom Emacs</title><link>/posts/emacs-jupyter/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>/posts/emacs-jupyter/</guid><description>&lt;p>There are a few adjustments needs for the default installation when using the &lt;a href="https://github.com/emacs-jupyter/jupyter">jupyter package&lt;/a> in Emacs. Here&amp;rsquo;s a step-by-step guide to configure it properly with Doom Emacs.&lt;/p>
&lt;h2 id="step-1-install-the-jupyter-package-dot">Step 1: Install the jupyter package.&lt;/h2>
&lt;p>Add this line to &lt;code>package.el&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">package!&lt;/span> &lt;span style="color:#bb60d5">jupyter&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-2-enable-builtin-jupyter-support-in-org-mode">Step 2: Enable builtin Jupyter Support in Org Mode&lt;/h2>
&lt;p>To enable Jupyter support in Org mode, make the following modifications in your &lt;code>init.el&lt;/code> file:&lt;/p>
&lt;ol>
&lt;li>Uncomment the &lt;code>ein&lt;/code> line. The &lt;a href="https://github.com/millejoh/emacs-ipython-notebook">emacs-ipython-notebook&lt;/a> is a dependency of jupyter package.&lt;/li>
&lt;li>Add &lt;code>+jupyter&lt;/code> to the Org settings. For more details, refer to &lt;a href="https://github.com/doomemacs/doomemacs/blob/5dcba2f89fa5a20c6535e15f859aaef466ce4b90/modules/lang/org/README.org#L63">:lang org&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org&lt;/span> &lt;span style="color:#bb60d5">+jupyter&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic">; organize your plain life in plain text&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-3-patch-for-runtime-errors-with-zeromq">Step 3: Patch for Runtime Errors with ZeroMQ&lt;/h2>
&lt;p>To address a runtime error related to ZeroMQ (as discussed in this &lt;a href="https://github.com/emacs-jupyter/jupyter/issues/527#issuecomment-2391691176">issue&lt;/a>), append the following code to your &lt;code>config.el&lt;/code> or any other configuration file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">defun&lt;/span> &lt;span style="color:#bb60d5">my-jupyter-api-http-request--ignore-login-error-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#007020">&amp;amp;rest&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#06287e">member&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;login&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ignore-error&lt;/span> (&lt;span style="color:#bb60d5">jupyter-api-http-error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">apply&lt;/span> &lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">:else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">apply&lt;/span> &lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">advice-add&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06287e">#&amp;#39;&lt;/span>&lt;span style="color:#bb60d5">jupyter-api-http-request&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">:around&lt;/span> &lt;span style="color:#06287e">#&amp;#39;&lt;/span>&lt;span style="color:#bb60d5">my-jupyter-api-http-request--ignore-login-error-a&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-4-reload-the-emacs">Step 4: reload the Emacs&lt;/h2>
&lt;p>After making these changes, reload Emacs. Doom Emacs should now install the necessary packages.&lt;/p>
&lt;h2 id="using-the-jupyter-package">Using the Jupyter Package&lt;/h2>
&lt;p>To use the jupyter package, you can start an &lt;code>org&lt;/code> file, and invoke &lt;code>jupyter-run-repl&lt;/code> command, it will start a kernel for this file. The python code blocks will map to the jupyter session.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>1024
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Emacs Lisp Introduction for Python Programmers</title><link>/posts/elisp-tutorial-for-pythoner/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>/posts/elisp-tutorial-for-pythoner/</guid><description>&lt;p>This is a brief introduction to Emacs Lisp for Python programmers, (although I am not an Elisp expert, and actually I am more familiar with Python than Elisp). Both languages have quite different syntaxes, it is interesting to see how can implement Python code with lisp code.&lt;/p>
&lt;p>The content follows the strucutre from &lt;a href="https://learnxinyminutes.com/docs/python/">Learn X in Y Minutes Where X is Python&lt;/a>, and we will touch all the topics.&lt;/p>
&lt;h2 id="primitive-datatypes-and-operators">Primitive Datatypes and Operators&lt;/h2>
&lt;h3 id="numbers">Numbers&lt;/h3>
&lt;table>
&lt;tr>
&lt;td>
&lt;b>Python&lt;/b>
&lt;pre>&lt;code class="python-html">
# Integer
1
# Float
3.14
# Math is what you would expect
1 + 1 # => 2
8 - 1 # => 7
10 * 2 # => 20
35 / 5 # => 7.0
# Integer division rounds down for both positive and negative numbers.
5 // 3 # => 1
-5 // 3 # => -2
5.0 // 3.0 # => 1.0 # works on floats too
-5.0 // 3.0 # => -2.0
# The result of division is always a float
10.0 / 3 # => 3.3333333333333335
# Modulo operation
7 % 3 # => 1
# i % j have the same sign as j, unlike C
-7 % 3 # => 2
# Exponentiation (x**y, x to the yth power)
2**3 # => 8
# Enforce precedence with parentheses
1 + 3 * 2 # => 7
(1 + 3) * 2 # => 8
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
&lt;b>Elisp&lt;/b>
&lt;pre>&lt;code class="lisp-html">
;; Integer
1
;; Float
3.14
;; Math is what you would expect
(+ 1 1) ; => 2
(- 8 1) ; => 7
(* 10 2) ; => 20
(/ 35 5) ; => 7
;; Integer division rounds down for both positive and negative numbers.
(truncate (/ 5 3)) ; => 1
(truncate (/ -5 3)) ; => -2
(truncate (/ 5.0 3.0)) ; => 1.0 ; works on floats too
(truncate (/ -5.0 3.0)) ; => -2.0
;; The result of division is always a float if the denominator or numerator is float
(/ 10.0 3) ; => 3.3333333333333335
;; Modulo operation
(% 7 3) ; => 1
;; different from Python
(% -7 3) ; => -1
;; Exponentiation
(expt 2 3) ; => 8
;; Enforce precedence with parentheses
(+ 1 (* 3 2)) ; => 7
(* (1+ 3) 2) ; => 8
&lt;/code>&lt;/pre>
&lt;/td>
&lt;/table>
&lt;h3 id="bools-and-comparasion">Bools and comparasion&lt;/h3>
&lt;p>In Emacs Lisp, booleans are represented by the symbols &lt;code>t&lt;/code> for true and &lt;code>nil&lt;/code> for false.&lt;/p>
&lt;table>
&lt;tr> &lt;td>
&lt;pre>&lt;code class="python-html">
# Boolean values are primitives (Note: the capitalization)
True # => True
False # => False
# negate with not
not True # => False
not False # => True
# Boolean Operators
# Note "and" and "or" are case-sensitive
True and False # => False
False or True # => True
# True and False are actually 1 and 0 but with different keywords
True + True # => 2
True * 8 # => 8
False - 5 # => -5
# Comparison operators look at the numerical value of True and False
0 == False # => True
2 > True # => True
2 == True # => False
-5 != False # => True
# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.
# All other values are True
bool(0) # => False
bool("") # => False
bool([]) # => False
bool({}) # => False
bool(()) # => False
bool(set()) # => False
bool(4) # => True
bool(-6) # => True
bool(0) # => False
bool(2) # => True
0 and 2 # => 0
bool(-5) # => True
bool(2) # => True
-5 or 0 # => -5
# Equality is ==
1 == 1 # => True
2 == 1 # => False
# Inequality is !=
1 != 1 # => False
2 != 1 # => True
# More comparisons
1 &lt; 10 # => True
1 > 10 # => False
2 &lt;= 2 # => True
2 >= 2 # => True
# Seeing whether a value is in a range
1 &lt; 2 and 2 &lt; 3 # => True
2 &lt; 3 and 3 &lt; 2 # => False
# Chaining makes this look nicer
1 &lt; 2 &lt; 3 # => True
2 &lt; 3 &lt; 2 # => False
# (is vs. ==) is checks if two variables refer to the same object, but == checks
# if the objects pointed to have the same values.
a = [1, 2, 3, 4] # Point a at a new list, [1, 2, 3, 4]
b = a # Point b at what a is pointing to
b is a # => True, a and b refer to the same object
b == a # => True, a's and b's objects are equal
b = [1, 2, 3, 4] # Point b at a new list, [1, 2, 3, 4]
b is a # => False, a and b do not refer to the same object
b == a # => True, a's and b's objects are equal
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
&lt;pre>&lt;code class="lisp-html">
;; Boolean values are symbols
t ; => t
nil ; => nil
;; negate with not
(not t) ; => nil
(not nil) ; => t
;; Boolean Operators
;; Use `and` and `or` for logical operations
(and t nil) ; => nil
(or nil t) ; => t
;; In Elisp, `t` or `nil` is not numeric, so numerical operations will fail
(+ t t) ; error
(* t 8) ; error
(- nil 5) ; error
;; Comparison operators
(= 0 nil) ; => error, since nil is not a numerical value
(eq 0 nil) ; => nil, because `eq` is used for checking equality of objects
; similar to Python's `is`
(eq 1.0 1.0) ; => nil, both are different objects
(= 1.0 1.0) ; => t, numerical equal
(eq 1 1) ; => t, constant integers of same value share the same object
;; In Elisp, `nil` is the only false value. All other values are true.
(not 0) ; => nil
(not "") ; => nil
(not '()) ; => nil
(not (make-hash-table)) ; => nil
(not nil) ; => t
(not 4) ; => nil
(not -6) ; => nil
(and nil 2) ; => nil
(or -5 nil) ; => -5
;; Equality is checked with `eq` for objects
;; and `equal` for value comparison, or `=` for numbers
(= 1 1) ; => t
(= 2 1) ; => nil
;; Inequality with `/=`
(/= 1 1) ; => nil
(/= 2 1) ; => t
;; More comparisons
(&lt; 1 10) ; => t
(> 1 10) ; => nil
(&lt;= 2 2) ; => t
(>= 2 2) ; => t
;; Logical combinations for range checking
;; Chaining like Python's `1 &lt; 2 &lt; 3` doesn't directly translate
(and (&lt; 1 2) (&lt; 2 3)) ; => t
(and (&lt; 2 3) (&lt; 3 2)) ; => nil
;; Setting up variables and lists
(setq a '(1 2 3 4)) ; Set 'a' to a new list
(setq b a) ; Point 'b' at what 'a' is pointing to
(eq b a) ; => t, 'a' and 'b' refer to the same object
(equal b a) ; => t, 'a's and 'b's objects are equal
(setq b '(1 2 3 4)) ; Set 'b' to a new, but identical list
(eq b a) ; => nil, 'a' and 'b' do not refer to the same object
(equal b a) ; => t, 'a's and 'b's objects are equal
&lt;/code>&lt;/pre>
&lt;/td> &lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>eq&lt;/code> checks if two symbols or objects refer to the same memory address (identical objects).&lt;/li>
&lt;li>&lt;code>equal&lt;/code> tests for structural equality without considering if the two are the exact same object.&lt;/li>
&lt;/ul>
&lt;h3 id="string-related">String related&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Strings are created with " or '
"This is a string."
'This is also a string.'
# Strings can be added too
"Hello " + "world!" # => "Hello world!"
# String literals (but not variables) can be concatenated without using '+'
"Hello " "world!" # => "Hello world!"
# A string can be treated like a list of characters
"Hello world!"[0] # => 'H'
# You can find the length of a string
len("This is a string") # => 16
# Since Python 3.6, you can use f-strings or formatted string literals.
name = "Reiko"
f"She said her name is {name}." # => "She said her name is Reiko"
# Any valid Python expression inside these braces is returned to the string.
f"{name} is {len(name)} characters long." # => "Reiko is 5 characters long."
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Strings are created with double quotes
"This is a string."
"This is also a string."
;; Strings can be concatenated using `concat`
(concat "Hello " "world!") ; => "Hello world!"
;; In Elisp, there is no automatic concatenation without using a function like `concat`.
;; Accessing a character in a string
(aref "Hello world!" 0) ; => 72 (returns the ASCII value of 'H')
;; You can convert the ASCII value to a character if needed
(char-to-string (aref "Hello world!" 0)) ; => "H"
;; Finding the length of a string
(length "This is a string") ; => 16
;; Emacs Lisp doesn't have a built-in feature exactly like Python's f-strings,
;; but you can use `format` to achieve similar results.
(setq name "Reiko")
(format "She said her name is %s." name) ; => "She said her name is Reiko."
;; Using `format` for more complex expressions
(format "%s is %d characters long." name (length name)) ; => "Reiko is 5 characters long."
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="variables-and-collections">Variables and Collections&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="language-python">
print("I'm Python. Nice to meet you!") # => I'm Python. Nice to meet you!
# By default the print function also prints out a newline at the end.
# Use the optional argument end to change the end string.
print("Hello, World", end="!") # => Hello, World!
# Simple way to get input data from console
input_string_var = input("Enter some data: ") # Returns the data as a string
# There are no declarations, only assignments.
# Convention in naming variables is snake_case style
some_var = 5
some_var # => 5
# Accessing a previously unassigned variable is an exception.
# See Control Flow to learn more about exception handling.
some_unknown_var # Raises a NameError
# if can be used as an expression
# Equivalent of C's '?:' ternary operator
"yay!" if 0 > 1 else "nay!" # => "nay!"
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Emacs Lisp has a print function, `message`, commonly used for displaying output in the echo area.
(message "I'm Emacs Lisp. Nice to meet you!") ; Prints: I'm Emacs Lisp. Nice to meet you!
;; By default, `message` also outputs a newline at the end. You can concatenate strings to simulate different endings.
(message "Hello, World!") ; Prints: Hello, World
;; Simple way to get input data from console
(setq input-string-var (read-string "Enter some data: ")) ; Prompts user and returns the data as a string
;; Variables are set with `setq`, and Emacs Lisp uses lower-case with dashes (lisp-case).
(setq some-var 5)
some-var ; => 5
;; Accessing a previously unassigned variable results in `nil` if not set, not an exception.
some-unknown-var ; => nil unless previously set, does not raise an error
;; `if` can be used similarly to the ternary operator
(if (> 0 1) "yay!" "nay!") ; => "nay!"
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="list">list&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Lists store sequences
li = []
# You can start with a prefilled list
other_li = [4, 5, 6]
# Add stuff to the end of a list with append
li.append(1) # li is now [1]
li.append(2) # li is now [1, 2]
li.append(4) # li is now [1, 2, 4]
li.append(3) # li is now [1, 2, 4, 3]
# Remove from the end with pop
li.pop() # => 3 and li is now [1, 2, 4]
# Let's put it back
li.append(3) # li is now [1, 2, 4, 3] again.
# Access a list like you would any array
li[0] # => 1
# Look at the last element
li[-1] # => 3
# Looking out of bounds is an IndexError
li[4] # Raises an IndexError
# Make a one layer deep copy using slices
li2 = li[:] # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.
# Remove arbitrary elements from a list with "del"
del li[2] # li is now [1, 2, 3]
# Remove first occurrence of a value
li.remove(2) # li is now [1, 3]
li.remove(2) # Raises a ValueError as 2 is not in the list
# Insert an element at a specific index
li.insert(1, 2) # li is now [1, 2, 3] again
# Get the index of the first item found matching the argument
li.index(2) # => 1
li.index(4) # Raises a ValueError as 4 is not in the list
# You can add lists
# Note: values for li and for other_li are not modified.
li + other_li # => [1, 2, 3, 4, 5, 6]
# Concatenate lists with "extend()"
li.extend(other_li) # Now li is [1, 2, 3, 4, 5, 6]
# Check for existence in a list with "in"
1 in li # => True
# Examine the length with "len()"
len(li) # => 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Lists store sequences
(setq li '())
;; You can start with a prefilled list
(setq other-li '(4 5 6))
;; The '(...) is a macro of (list ...), so the below has same effect
(setq other-li (list 4 5 6))
;; Add stuff to the end of a list with `push` (note: `push` adds to the front, so let's use `append` for the end)
(setq li (append li '(1))) ; li is now (1)
(setq li (append li '(2))) ; li is now (1 2)
(setq li (append li '(4))) ; li is now (1 2 4)
(setq li (append li '(3))) ; li is now (1 2 4 3)
;; Remove from the end with `pop`
(pop li) ; => 3 and li is now (1 2 4)
;; Let's put it back
(setq li (append li '(3))) ; li is now (1 2 4 3) again.
;; Access a list like you would any array (using `nth`)
(nth 0 li) ; => 1
;; Look at the last element (using `car` on the reversed list)
(car (last li)) ; => 3
;; Looking out of bounds does not raise an error by default, returns nil
(nth 4 li) ; => nil, does not raise an IndexError
;; Make a one layer deep copy using `copy-sequence`
(setq li2 (copy-sequence li)) ;; li2 equals [1 2 4 3] but (eq li2 li) will result in nil.
;; Remove arbitrary elements from a list with `setf` and `nthcdr`
(setf (nthcdr 2 li) (cddr (nthcdr 2 li))) ;; li is now [1 2 3]
;; Emacs Lisp does not have a direct equivalent of Python's `list.remove`
;; for non-destructive removal, you'd typically filter the list
(setq li (remove 2 li)) ;; li is now [1 3]
;; For handling error (when element is not in the list), Emacs Lisp usually uses `condition-case`
(condition-case nil
(setq li (remove 2 li))
(error (message "ValueError: 2 is not in the list")))
;; Insert an element at a specific index
(setq li (cl-list* 1 2 (cdr li))) ;; li is now [1 2 3] again, using `cl-list*` to splice
;; Get the index of the first item found matching the argument
(position 2 li) ;; => 1
(condition-case nil
(position 4 li)
(error (message "ValueError: 4 is not in the list")))
;; You can add lists
(setq result (append li other_li)) ;; => [1 2 3 4 5 6]
;; Concatenate lists with `append` (destructively with `nconc`)
(setq li (append li other_li)) ;; Now li is [1 2 3 4 5 6]
;; Check for existence in a list with `member`
(member 1 li) ;; => (1 2 3 4 5 6) which is true-ish in Lisp (non-nil means true)
;; Examine the length with `length`
(length li) ;; => 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="dict">Dict&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Dictionaries store mappings from keys to values
empty_dict = {}
# Here is a prefilled dictionary
filled_dict = {"one": 1, "two": 2, "three": 3}
# Note keys for dictionaries have to be immutable types. This is to ensure that
# the key can be converted to a constant hash value for quick look-ups.
# Immutable types include ints, floats, strings, tuples.
invalid_dict = {[1,2,3]: "123"} # => Yield a TypeError: unhashable type: 'list'
valid_dict = {(1,2,3):[1,2,3]} # Values can be of any type, however.
# Look up values with []
filled_dict["one"] # => 1
# Get all keys as an iterable with "keys()". We need to wrap the call in list()
# to turn it into a list. We'll talk about those later. Note - for Python
# versions &lt;3.7, dictionary key ordering is not guaranteed. Your results might
# not match the example below exactly. However, as of Python 3.7, dictionary
# items maintain the order at which they are inserted into the dictionary.
list(filled_dict.keys()) # => ["three", "two", "one"] in Python &lt;3.7
list(filled_dict.keys()) # => ["one", "two", "three"] in Python 3.7+
# Get all values as an iterable with "values()". Once again we need to wrap it
# in list() to get it out of the iterable. Note - Same as above regarding key
# ordering.
list(filled_dict.values()) # => [3, 2, 1] in Python &lt;3.7
list(filled_dict.values()) # => [1, 2, 3] in Python 3.7+
# Check for existence of keys in a dictionary with "in"
"one" in filled_dict # => True
1 in filled_dict # => False
# Looking up a non-existing key is a KeyError
filled_dict["four"] # KeyError
# Use "get()" method to avoid the KeyError
filled_dict.get("one") # => 1
filled_dict.get("four") # => None
# The get method supports a default argument when the value is missing
filled_dict.get("one", 4) # => 1
filled_dict.get("four", 4) # => 4
# "setdefault()" inserts into a dictionary only if the given key isn't present
filled_dict.setdefault("five", 5) # filled_dict["five"] is set to 5
filled_dict.setdefault("five", 6) # filled_dict["five"] is still 5
# Adding to a dictionary
filled_dict.update({"four":4}) # => {"one": 1, "two": 2, "three": 3, "four": 4}
filled_dict["four"] = 4 # another way to add to dict
# Remove keys from a dictionary with del
del filled_dict["one"] # Removes the key "one" from filled dict
# From Python 3.5 you can also use the additional unpacking options
{"a": 1, **{"b": 2}} # => {'a': 1, 'b': 2}
{"a": 1, **{"a": 2}} # => {'a': 2}
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Hash tables store mappings from keys to values
(setq empty-dict (make-hash-table))
;; Here is a prefilled hash table
(setq filled-dict (make-hash-table :test 'equal))
(puthash "one" 1 filled-dict)
(puthash "two" 2 filled-dict)
(puthash "three" 3 filled-dict)
;; Note keys for hash tables should be comparable with the test function, `equal` here allows strings
;; Emacs Lisp hash tables do not restrict key types as strictly as Python does by default.
;; Attempt to use mutable types such as lists can be handled but requires careful consideration of equality testing.
;; Look up values with `gethash`
(gethash "one" filled-dict) ;; => 1
;; Get all keys as a list
(hash-table-keys filled-dict) ;; => '("one" "two" "three") in Emacs Lisp, ordering depends on hash function
;; Get all values as a list
(hash-table-values filled-dict) ;; => '(1 2 3)
;; Check for existence of keys in a hash table with `gethash`
(when (gethash "one" filled-dict) t) ;; => t (true)
(when (gethash 1 filled-dict) t) ;; => nil (false)
;; Looking up a non-existing key returns nil by default, no error
(gethash "four" filled-dict) ;; => nil
;; Use `gethash` with a default value to avoid nil for non-existing keys
(gethash "one" filled-dict 4) ;; => 1
(gethash "four" filled-dict 4) ;; => 4
;; `sethash` inserts into a hash table, replacing any existing value for the key
(puthash "five" 5 filled-dict) ;; filled-dict now has key "five" set to 5
(puthash "five" 6 filled-dict) ;; filled-dict["five"] is updated to 6
;; Adding to a hash table
(puthash "four" 4 filled-dict) ;; filled-dict now includes "four" => 4
;; Remove keys from a hash table with `remhash`
(remhash "one" filled-dict) ;; Removes the key "one" from filled-dict
;; Unpacking and merging hash tables isn't a direct feature in Emacs Lisp,
;; but can be achieved through looping and setting keys.
;; Below is an example of how to "merge" two hash tables in Emacs Lisp.
(setq a (make-hash-table :test 'equal))
(setq b (make-hash-table :test 'equal))
(puthash "a" 1 a)
(puthash "b" 2 b)
;; Simulating Python's dict unpacking:
(maphash (lambda (k v) (puthash k v a)) b)
;; Now, 'a' contains the contents of both 'a' and 'b'
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="set">Set&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Sets store ... well sets
empty_set = set()
# Initialize a set with a bunch of values.
some_set = {1, 1, 2, 2, 3, 4} # some_set is now {1, 2, 3, 4}
# Similar to keys of a dictionary, elements of a set have to be immutable.
invalid_set = {[1], 1} # => Raises a TypeError: unhashable type: 'list'
valid_set = {(1,), 1}
# Add one more item to the set
filled_set = some_set
filled_set.add(5) # filled_set is now {1, 2, 3, 4, 5}
# Sets do not have duplicate elements
filled_set.add(5) # it remains as before {1, 2, 3, 4, 5}
# Do set intersection with &amp;
other_set = {3, 4, 5, 6}
filled_set &amp; other_set # => {3, 4, 5}
# Do set union with |
filled_set | other_set # => {1, 2, 3, 4, 5, 6}
# Do set difference with -
{1, 2, 3, 4} - {2, 3, 5} # => {1, 4}
# Do set symmetric difference with ^
{1, 2, 3, 4} ^ {2, 3, 5} # => {1, 4, 5}
# Check if set on the left is a superset of set on the right
{1, 2} >= {1, 2, 3} # => False
# Check if set on the left is a subset of set on the right
{1, 2} &lt;= {1, 2, 3} # => True
# Check for existence in a set with in
2 in filled_set # => True
10 in filled_set # => False
# Make a one layer deep copy
filled_set = some_set.copy() # filled_set is {1, 2, 3, 4, 5}
filled_set is some_set # => False
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Sets store ... well, something akin to sets using hash tables
(setq empty-set (make-hash-table :test 'equal))
;; Initialize a "set" with a bunch of values
(setq some-set (make-hash-table :test 'equal))
(mapc (lambda (x) (puthash x t some-set)) '(1 1 2 2 3 4)) ;; some-set is now effectively {1, 2, 3, 4}
;; Similar to keys of a dictionary, elements of a "set" have to be comparable with the test function.
;; Invalid "set" construction would cause errors if attempted with non-hashable types.
;; This is an invalid line in Emacs Lisp and commented out:
;; (setq invalid-set (make-hash-table :test 'equal))
;; (puthash [1] t invalid-set) ;; Would raise an error in a hypothetical correct context
(setq valid-set (make-hash-table :test 'equal))
(puthash (list 1) t valid-set)
(puthash 1 t valid-set)
;; Add one more item to the "set"
(setq filled-set some-set)
(puthash 5 t filled-set) ;; filled-set is now effectively {1, 2, 3, 4, 5}
(puthash 5 t filled-set) ;; it remains as before {1, 2, 3, 4, 5}
;; Set operations using hash tables require custom functions or cl-lib utilities:
;; Intersection (set1 &amp; set2)
(setq other-set (make-hash-table :test 'equal))
(mapc (lambda (x) (puthash x t other-set)) '(3 4 5 6))
(setq intersection-set (cl-intersection (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Union (set1 | set2)
(setq union-set (cl-union (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Difference (set1 - set2)
(setq difference-set (cl-set-difference (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Symmetric Difference (set1 ^ set2)
(setq symmetric-difference-set (cl-set-exclusive-or (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Superset check
(cl-subsetp (hash-table-keys other-set) (hash-table-keys filled-set) :test 'equal) ;; => nil (false, filled-set is not a superset)
;; Subset check
(cl-subsetp (hash-table-keys '(1 2)) (hash-table-keys '(1 2 3)) :test 'equal) ;; => t (true, {1, 2} is a subset of {1, 2, 3})
;; Check for existence in a "set" with `gethash`
(gethash 2 filled-set) ;; => t (true)
(gethash 10 filled-set) ;; => nil (false)
;; Make a one layer deep copy
(setq filled-set-copy (make-hash-table :test 'equal))
(maphash (lambda (k v) (puthash k v filled-set-copy)) filled-set)
(eq filled-set filled-set-copy) ;; => nil
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="control-flow-and-iterables">Control Flow and Iterables&lt;/h2>
&lt;h3 id="if">if&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Let's just make a variable
some_var = 5
# Here is an if statement. Indentation is significant in Python!
# Convention is to use four spaces, not tabs.
# This prints "some_var is smaller than 10"
if some_var > 10:
print("some_var is totally bigger than 10.")
elif some_var &lt; 10: # This elif clause is optional.
print("some_var is smaller than 10.")
else: # This is optional too.
print("some_var is indeed 10.")
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Let's just make a variable
(setq some-var 5)
;; Here is an if statement
;; This prints "some_var is smaller than 10"
(if (> some-var 10)
(message "some_var is totally bigger than 10.")
(if (&lt; some-var 10) ;; This is like the elif in Python
(message "some_var is smaller than 10.")
(message "some_var is indeed 10."))) ;; This is the else part
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
"""
For loops iterate over lists
prints:
dog is a mammal
cat is a mammal
mouse is a mammal
"""
for animal in ["dog", "cat", "mouse"]:
# You can use format() to interpolate formatted strings
print("{} is a mammal".format(animal))
"""
"range(number)" returns an iterable of numbers
from zero up to (but excluding) the given number
prints:
0
1
2
3
"""
for i in range(4):
print(i)
"""
"range(lower, upper)" returns an iterable of numbers
from the lower number to the upper number
prints:
4
5
6
7
"""
for i in range(4, 8):
print(i)
"""
"range(lower, upper, step)" returns an iterable of numbers
from the lower number to the upper number, while incrementing
by step. If step is not indicated, the default value is 1.
prints:
4
6
"""
for i in range(4, 8, 2):
print(i)
"""
Loop over a list to retrieve both the index and the value of each list item:
0 dog
1 cat
2 mouse
"""
animals = ["dog", "cat", "mouse"]
for i, value in enumerate(animals):
print(i, value)
"""
While loops go until a condition is no longer met.
prints:
0
1
2
3
"""
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; For loops iterate over lists
(dolist (animal '("dog" "cat" "mouse"))
;; You can use `format` to interpolate formatted strings
(message "%s is a mammal" animal))
;; "dotimes" is used to iterate over a sequence of numbers
(dotimes (i 4)
(message "%d" i))
;; To create a range from 4 to 7 (inclusive in Python, but we adjust for Lisp)
(dotimes (i 4)
(message "%d" (+ i 4)))
;; Range with a step
(let ((start 4)
(end 8)
(step 2))
(while (&lt; start end)
(message "%d" start)
(setq start (+ start step))))
;; Loop over a list to retrieve both the index and the value of each list item
(let ((animals '("dog" "cat" "mouse"))
(i 0))
(dolist (value animals)
(message "%d %s" i value)
(setq i (1+ i))))
;; While loops go until a condition is no longer met.
(let ((i 0))
(while (&lt; i 4)
(message "%d" i)
(setq i (1+ i))))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="while">While&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
"""
While loops go until a condition is no longer met.
prints:
0
1
2
3
"""
x = 0
while x &lt; 4:
print(x)
x += 1 # Shorthand for x = x + 1
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; For loops iterate over lists
(dolist (animal '("dog" "cat" "mouse"))
;; You can use `format` to interpolate formatted strings
(message "%s is a mammal" animal))
;; "dotimes" is used to iterate over a sequence of numbers
(dotimes (i 4)
(message "%d" i))
;; To create a range from 4 to 7 (inclusive in Python, but we adjust for Lisp)
(dotimes (i 4)
(message "%d" (+ i 4)))
;; Range with a step
(let ((start 4)
(end 8)
(step 2))
(while (&lt; start end)
(message "%d" start)
(setq start (+ start step))))
;; Loop over a list to retrieve both the index and the value of each list item
(let ((animals '("dog" "cat" "mouse"))
(i 0))
(dolist (value animals)
(message "%d %s" i value)
(setq i (1+ i))))
;; While loops go until a condition is no longer met.
(let ((i 0))
(while (&lt; i 4)
(message "%d" i)
(setq i (1+ i))))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="try-dot-dot-dot-catch">try &amp;hellip; catch&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Handle exceptions with a try/except block
try:
# Use "raise" to raise an error
raise IndexError("This is an index error")
except IndexError as e:
pass # Refrain from this, provide a recovery (next example).
except (TypeError, NameError):
pass # Multiple exceptions can be processed jointly.
else: # Optional clause to the try/except block. Must follow
# all except blocks.
print("All good!") # Runs only if the code in try raises no exceptions
finally: # Execute under all circumstances
print("We can clean up resources here")
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Handle exceptions with a condition-case
(condition-case err
;; Use `error` to raise an error
(error "This is an index error")
;; Each error type to be caught is specified in a separate clause.
(error (message "Caught an error: %s" (error-message-string err))) ;; Handle specific errors
(index-error nil) ;; No action taken, similar to 'pass' in Python
(type-error nil)) ;; Handle multiple specific errors jointly like TypeError
;; Emacs Lisp does not have a direct equivalent of Python's else and finally clauses.
;; To simulate 'finally', you just continue writing code after the condition-case
(message "We can clean up resources here")
;; If you need to run something only if no error was raised, you would have to manage
;; it with additional flags or control flow structures outside the condition-case.
(let ((no-error t))
(condition-case nil
(progn
;; Potentially error-throwing code here
(error "Potential Error"))
(error (setq no-error nil))) ;; On error, set flag to nil
(if no-error
(message "All good!"))) ;; This runs only if no error was raised
;; Finally, code that runs regardless of error presence
(message "This always runs, simulating 'finally'")
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="with-statement">with statement&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Instead of try/finally to cleanup resources you can use a with statement
with open("myfile.txt") as f:
for line in f:
print(line)
# Writing to a file
contents = {"aa": 12, "bb": 21}
with open("myfile1.txt", "w") as file:
file.write(str(contents)) # writes a string to a file
import json
with open("myfile2.txt", "w") as file:
file.write(json.dumps(contents)) # writes an object to a file
# Reading from a file
with open("myfile1.txt") as file:
contents = file.read() # reads a string from a file
print(contents)
# print: {"aa": 12, "bb": 21}
with open("myfile2.txt", "r") as file:
contents = json.load(file) # reads a json object from a file
print(contents)
# print: {"aa": 12, "bb": 21}
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Reading from a file
(with-temp-buffer
(insert-file-contents "myfile.txt")
(goto-char (point-min))
(while (not (eobp))
(message "%s" (buffer-substring (line-beginning-position) (line-end-position)))
(forward-line 1)))
;; Writing to a file
(let ((contents (format "%s" '((aa . 12) (bb . 21)))))
(with-temp-file "myfile1.txt"
(insert contents)))
;; Emacs Lisp doesn't have a built-in JSON parser in its default environment,
;; but assuming json.el or similar is available:
(require 'json)
(let ((contents (json-encode '((aa . 12) (bb . 21)))))
(with-temp-file "myfile2.txt"
(insert contents)))
;; Reading from a file as a string
(let ((contents ""))
(with-temp-buffer
(insert-file-contents "myfile1.txt")
(setq contents (buffer-string)))
(message "Contents of myfile1.txt: %s" contents))
;; Reading from a file as JSON
(let ((contents nil))
(with-temp-buffer
(insert-file-contents "myfile2.txt")
(setq contents (json-read-from-string (buffer-string))))
(message "Contents of myfile2.txt: %s" contents))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="define-a-function">Define a function&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Use "def" to create new functions
def add(x, y):
print("x is {} and y is {}".format(x, y))
return x + y # Return values with a return statement
# Calling functions with parameters
add(5, 6) # => prints out "x is 5 and y is 6" and returns 11
# Another way to call functions is with keyword arguments
add(y=6, x=5) # Keyword arguments can arrive in any order.
# You can define functions that take a variable number of
# positional arguments
def varargs(*args):
return args
varargs(1, 2, 3) # => (1, 2, 3)
# You can define functions that take a variable number of
# keyword arguments, as well
def keyword_args(**kwargs):
return kwargs
# Let's call it to see what happens
keyword_args(big="foot", loch="ness") # => {"big": "foot", "loch": "ness"}
# You can do both at once, if you like
def all_the_args(*args, **kwargs):
print(args)
print(kwargs)
"""
all_the_args(1, 2, a=3, b=4) prints:
(1, 2)
{"a": 3, "b": 4}
"""
# When calling functions, you can do the opposite of args/kwargs!
# Use * to expand args (tuples) and use ** to expand kwargs (dictionaries).
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(*args) # equivalent: all_the_args(1, 2, 3, 4)
all_the_args(**kwargs) # equivalent: all_the_args(a=3, b=4)
all_the_args(*args, **kwargs) # equivalent: all_the_args(1, 2, 3, 4, a=3, b=4)
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Use `defun` to create new functions
(defun add (x y)
(message "x is %d and y is %d" x y)
(+ x y)) ;; Return values with an implicit return (last expression evaluated)
;; Calling functions with parameters
(add 5 6) ;; => prints out "x is 5 and y is 6" and returns 11
;; Emacs Lisp does not support keyword arguments in the same way Python does,
;; but you can simulate them using a plist (property list).
(defun add-keywords (&amp;rest args)
(let ((x (plist-get args :x))
(y (plist-get args :y)))
(message "x is %d and y is %d" x y)
(+ x y)))
(add-keywords :y 6 :x 5) ;; Keyword arguments can arrive in any order, using plist.
;; You can define functions that take a variable number of
;; positional arguments
(defun varargs (&amp;rest args)
args)
(varargs 1 2 3) ;; => (1 2 3)
;; You can define functions that take a variable number of
;; keyword arguments, as well
(defun keyword-args (&amp;rest args)
args)
;; Let's call it to see what happens
(keyword-args :big "foot" :loch "ness") ;; => (:big "foot" :loch "ness")
;; You can do both at once, if you like
(defun all-the-args (&amp;rest args)
(message "args: %s" (prin1-to-string (cl-remove-if (lambda (x) (keywordp x)) args)))
(message "kwargs: %s" (prin1-to-string (cl-loop for (key val) on args by #'cddr collect (cons key val)))))
;; all_the_args(1, 2, a=3, b=4) prints:
;; args: (1 2)
;; kwargs: ((:a . 3) (:b . 4))
;; When calling functions, you can use apply to expand args (lists)
(setq args '(1 2 3 4))
(setq kwargs '(:a 3 :b 4))
(apply 'all-the-args args) ;; equivalent: all_the_args(1, 2, 3, 4)
(apply 'all-the-args (append args kwargs)) ;; equivalent: all_the_args(1, 2, 3, 4, :a 3, :b 4)
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="global-scopes">Global scopes&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# global scope
x = 5
def set_x(num):
# local scope begins here
# local var x not the same as global var x
x = num # => 43
print(x) # => 43
def set_global_x(num):
# global indicates that particular var lives in the global scope
global x
print(x) # => 5
x = num # global var x is now set to 6
print(x) # => 6
set_x(43)
set_global_x(6)
"""
prints:
43
5
6
"""
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Global scope
(defvar x 5)
;; `let` or `let*` is a safe way to get a local scope without altering
;; the global variables directly.
(defun set-x (num)
;; Local scope begins here
(let ((x num)) ;; Local var x, not the same as global var x
(message "%d" x))) ;; => 43
(defun set-global-x (num)
;; This function uses the global x, if no `let` wrap a local scope
(message "%d" x) ;; => 5 (initial global value)
(setq x num) ;; Global var x is now set to 6
(message "%d" x)) ;; => 6
(set-x 43)
(set-global-x 6)
;; This will print:
;; 43
;; 5
;; 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="closures">Closures&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Python has first class functions
def create_adder(x):
def adder(y):
return x + y
return adder
add_10 = create_adder(10)
add_10(3) # => 13
# Closures in nested functions:
# We can use the nonlocal keyword to work with variables in nested scope which shouldn't be declared in the inner functions.
def create_avg():
total = 0
count = 0
def avg(n):
nonlocal total, count
total += n
count += 1
return total/count
return avg
avg = create_avg()
avg(3) # => 3.0
avg(5) # (3+5)/2 => 4.0
avg(7) # (8+7)/3 => 5.0
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Emacs Lisp has first-class functions
(defun create-adder (x)
(lambda (y) (+ x y)))
(setq add-10 (create-adder 10))
(funcall add-10 3) ;; => 13
;; Closures in nested functions
(defun create-avg ()
(let ((total 0) (count 0))
(lambda (n)
(setq total (+ total n))
(setq count (1+ count))
(/ (float total) count))))
(setq avg (create-avg))
(funcall avg 3) ;; => 3.0
(funcall avg 5) ;; => 4.0
(funcall avg 7) ;; => 5.0
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="lambda-function">lambda function&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# There are also anonymous functions
(lambda x: x > 2)(3) # => True
(lambda x, y: x ** 2 + y ** 2)(2, 1) # => 5
# There are built-in higher order functions
list(map(add_10, [1, 2, 3])) # => [11, 12, 13]
list(map(max, [1, 2, 3], [4, 2, 1])) # => [4, 2, 3]
list(filter(lambda x: x > 5, [3, 4, 5, 6, 7])) # => [6, 7]
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Anonymous functions
(funcall (lambda (x) (> x 2)) 3) ;; => t (true in Emacs Lisp)
(funcall (lambda (x y) (+ (* x x) (* y y))) 2 1) ;; => 5
;; First, let's assume 'add-10' is already defined as in the previous example
(setq add-10 (create-adder 10))
;; There are built-in higher order functions
(mapcar add-10 '(1 2 3)) ;; => (11 12 13)
(mapcar #'max '(1 2 3) '(4 2 1)) ;; => (4 2 3)
;; Filter using a lambda
(remove-if-not (lambda (x) (> x 5)) '(3 4 5 6 7)) ;; => (6 7)
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="modules">Modules&lt;/h2>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# You can import modules
import math
print(math.sqrt(16)) # => 4.0
# You can get specific functions from a module
from math import ceil, floor
print(ceil(3.7)) # => 4
print(floor(3.7)) # => 3
# You can import all functions from a module.
# Warning: this is not recommended
from math import *
# You can shorten module names
import math as m
math.sqrt(16) == m.sqrt(16) # => True
# Python modules are just ordinary Python files. You
# can write your own, and import them. The name of the
# module is the same as the name of the file.
# You can find out which functions and attributes
# are defined in a module.
import math
dir(math)
# If you have a Python script named math.py in the same
# folder as your current script, the file math.py will
# be loaded instead of the built-in Python module.
# This happens because the local folder has priority
# over Python's built-in libraries.
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; You can require built-in "modules" (libraries in Emacs terms)
(require 'calc) ;; Emacs's built-in calculator library, similar to importing 'math'
(message "%s" (calc-eval "sqrt(16)")) ;; => "4.0"
;; In Emacs, you generally use `require` for modules and access functions directly.
;; There isn't a direct equivalent of Python's `from module import specific_function`,
;; but you access everything directly once the library is loaded.
;; Emacs doesn't support `import *` as Python does. Everything is accessible after `require`.
;; You can use `require` with a nickname, but it's less common than in Python.
;; More commonly, Emacs Lisp doesn't rename libraries; it accesses all exported symbols
;; directly after loading them.
;; Loading your own modules is similar to Python:
;; If you write your own Emacs Lisp file, say `my-module.el`, you can load it using:
(load "my-module") ;; Equivalent to Python's import for custom modules.
;; You can list available functions and variables in a library using `C-h f` (for functions)
;; or `C-h v` (for variables) after loading the library, rather than using `dir()` like in Python.
;; Just as with Python, if you have an Emacs Lisp file in your load-path with the same name
;; as a built-in library, it will be loaded instead of the built-in one if you call `load`
;; explicitly with its filename.
;; Here's an example using `cl-lib` which is a common library for utility functions
(require 'cl-lib)
(message "%s" (cl-lib-version)) ;; Access a specific function or variable from `cl-lib`
;; Note: In practice, Emacs Lisp files (.el) when loaded or required, are typically
;; not referred to with an alias like Python's `as` but are loaded and
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="class">Class&lt;/h2>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# We use the "class" statement to create a class
class Human:
# A class attribute. It is shared by all instances of this class
species = "H. sapiens"
# Basic initializer, this is called when this class is instantiated.
# Note that the double leading and trailing underscores denote objects
# or attributes that are used by Python but that live in user-controlled
# namespaces. Methods(or objects or attributes) like: __init__, __str__,
# __repr__ etc. are called special methods (or sometimes called dunder
# methods). You should not invent such names on your own.
def __init__(self, name):
# Assign the argument to the instance's name attribute
self.name = name
# Initialize property
self._age = 0 # the leading underscore indicates the "age" property is
# intended to be used internally
# do not rely on this to be enforced: it's a hint to other devs
# An instance method. All methods take "self" as the first argument
def say(self, msg):
print("{name}: {message}".format(name=self.name, message=msg))
# Another instance method
def sing(self):
return "yo... yo... microphone check... one two... one two..."
# A class method is shared among all instances
# They are called with the calling class as the first argument
@classmethod
def get_species(cls):
return cls.species
# A static method is called without a class or instance reference
@staticmethod
def grunt():
return "*grunt*"
# A property is just like a getter.
# It turns the method age() into a read-only attribute of the same name.
# There's no need to write trivial getters and setters in Python, though.
@property
def age(self):
return self._age
# This allows the property to be set
@age.setter
def age(self, age):
self._age = age
# This allows the property to be deleted
@age.deleter
def age(self):
del self._age
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; There is no built-in approach to define a struct.
;; The cl-lib extension brings `cl-defstruct` from Common Lisp.
;; Define a struct to mimic a class
(cl-defstruct (human
(:constructor create-human (name)) ;; constructor function
(:conc-name human-)) ;; prefix for automatically generated accessor functions
name ;; This will create human-name accessor
(age 0) ;; Default age, creating human-age accessor and mutator
(species "H. sapiens")) ;; A default class-like attribute, shared unless overridden
;; Instance method equivalent
(defun human-say (this msg)
(message "%s: %s" (human-name this) msg))
(defun human-sing ()
"yo... yo... microphone check... one two... one two...")
;; Class method equivalent
(defun human-get-species (this)
(human-species this))
;; Static method equivalent
(defun human-grunt ()
"*grunt*")
;; Using the struct with methods
(let ((bob (create-human "Bob")))
(human-say bob "Hello!") ;; Bob: Hello!
(message "Bob sings: %s" (human-sing)) ;; Bob sings: yo... yo... microphone check... one two... one two...
(message "Species: %s" (human-get-species bob)) ;; Species: H. sapiens
(setf (human-age bob) 25) ;; Setting age
(message "Bob's age: %d" (human-age bob)) ;; Bob's age: 25
(message "Static call: %s" (human-grunt))) ;; Static call: *grunt*
;; Properties as getters/setters are handled by the `cl-defstruct` accessors and mutators
;; `age` property management is already provided by the struct definition
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/python/">Learn Python in Y Minutes&lt;/a>&lt;/li>
&lt;li>ChatGPT helps to generate most of the code examples&lt;/li>
&lt;/ul>
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js">&lt;/script>
&lt;!-- and it's easy to individually load additional languages -->
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js">&lt;/script>
&lt;script>hljs.highlightAll();&lt;/script>
&lt;style>
table td {
display: block;
float: left;
width: 50%;
}
&lt;/style></description></item><item><title>Emacs Essentials</title><link>/posts/emacs-essentials/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>/posts/emacs-essentials/</guid><description>&lt;p>It is a steep learning curve to master Emacs lisp, there are mainly two issues in it from my experience&lt;/p>
&lt;ol>
&lt;li>the lisp syntax and functional programming&lt;/li>
&lt;li>the fragmented methods and libraries&lt;/li>
&lt;/ol>
&lt;p>For the 1st issue, it is easy to master the syntax after writing several programs and getting used to them, but for the 2nd one, one needs to take notes or remember something.&lt;/p>
&lt;p>In this blog, I focus on the 2nd point and keep updating the notes of some methods and libraries that I think are essential for writing Emacs lisp packages.&lt;/p>
&lt;h2 id="builtin-methods">builtin methods&lt;/h2>
&lt;h3 id="buffer">buffer&lt;/h3>
&lt;h4 id="current-buffer-get-the-current-buffer">current-buffer: get the current buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">current-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer emacs-essentials.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-buffer-get-a-buffer-by-name">get-buffer: get a buffer by name&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer *scratch*&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-buffer-create-create-the-buffer-if-not-exist">get-buffer-create: create the buffer if not exist&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-buffer-create&lt;/span> &lt;span style="color:#4070a0">&amp;#34;yaya&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer yaya&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="changing-the-current-buffer">changing the current buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">set-buffer&lt;/span> (&lt;span style="color:#06287e">get-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">current-buffer&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="goto-a-buffer">Goto a buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-current-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*BUF*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; do something like progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="changing-the-current-buffer-safely">Changing the current buffer safely&lt;/h4>
&lt;p>It will return to the original buffer after the operation finished.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">save-current-buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">set-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Current buffer: %s&amp;#34;&lt;/span> (&lt;span style="color:#06287e">current-buffer&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">current-buffer&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer 20210801162858-emacs_lisp.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="working-with-file-buffers">Working with file buffers&lt;/h4>
&lt;p>To get the full file path for the file that the buffer represents&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">buffer-file-name&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/Users/yanchunwei/project/myblog2022/content-org/emacs-essentials.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To find a buffer that represents a particular file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-file-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/Users/yanchunwei/project/myblog2022/content-org/emacs-essentials.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer emacs-essentials.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="loading-a-file-into-a-buffer-without-display-it">Loading a file into a buffer without display it&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">find-file-noselect&lt;/span> &lt;span style="color:#4070a0">&amp;#34;xx.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-all-buffer-names">Get all buffer names&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">mapcar&lt;/span> &lt;span style="color:#06287e">#&amp;#39;buffer-name&lt;/span> (&lt;span style="color:#06287e">buffer-list&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="save-execution-operate-on-other-buffers-without-altering-the-current-context">save-execution: Operate on other buffers without altering the current context&lt;/h4>
&lt;p>Buffer is a core data structure in elisp, so it is normial to switch to other buffers, do some operations and return back. &lt;code>save-execution&lt;/code> helps to restore the previous context when switching to other buffers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">save-excursion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; do anything on other buffers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; Return to the previous context: buffer and point&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="point">point&lt;/h3>
&lt;p>The &amp;ldquo;point&amp;rdquo; is the location of the cursor in the buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>7508
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point-max&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>8010
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point-min&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="moving-the-point">Moving the point&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">goto-char&lt;/span> &lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">goto-char&lt;/span> (&lt;span style="color:#06287e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; goto the begining of the buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">beginning-of-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; goto the end of the buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">end-of-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-char&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-char&lt;/span> &lt;span style="color:#40a070">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">backward-word&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="preserving-the-point">Preserving the point&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">save-excursion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">goto-char&lt;/span> (&lt;span style="color:#06287e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">point&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>8471
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="examining-buffer-text">Examining buffer text&lt;/h4>
&lt;p>To look at text in the buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span> (&lt;span style="color:#06287e">point&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span> (&lt;span style="color:#06287e">point-min&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>58
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="the-thing">The Thing&lt;/h4>
&lt;p>The &lt;code>thing-at-point&lt;/code> function is very useful for grabbing the text at the point if it matches a particular type of &amp;ldquo;thing&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;word&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;sentence&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(thing-at-point &amp;#39;sentence)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#+END_SRC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;sentence&lt;/span> &lt;span style="color:#60add5">t&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(thing-at-point &amp;#39;sentence t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#+END_SRC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="serching-for-text">Serching for text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">search-forward&lt;/span> &lt;span style="color:#4070a0">&amp;#34;thing&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="inserting-text">Inserting text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;This is&amp;#34;&lt;/span> &lt;span style="color:#4070a0">?\s&lt;/span> &lt;span style="color:#4070a0">?\n&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Sparta!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="deleting-text">Deleting text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-current-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;.gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">delete-region&lt;/span> (&lt;span style="color:#06287e">point&lt;/span>) (&lt;span style="color:#06287e">point-max&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="saving-a-buffer">Saving a buffer&lt;/h4>
&lt;p>To save the contents of a buffer back to the file it is associated with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">save-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="org-model-programming">org-model programming&lt;/h3>
&lt;h4 id="tags-related">Tags related&lt;/h4>
&lt;p>Tags in org-mode are as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-org" data-lang="org">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080;font-weight:bold">*&lt;/span>&lt;span style="font-weight:bold"> heading&lt;/span>&lt;span style="font-style:italic"> :tag0:tag1:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Get tags&lt;/p>
&lt;p>To get tags on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-get-tags&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>Set tags&lt;/p>
&lt;p>To set tags on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-set-tags&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>)) &lt;span style="color:#007020">:hello:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="properties-related">Properties related&lt;/h4>
&lt;p>Properties in org-mode is as follows, where a property called &amp;ldquo;prop&amp;rdquo; has a &amp;ldquo;value&amp;rdquo;. It is handy to store some meta data using properties.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-org" data-lang="org">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080;font-weight:bold">*&lt;/span>&lt;span style="font-weight:bold"> headline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">:PROPERTIES:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#60a0b0;background-color:#fff0f0">:prop: value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;background-color:#fff0f0">&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">:END:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Get properties&lt;/p>
&lt;p>Get properties of the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-entry-properties&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>Set property&lt;/p>
&lt;p>To set a property on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-set-property&lt;/span> &lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;tom&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="file-and-path">file and path&lt;/h3>
&lt;h4 id="get-the-path-of-the-current-file">Get the path of the current file&lt;/h4>
&lt;p>The &lt;code>buffer-file-name&lt;/code> is a buffer builtin variable holding the file name of the current buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">file-truename&lt;/span> &lt;span style="color:#06287e">buffer-file-name&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/tmp/emacs-essentials.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-path-without-suffix">Get path without suffix&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">file-name-sans-extension&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/tmp/a.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/tmp/a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="write-to-file">Write to file&lt;/h4>
&lt;p>Overwrite the content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-temp-file&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/tmp/1.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello world&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;file content: %s&amp;#34;&lt;/span> (&lt;span style="color:#06287e">buffer-string&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>file content: hello world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="execute-shell-command">execute shell command&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">shell-command&lt;/span> &lt;span style="color:#4070a0">&amp;#34;echo hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="condition-case-try-catch-in-elisp">condition-case: try-catch in elisp&lt;/h3>
&lt;p>Like the try-catch in Python, where a try-catch can launch some unsafe function and catch the error.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">condition-case&lt;/span> &lt;span style="color:#bb60d5">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;No error&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">error&lt;/span> &lt;span style="color:#4070a0">&amp;#34;some error&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>No error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modern-libraries">Modern libraries&lt;/h2>
&lt;h3 id="ht-dot-el-for-hashtables">ht.el for hashtables&lt;/h3>
&lt;p>Reference &lt;a href="https://github.com/Wilfred/ht.el">ht.el&lt;/a> for more details.&lt;/p>
&lt;h4 id="creating-a-hash-table">creating a hash table&lt;/h4>
&lt;p>Create an empty hash table&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht-create&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">the-dic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a hash table with initial records&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">the-dic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (&amp;#34;name&amp;#34; &amp;#34;Tom&amp;#34; &amp;#34;sex&amp;#34; male))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="accessing-the-hash-table">accessing the hash table&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; get a record&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; returns &amp;#34;Tom&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-get&lt;/span> &lt;span style="color:#bb60d5">the-dic&lt;/span> &lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Tom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iterating-over-the-hash-table">Iterating over the hash table&lt;/h4>
&lt;p>Readonly mapping:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;age&amp;#34;&lt;/span> &lt;span style="color:#40a070">18&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-map&lt;/span> (&lt;span style="color:#007020">lambda&lt;/span> (&lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>) (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;%S: %S&amp;#34;&lt;/span> &lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)) &lt;span style="color:#bb60d5">the-dic&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;ldquo;age&amp;rdquo;: 18&lt;/td>
&lt;td>&amp;ldquo;sex&amp;rdquo;: male&lt;/td>
&lt;td>&amp;ldquo;name&amp;rdquo;: &amp;ldquo;Tom&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Mutable mapping:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;age&amp;#34;&lt;/span> &lt;span style="color:#40a070">18&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-map&lt;/span> (&lt;span style="color:#007020">lambda&lt;/span> (&lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; modify the value if is string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">setf&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span> (&lt;span style="color:#007020">if&lt;/span> (&lt;span style="color:#06287e">stringp&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">concat&lt;/span> &lt;span style="color:#4070a0">&amp;#34;modified &amp;#34;&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">value&lt;/span>))) &lt;span style="color:#bb60d5">the-dic&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>male&lt;/td>
&lt;td>modified Tom&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="debug-and-development-in-elisp">Debug and development in Elisp&lt;/h2>
&lt;p>One handly tool is &lt;code>toggle-debug-on-error&lt;/code>, it will print the error stack.&lt;/p></description></item></channel></rss>