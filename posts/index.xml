<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Superjomn's blog</title><link>/posts/</link><description>Recent content in Posts on Superjomn's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 30 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>flash-attention Usage: a Worknote for LLM inference</title><link>/posts/flash-attention-usage/</link><pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate><guid>/posts/flash-attention-usage/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>The &lt;a href="https://github.com/Dao-AILab/flash-attention/tree/main">flash-attention&lt;/a> project provides &lt;code>flash_attn&lt;/code> package in Python, and it provides multiple APIs in the interface.
As the APIs contains many LLM optimization concepts such as paged kv-cache, variant-length (continuous batching) and so on.
This post tries to aggregate related information for the related concepts, and focus on inference only &lt;span class="sidenote-wrapper">
&lt;label for="inferece-only" class="sidenote-label">⊕&lt;/label>
&lt;input type="checkbox" id="inferece-only" class="sidenote-checkbox">
&lt;span class="sidenote">We will not cover the modules defined for training, and only focus on several basic functional APIs used in inference&lt;/span>
&lt;/span>
, for using the &lt;code>flash_attn&lt;/code> APIs.&lt;/p>
&lt;h3 id="the-apis">The APIs&lt;/h3>
&lt;p>We will focus on the following two APIs which are also tested in the &lt;a href="https://github.com/Dao-AILab/flash-attention/tree/1a58058a6da83bd7baaf4c512e8a1abe0240bb77/tests/test_flash_attn.py">test_flash_attn.py&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>flash_attn_varlen_func&lt;/li>
&lt;li>flash_attn_with_kvcache&lt;/li>
&lt;/ul>
&lt;p>These two APIs can work with Paged KV Cache, which are crucial for the inference of LLM, and they are used in some LLM projects such as SGLang or vLLM.&lt;/p>
&lt;h3 id="the-related-concepts">The related concepts&lt;/h3>
&lt;h4 id="prefilling-and-decoding">Prefilling and Decoding&lt;/h4>
&lt;p>The flash-attention provides two different sets of APIs for prefilling and decoding.&lt;/p>
&lt;p>Here is some comparasion between the two:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>-&lt;/th>
&lt;th>Prefilling&lt;/th>
&lt;th>Decoding&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Input Tokens&lt;/td>
&lt;td>seqlen &amp;gt;= 1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Output Tokens&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The difference in the IO tokens result in different arguments in the APIs.&lt;/p>
&lt;h4 id="kv-cache">KV Cache&lt;/h4>
&lt;p>The self-attention is computed as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># hidden_states for the first transformer layer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># token_embeddings: [batch_size, seq_len, hidden_size]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token_embeddings &lt;span style="color:#666">=&lt;/span> token_embeddings[input_token_ids]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># position_embeddings: [batch_size, seq_len, hidden_size]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>position_embeddings &lt;span style="color:#666">=&lt;/span> position_embeddings[position_ids]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hidden_states &lt;span style="color:#666">=&lt;/span> token_embeddings &lt;span style="color:#666">+&lt;/span> position_embeddings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">attention&lt;/span>(hidden_states):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query &lt;span style="color:#666">=&lt;/span> hidden_states &lt;span style="color:#666">@&lt;/span> Wq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#666">=&lt;/span> hidden_states &lt;span style="color:#666">@&lt;/span> Wk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#666">=&lt;/span> hidden_states &lt;span style="color:#666">@&lt;/span> Wv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># MHA (Multi-Head Attention)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attn_output &lt;span style="color:#666">=&lt;/span> MHA(query, key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> attn_output &lt;span style="color:#60a0b0;font-style:italic"># it will be the hidden_states for the next layer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Suppose the current sequence length is &lt;code>seq_len&lt;/code>, and the batch size is &lt;code>batch_size&lt;/code>. As the hidden_states is of shape &lt;code>[batch_size, seq_len, hidden_size]&lt;/code>, the query, key and value are of shape &lt;code>[batch_size, seq_len, hidden_size]&lt;/code>,
for the next token, the hidden_states is of shape &lt;code>[batch_size, seq_len + 1, hidden_size]&lt;/code>, and both the key and value are of shape &lt;code>[batch_size, seq_len + 1, hidden_size]&lt;/code>.
Since the &lt;code>Wk&lt;/code> and &lt;code>Wv&lt;/code> are fixed, the key and value can be pre-computed and stored in the memory.&lt;/p>
&lt;p>Here is the pseudo code for the above process:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># current sequence length is seq_len, we hope to predict the next token of (seq_len + 1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># kv cache: [batch_size, seq_len, hidden_size]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">kvcached_attention&lt;/span>(hidden_states, k_cache, v_cache):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># query: [batch_size, seq_len, hidden_size] for prefilling phase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># query: [batch_size, 1, hidden_size] for decoding phase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query &lt;span style="color:#666">=&lt;/span> hidden_states &lt;span style="color:#666">@&lt;/span> Wq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># key, value: [batch_size, seq_len, hidden_size]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#666">=&lt;/span> k_cache &lt;span style="color:#60a0b0;font-style:italic"># key is cached, which eliminates the computation of $hidden_states @ Wk$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#666">=&lt;/span> v_cache &lt;span style="color:#60a0b0;font-style:italic"># so is value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attn_output &lt;span style="color:#666">=&lt;/span> MHA(query, key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> attn_output &lt;span style="color:#60a0b0;font-style:italic"># it will be the hidden_states for the next layer&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="paged-kv-cache">Paged KV Cache&lt;/h4>
&lt;p>KV Cache is vital, while it is not efficient for batch inference. Suppose we have a batch of sequences with different lengths,
and for K and V, we need to store the caches in Tensors, the shape of which is &lt;code>[batch_size, max_seq_len, hidden_size]&lt;/code> where &lt;code>max_seq_len&lt;/code> is the maximum sequence length in the batch.
What&amp;rsquo;s more, normally, we will append the new key and value to the end of the cache, thus the shape could be &lt;code>[batch_size, max_prefill_len + max_generate_len, hidden_size]&lt;/code>, which may waste a lot of memory.&lt;/p>
&lt;p>To solve the above problems, we can use the paged KV cache. The idea is to split the cache into several pages, and each sequence will only cache the number of pages that are used.&lt;/p>
&lt;p>For example, if we have 3 sequences with length 10, 20, 30, and we set the page size to 10, then the total number of pages is 1 + 2 + 3 = 6. Normally the paged cache is stored with two tensors, one holds the addresses of the pages for the batch, and the other holds the number of pages for each sequence.
Paged KV Cache modified the inputs to the attention function, thus it needs dedicated kernels.&lt;/p>
&lt;h2 id="apis">APIs&lt;/h2>
&lt;h3 id="flash-attn-varlen-func-for-prefilling">flash_attn_varlen_func for prefilling&lt;/h3>
&lt;p>This API is mainly used for prefilling, as the prefilling could have multiple sequences with different lengths.&lt;/p>
&lt;h4 id="flash-attn-varlen-func-without-kv-cache">flash_attn_varlen_func without KV Cache&lt;/h4>
&lt;p>It is simpler to use without KV Cache:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">test_flash_attn_varlen_func_without_kvcache&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;cuda&amp;#34;&lt;/span>, seed&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">42&lt;/span>, batch_size&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>, num_heads&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, head_dim&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;Test variable length FlashAttention implementation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> device: Device to run the test on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> seed: Random seed for reproducibility
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> batch_size: Number of sequences in batch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> num_heads: Number of attention heads
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> head_dim: Dimension of each attention head
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> The flash_attn_varlen_func is for prefilling phase.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Set seed for reproducibility&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> torch&lt;span style="color:#666">.&lt;/span>manual_seed(seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calculate total hidden dimension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hidden_dim &lt;span style="color:#666">=&lt;/span> num_heads &lt;span style="color:#666">*&lt;/span> head_dim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Generate random sequence lengths between 10 and 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_len &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randint(&lt;span style="color:#40a070">10&lt;/span>, &lt;span style="color:#40a070">100&lt;/span>, (batch_size, &lt;span style="color:#40a070">1&lt;/span>), device&lt;span style="color:#666">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seq_len &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>max(seq_len)&lt;span style="color:#666">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_seq_len &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>sum(seq_len)&lt;span style="color:#666">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># All of the q,k,v packs all the sequence into one tensor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create query, key, value tensors (total_seq_len, num_heads, head_dim)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(total_seq_len, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(total_seq_len, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(total_seq_len, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Remove the extra dimension from seq_len&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_len &lt;span style="color:#666">=&lt;/span> seq_len&lt;span style="color:#666">.&lt;/span>squeeze(&lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create cumulative sequence lengths with leading 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This creates offsets: [0, len1, len1+len2, len1+len2+len3, ...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_q &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>cumsum(seq_len, dim&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">0&lt;/span>, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_q &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>cat([torch&lt;span style="color:#666">.&lt;/span>zeros(&lt;span style="color:#40a070">1&lt;/span>, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32, device&lt;span style="color:#666">=&lt;/span>device), cu_seqlens_q])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_k &lt;span style="color:#666">=&lt;/span> cu_seqlens_q&lt;span style="color:#666">.&lt;/span>clone() &lt;span style="color:#60a0b0;font-style:italic"># Keys have same lengths as queries&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Run flash attention with variable length sequences&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#666">=&lt;/span> flash_attn_varlen_func(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_q&lt;span style="color:#666">=&lt;/span>cu_seqlens_q,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_k&lt;span style="color:#666">=&lt;/span>cu_seqlens_k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seqlen_q&lt;span style="color:#666">=&lt;/span>max_seq_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seqlen_k&lt;span style="color:#666">=&lt;/span>max_seq_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropout_p&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">0.0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_attn_probs&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#666">=&lt;/span> res[&lt;span style="color:#40a070">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attn_probs &lt;span style="color:#666">=&lt;/span> res[&lt;span style="color:#40a070">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S_mask &lt;span style="color:#666">=&lt;/span> res[&lt;span style="color:#40a070">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Basic validation - check output shape matches input shape&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#666">.&lt;/span>shape &lt;span style="color:#666">==&lt;/span> q&lt;span style="color:#666">.&lt;/span>shape
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ), &lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Output shape &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>output&lt;span style="color:#666">.&lt;/span>shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> doesn&amp;#39;t match input shape &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>q&lt;span style="color:#666">.&lt;/span>shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Verify output is not all zeros or NaNs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> torch&lt;span style="color:#666">.&lt;/span>isnan(output)&lt;span style="color:#666">.&lt;/span>any(), &lt;span style="color:#4070a0">&amp;#34;Output contains NaN values&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> torch&lt;span style="color:#666">.&lt;/span>any(output &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>), &lt;span style="color:#4070a0">&amp;#34;Output is all zeros&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;output&amp;#34;&lt;/span>, output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;attn_probs&amp;#34;&lt;/span>, attn_probs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;S_mask&amp;#34;&lt;/span>, S_mask)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="flash-attn-varlen-func-with-kv-cache">flash_attn_varlen_func with KV Cache&lt;/h4>
&lt;p>In an LLM framework, the Paged KV Cache is crucial for memory efficiency, this API can work with Paged KV Cache.&lt;/p>
&lt;p>Let&amp;rsquo;s define the Paged KV Cache utility function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">generate_block_kvcache&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seqlen_k: &lt;span style="color:#007020">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paged_kv_block_size: &lt;span style="color:#007020">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_batch_size: &lt;span style="color:#007020">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nheads_k: &lt;span style="color:#007020">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#007020">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device: torch&lt;span style="color:#666">.&lt;/span>device,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dtype: torch&lt;span style="color:#666">.&lt;/span>dtype,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;Generate a block-based KV cache for efficient memory management in attention.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> This function creates a paged key-value cache organized in memory blocks, along with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> a block table that maps logical sequence positions to physical memory blocks.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> This block-based approach allows efficient memory management for variable-length
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> sequences in transformer decoding.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> max_seqlen_k: Maximum sequence length for keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> paged_kv_block_size: Size of each block in the paged cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> max_batch_size: Maximum batch size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> nheads_k: Number of attention heads
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> d: Dimension of each attention head
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> device: Device to create tensors on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> dtype: Data type for the cache tensors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Tuple containing:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> - k_cache_paged: Paged key cache tensor [num_blocks, block_size, nheads_k, d]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> - v_cache_paged: Paged value cache tensor [num_blocks, block_size, nheads_k, d]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> - block_table: Mapping from logical to physical blocks [batch_size, num_blocks_per_seq]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Calculate total number of blocks needed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_blocks &lt;span style="color:#666">=&lt;/span> math&lt;span style="color:#666">.&lt;/span>ceil(max_seqlen_k &lt;span style="color:#666">/&lt;/span> paged_kv_block_size) &lt;span style="color:#666">*&lt;/span> max_batch_size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create randomized paged cache storage for keys and values&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_cache_paged &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_blocks, paged_kv_block_size, nheads_k, d, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>dtype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v_cache_paged &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_blocks, paged_kv_block_size, nheads_k, d, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>dtype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create block table - a mapping from logical sequence positions to physical memory blocks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Using a random permutation to simulate realistic block allocation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_table &lt;span style="color:#666">=&lt;/span> rearrange(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> torch&lt;span style="color:#666">.&lt;/span>randperm(num_blocks, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32, device&lt;span style="color:#666">=&lt;/span>device),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;(b nblocks) -&amp;gt; b nblocks&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b&lt;span style="color:#666">=&lt;/span>max_batch_size,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> k_cache_paged, v_cache_paged, block_table
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">create_culens&lt;/span>(seq_lens: torch&lt;span style="color:#666">.&lt;/span>Tensor, device: torch&lt;span style="color:#666">.&lt;/span>device):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>cumsum(seq_lens, dim&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">0&lt;/span>, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>cat([torch&lt;span style="color:#666">.&lt;/span>zeros(&lt;span style="color:#40a070">1&lt;/span>, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32, device&lt;span style="color:#666">=&lt;/span>device), cu_seqlens])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> cu_seqlens
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here is the code for using the API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">test_flash_attn_varlen_func_with_kvcache&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;cuda&amp;#34;&lt;/span>, seed&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">42&lt;/span>, batch_size&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>, num_heads&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, head_dim&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;Test flash attention with variable length and KV caching.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Tests the functionality of flash_attn_varlen_func when using paged key-value cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> device: Device to run the test on (default: &amp;#34;cuda&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> seed: Random seed for reproducibility (default: 42)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> batch_size: Number of sequences in batch (default: 10)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> num_heads: Number of attention heads (default: 16)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> head_dim: Dimension of each attention head (default: 16)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Set seed for reproducibility&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> torch&lt;span style="color:#666">.&lt;/span>manual_seed(seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Generate random sequence lengths between 10 and 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_lens &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randint(&lt;span style="color:#40a070">10&lt;/span>, &lt;span style="color:#40a070">100&lt;/span>, (batch_size, &lt;span style="color:#40a070">1&lt;/span>), device&lt;span style="color:#666">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seq_len &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>max(seq_lens)&lt;span style="color:#666">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_seq_len &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>sum(seq_lens)&lt;span style="color:#666">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># KV cache parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paged_kv_block_size &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_k_seq_len &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_seq_lens &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randint(&lt;span style="color:#40a070">0&lt;/span>, max_k_seq_len, (batch_size, &lt;span style="color:#40a070">1&lt;/span>), device&lt;span style="color:#666">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create query tensor packed with all sequences (total_seq_len, num_heads, head_dim)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(total_seq_len, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Generate paged KV cache with extra room for new tokens&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_cache_paged, v_cache_paged, block_table &lt;span style="color:#666">=&lt;/span> generate_block_kvcache(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_k_seq_len &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">100&lt;/span>, &lt;span style="color:#60a0b0;font-style:italic"># room for new tokens&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paged_kv_block_size,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch_size,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_heads,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> head_dim,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Prepare sequence length information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_lens &lt;span style="color:#666">=&lt;/span> seq_lens&lt;span style="color:#666">.&lt;/span>squeeze(&lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_seq_lens &lt;span style="color:#666">=&lt;/span> k_seq_lens&lt;span style="color:#666">.&lt;/span>squeeze(&lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create cumulative sequence lengths for batched attention&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_q &lt;span style="color:#666">=&lt;/span> create_culens(seq_lens, device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_k &lt;span style="color:#666">=&lt;/span> create_culens(k_seq_lens, device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Run flash attention with variable length sequences&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output, attn_probs, S_mask &lt;span style="color:#666">=&lt;/span> flash_attn_varlen_func(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k&lt;span style="color:#666">=&lt;/span>k_cache_paged,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v&lt;span style="color:#666">=&lt;/span>v_cache_paged,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_q&lt;span style="color:#666">=&lt;/span>cu_seqlens_q,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cu_seqlens_k&lt;span style="color:#666">=&lt;/span>cu_seqlens_k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seqlen_q&lt;span style="color:#666">=&lt;/span>max_seq_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seqlen_k&lt;span style="color:#666">=&lt;/span>max_k_seq_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_table&lt;span style="color:#666">=&lt;/span>block_table,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropout_p&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">0.0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_attn_probs&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Verify outputs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> output&lt;span style="color:#666">.&lt;/span>shape &lt;span style="color:#666">==&lt;/span> q&lt;span style="color:#666">.&lt;/span>shape, &lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Output shape &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>output&lt;span style="color:#666">.&lt;/span>shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> doesn&amp;#39;t match query shape &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>q&lt;span style="color:#666">.&lt;/span>shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> torch&lt;span style="color:#666">.&lt;/span>isnan(output)&lt;span style="color:#666">.&lt;/span>any(), &lt;span style="color:#4070a0">&amp;#34;Output contains NaN values&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> torch&lt;span style="color:#666">.&lt;/span>any(output &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>), &lt;span style="color:#4070a0">&amp;#34;Output is all zeros&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> attn_probs &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Attention probabilities not returned&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> S_mask &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Attention mask not returned&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Return results for potential further testing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> output, attn_probs, S_mask
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="flash-attn-with-kvcache-for-decoding">flash_attn_with_kvcache for decoding&lt;/h3>
&lt;p>This API is mainly used for decoding, as the decoding is always a batch of sequences with one token.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">test_flash_attn_with_kvcache&lt;/span>(device&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;cuda&amp;#34;&lt;/span>, seed&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">42&lt;/span>, batch_size&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>, num_heads&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, head_dim&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">16&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&amp;#34;Test flash attention with KV cache for incremental decoding.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> This test validates the functionality of flash_attn_with_kvcache which is designed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> for efficient incremental decoding. The function updates the KV cache in-place with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> new key and value tensors while performing attention in a single kernel call.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> device: Device to run the test on (default: &amp;#34;cuda&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> seed: Random seed for reproducibility (default: 42)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> batch_size: Number of sequences in batch (default: 10)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> num_heads: Number of attention heads (default: 16)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> head_dim: Dimension of each attention head (default: 16)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> Attention output tensor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4070a0"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Set seed for reproducibility&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> torch&lt;span style="color:#666">.&lt;/span>manual_seed(seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create query tensor - for incremental decoding, we only have one token per sequence&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(batch_size, &lt;span style="color:#40a070">1&lt;/span>, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Generate random sequence lengths for the key-value cache (previous tokens)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seq_len_k &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_lens_k &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randint(&lt;span style="color:#40a070">10&lt;/span>, max_seq_len_k, (batch_size,), device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>int32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seq_len_k &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>max(seq_lens_k)&lt;span style="color:#666">.&lt;/span>item()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create paged KV cache - block-based memory structure for efficient caching&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paged_kv_block_size &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_cache_paged, v_cache_paged, block_table &lt;span style="color:#666">=&lt;/span> generate_block_kvcache(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_seq_len_k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paged_kv_block_size,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch_size,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_heads,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> head_dim,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> device,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Create new key and value tensors for the current token&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># (These will be added to the cache in-place during the attention call)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(batch_size, &lt;span style="color:#40a070">1&lt;/span>, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v &lt;span style="color:#666">=&lt;/span> torch&lt;span style="color:#666">.&lt;/span>randn(batch_size, &lt;span style="color:#40a070">1&lt;/span>, num_heads, head_dim, device&lt;span style="color:#666">=&lt;/span>device, dtype&lt;span style="color:#666">=&lt;/span>torch&lt;span style="color:#666">.&lt;/span>float16)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Run flash attention with KV cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># This performs attention and updates the cache in a single operation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#666">=&lt;/span> flash_attn_with_kvcache(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#666">=&lt;/span>q,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k_cache&lt;span style="color:#666">=&lt;/span>k_cache_paged,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v_cache&lt;span style="color:#666">=&lt;/span>v_cache_paged,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k&lt;span style="color:#666">=&lt;/span>k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v&lt;span style="color:#666">=&lt;/span>v,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cache_seqlens&lt;span style="color:#666">=&lt;/span>seq_lens_k,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_table&lt;span style="color:#666">=&lt;/span>block_table,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Validate output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expected_shape &lt;span style="color:#666">=&lt;/span> (batch_size, &lt;span style="color:#40a070">1&lt;/span>, num_heads, head_dim)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> output&lt;span style="color:#666">.&lt;/span>shape &lt;span style="color:#666">==&lt;/span> expected_shape, &lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Output shape &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>output&lt;span style="color:#666">.&lt;/span>shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0"> doesn&amp;#39;t match expected &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>expected_shape&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> &lt;span style="color:#007020;font-weight:bold">not&lt;/span> torch&lt;span style="color:#666">.&lt;/span>isnan(output)&lt;span style="color:#666">.&lt;/span>any(), &lt;span style="color:#4070a0">&amp;#34;Output contains NaN values&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">assert&lt;/span> torch&lt;span style="color:#666">.&lt;/span>any(output &lt;span style="color:#666">!=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>), &lt;span style="color:#4070a0">&amp;#34;Output is all zeros&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Verify cache was updated by checking if sequences grew by 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># (This assumes flash_attn_with_kvcache increments cache_seqlens internally)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-references">The references&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/Superjomn/yallm/blob/main/tests/3rdparty/test_flashattn.py">file&lt;/a> containing all the code&lt;/li>
&lt;/ul></description></item><item><title>Enable Jupyter in Doom Emacs</title><link>/posts/emacs-jupyter/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid>/posts/emacs-jupyter/</guid><description>&lt;p>There are a few adjustments needs for the default installation when using the &lt;a href="https://github.com/emacs-jupyter/jupyter">jupyter package&lt;/a> in Emacs. Here&amp;rsquo;s a step-by-step guide to configure it properly with Doom Emacs.&lt;/p>
&lt;h2 id="step-1-install-the-jupyter-package-dot">Step 1: Install the jupyter package.&lt;/h2>
&lt;p>Add this line to &lt;code>package.el&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">package!&lt;/span> &lt;span style="color:#bb60d5">jupyter&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-2-enable-builtin-jupyter-support-in-org-mode">Step 2: Enable builtin Jupyter Support in Org Mode&lt;/h2>
&lt;p>To enable Jupyter support in Org mode, make the following modifications in your &lt;code>init.el&lt;/code> file:&lt;/p>
&lt;ol>
&lt;li>Uncomment the &lt;code>ein&lt;/code> line. The &lt;a href="https://github.com/millejoh/emacs-ipython-notebook">emacs-ipython-notebook&lt;/a> is a dependency of jupyter package.&lt;/li>
&lt;li>Add &lt;code>+jupyter&lt;/code> to the Org settings. For more details, refer to &lt;a href="https://github.com/doomemacs/doomemacs/blob/5dcba2f89fa5a20c6535e15f859aaef466ce4b90/modules/lang/org/README.org#L63">:lang org&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org&lt;/span> &lt;span style="color:#bb60d5">+jupyter&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic">; organize your plain life in plain text&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-3-patch-for-runtime-errors-with-zeromq">Step 3: Patch for Runtime Errors with ZeroMQ&lt;/h2>
&lt;p>To address a runtime error related to ZeroMQ (as discussed in this &lt;a href="https://github.com/emacs-jupyter/jupyter/issues/527#issuecomment-2391691176">issue&lt;/a>), append the following code to your &lt;code>config.el&lt;/code> or any other configuration file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">defun&lt;/span> &lt;span style="color:#bb60d5">my-jupyter-api-http-request--ignore-login-error-a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#007020">&amp;amp;rest&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">cond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#06287e">member&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;login&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ignore-error&lt;/span> (&lt;span style="color:#bb60d5">jupyter-api-http-error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">apply&lt;/span> &lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">:else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">apply&lt;/span> &lt;span style="color:#bb60d5">func&lt;/span> &lt;span style="color:#bb60d5">url&lt;/span> &lt;span style="color:#bb60d5">endpoint&lt;/span> &lt;span style="color:#bb60d5">method&lt;/span> &lt;span style="color:#bb60d5">data&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">advice-add&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06287e">#&amp;#39;&lt;/span>&lt;span style="color:#bb60d5">jupyter-api-http-request&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">:around&lt;/span> &lt;span style="color:#06287e">#&amp;#39;&lt;/span>&lt;span style="color:#bb60d5">my-jupyter-api-http-request--ignore-login-error-a&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-4-reload-the-emacs">Step 4: reload the Emacs&lt;/h2>
&lt;p>After making these changes, reload Emacs. Doom Emacs should now install the necessary packages.&lt;/p>
&lt;h2 id="using-the-jupyter-package">Using the Jupyter Package&lt;/h2>
&lt;p>To use the jupyter package, you can start an &lt;code>org&lt;/code> file, and invoke &lt;code>jupyter-run-repl&lt;/code> command, it will start a kernel for this file. The python code blocks will map to the jupyter session.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">**&lt;/span> &lt;span style="color:#40a070">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>1024
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Asyncio By Example: Implementing the Producer-Consumer Pattern</title><link>/posts/python-asyncio/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>/posts/python-asyncio/</guid><description>&lt;h2 id="the-most-basic-case">The Most Basic Case&lt;/h2>
&lt;p>With corountines, we can define a produer and consumer without any need for threads. This simplifies our code and makes it more efficient.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">producer&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">6&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>sleep(&lt;span style="color:#40a070">0.2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">yield&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">consumer&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> producer():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>gather(consumer())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#666">.&lt;/span>run(main())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="work-with-heavy-io">Work with Heavy IO&lt;/h2>
&lt;p>When working with heavy IO operations, we need to be careful not to block the event loop. Running heavy IO operations can block the current event loop, which would slow down the scheduling of all coroutines.&lt;/p>
&lt;p>We can use &lt;code>asyncio.to_thread&lt;/code> to run the operation in another thread, thus avoiding the schedule being affected.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">blocking_io&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#666">.&lt;/span>sleep(&lt;span style="color:#40a070">0.1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Blocking IO complete&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">producer&lt;/span>(queue):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>to_thread(blocking_io)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> queue&lt;span style="color:#666">.&lt;/span>put(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Produced 1 item&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">consumer&lt;/span>(queue):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">4&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> queue&lt;span style="color:#666">.&lt;/span>get()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;Consumed 1 item&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#666">.&lt;/span>task_done()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#666">=&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>Queue()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer_task &lt;span style="color:#666">=&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>create_task(producer(queue))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer_task &lt;span style="color:#666">=&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>create_task(consumer(queue))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>gather(producer_task, consumer_task)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#666">.&lt;/span>run(main())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Blocking IO complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Produced 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Consumed 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Blocking IO complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Produced 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Consumed 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Blocking IO complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Produced 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Consumed 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Blocking IO complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Produced 1 item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Consumed 1 item
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="event-driven">Event driven&lt;/h2>
&lt;p>When the producer is not a coutine, we can utilize &lt;code>asyncio.Event&lt;/code> to connect it with coutine world.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">asyncio&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> Queue, Event
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># NOTE: add_request is a traditional function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">add_request&lt;/span>(event:Event, queue:Queue, request:&lt;span style="color:#007020">int&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;add_request: &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>request&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#666">.&lt;/span>put_nowait(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event&lt;span style="color:#666">.&lt;/span>set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">consumer&lt;/span>(event:Event, queue:Queue):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">6&lt;/span>): &lt;span style="color:#60a0b0;font-style:italic"># loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> event&lt;span style="color:#666">.&lt;/span>wait()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event&lt;span style="color:#666">.&lt;/span>clear()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request &lt;span style="color:#666">=&lt;/span> queue&lt;span style="color:#666">.&lt;/span>get_nowait()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;consume: &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>request&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event &lt;span style="color:#666">=&lt;/span> Event()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#666">=&lt;/span> Queue()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer_task &lt;span style="color:#666">=&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>create_task(consumer(event, queue))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">6&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_request(event, queue, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>sleep(&lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> consumer_task
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#666">.&lt;/span>run(main())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>add_request: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_request: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_request: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_request: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_request: 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_request: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consume: 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="take-away">Take away&lt;/h2>
&lt;p>Python coroutine can simplify the code for producer-consumer pattern, and reduce the necessary for threads or other inter-thread collaboration.&lt;/p>
&lt;p>Use &lt;code>asyncio.to_thread&lt;/code> to dispatch blocking IO to another thread and avoid slow down the current &lt;code>event_loop&lt;/code>.&lt;/p>
&lt;p>Use &lt;code>asyncio.Event&lt;/code> and &lt;code>asyncio.Queue&lt;/code> to connect real-world code with coroutines.&lt;/p></description></item><item><title>Emacs Lisp Introduction for Python Programmers</title><link>/posts/elisp-tutorial-for-pythoner/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>/posts/elisp-tutorial-for-pythoner/</guid><description>&lt;p>This is a brief introduction to Emacs Lisp for Python programmers, (although I am not an Elisp expert, and actually I am more familiar with Python than Elisp). Both languages have quite different syntaxes, it is interesting to see how can implement Python code with lisp code.&lt;/p>
&lt;p>The content follows the strucutre from &lt;a href="https://learnxinyminutes.com/docs/python/">Learn X in Y Minutes Where X is Python&lt;/a>, and we will touch all the topics.&lt;/p>
&lt;h2 id="primitive-datatypes-and-operators">Primitive Datatypes and Operators&lt;/h2>
&lt;h3 id="numbers">Numbers&lt;/h3>
&lt;table>
&lt;tr>
&lt;td>
&lt;b>Python&lt;/b>
&lt;pre>&lt;code class="python-html">
# Integer
1
# Float
3.14
# Math is what you would expect
1 + 1 # => 2
8 - 1 # => 7
10 * 2 # => 20
35 / 5 # => 7.0
# Integer division rounds down for both positive and negative numbers.
5 // 3 # => 1
-5 // 3 # => -2
5.0 // 3.0 # => 1.0 # works on floats too
-5.0 // 3.0 # => -2.0
# The result of division is always a float
10.0 / 3 # => 3.3333333333333335
# Modulo operation
7 % 3 # => 1
# i % j have the same sign as j, unlike C
-7 % 3 # => 2
# Exponentiation (x**y, x to the yth power)
2**3 # => 8
# Enforce precedence with parentheses
1 + 3 * 2 # => 7
(1 + 3) * 2 # => 8
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
&lt;b>Elisp&lt;/b>
&lt;pre>&lt;code class="lisp-html">
;; Integer
1
;; Float
3.14
;; Math is what you would expect
(+ 1 1) ; => 2
(- 8 1) ; => 7
(* 10 2) ; => 20
(/ 35 5) ; => 7
;; Integer division rounds down for both positive and negative numbers.
(truncate (/ 5 3)) ; => 1
(truncate (/ -5 3)) ; => -2
(truncate (/ 5.0 3.0)) ; => 1.0 ; works on floats too
(truncate (/ -5.0 3.0)) ; => -2.0
;; The result of division is always a float if the denominator or numerator is float
(/ 10.0 3) ; => 3.3333333333333335
;; Modulo operation
(% 7 3) ; => 1
;; different from Python
(% -7 3) ; => -1
;; Exponentiation
(expt 2 3) ; => 8
;; Enforce precedence with parentheses
(+ 1 (* 3 2)) ; => 7
(* (1+ 3) 2) ; => 8
&lt;/code>&lt;/pre>
&lt;/td>
&lt;/table>
&lt;h3 id="bools-and-comparasion">Bools and comparasion&lt;/h3>
&lt;p>In Emacs Lisp, booleans are represented by the symbols &lt;code>t&lt;/code> for true and &lt;code>nil&lt;/code> for false.&lt;/p>
&lt;table>
&lt;tr> &lt;td>
&lt;pre>&lt;code class="python-html">
# Boolean values are primitives (Note: the capitalization)
True # => True
False # => False
# negate with not
not True # => False
not False # => True
# Boolean Operators
# Note "and" and "or" are case-sensitive
True and False # => False
False or True # => True
# True and False are actually 1 and 0 but with different keywords
True + True # => 2
True * 8 # => 8
False - 5 # => -5
# Comparison operators look at the numerical value of True and False
0 == False # => True
2 > True # => True
2 == True # => False
-5 != False # => True
# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.
# All other values are True
bool(0) # => False
bool("") # => False
bool([]) # => False
bool({}) # => False
bool(()) # => False
bool(set()) # => False
bool(4) # => True
bool(-6) # => True
bool(0) # => False
bool(2) # => True
0 and 2 # => 0
bool(-5) # => True
bool(2) # => True
-5 or 0 # => -5
# Equality is ==
1 == 1 # => True
2 == 1 # => False
# Inequality is !=
1 != 1 # => False
2 != 1 # => True
# More comparisons
1 &lt; 10 # => True
1 > 10 # => False
2 &lt;= 2 # => True
2 >= 2 # => True
# Seeing whether a value is in a range
1 &lt; 2 and 2 &lt; 3 # => True
2 &lt; 3 and 3 &lt; 2 # => False
# Chaining makes this look nicer
1 &lt; 2 &lt; 3 # => True
2 &lt; 3 &lt; 2 # => False
# (is vs. ==) is checks if two variables refer to the same object, but == checks
# if the objects pointed to have the same values.
a = [1, 2, 3, 4] # Point a at a new list, [1, 2, 3, 4]
b = a # Point b at what a is pointing to
b is a # => True, a and b refer to the same object
b == a # => True, a's and b's objects are equal
b = [1, 2, 3, 4] # Point b at a new list, [1, 2, 3, 4]
b is a # => False, a and b do not refer to the same object
b == a # => True, a's and b's objects are equal
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
&lt;pre>&lt;code class="lisp-html">
;; Boolean values are symbols
t ; => t
nil ; => nil
;; negate with not
(not t) ; => nil
(not nil) ; => t
;; Boolean Operators
;; Use `and` and `or` for logical operations
(and t nil) ; => nil
(or nil t) ; => t
;; In Elisp, `t` or `nil` is not numeric, so numerical operations will fail
(+ t t) ; error
(* t 8) ; error
(- nil 5) ; error
;; Comparison operators
(= 0 nil) ; => error, since nil is not a numerical value
(eq 0 nil) ; => nil, because `eq` is used for checking equality of objects
; similar to Python's `is`
(eq 1.0 1.0) ; => nil, both are different objects
(= 1.0 1.0) ; => t, numerical equal
(eq 1 1) ; => t, constant integers of same value share the same object
;; In Elisp, `nil` is the only false value. All other values are true.
(not 0) ; => nil
(not "") ; => nil
(not '()) ; => nil
(not (make-hash-table)) ; => nil
(not nil) ; => t
(not 4) ; => nil
(not -6) ; => nil
(and nil 2) ; => nil
(or -5 nil) ; => -5
;; Equality is checked with `eq` for objects
;; and `equal` for value comparison, or `=` for numbers
(= 1 1) ; => t
(= 2 1) ; => nil
;; Inequality with `/=`
(/= 1 1) ; => nil
(/= 2 1) ; => t
;; More comparisons
(&lt; 1 10) ; => t
(> 1 10) ; => nil
(&lt;= 2 2) ; => t
(>= 2 2) ; => t
;; Logical combinations for range checking
;; Chaining like Python's `1 &lt; 2 &lt; 3` doesn't directly translate
(and (&lt; 1 2) (&lt; 2 3)) ; => t
(and (&lt; 2 3) (&lt; 3 2)) ; => nil
;; Setting up variables and lists
(setq a '(1 2 3 4)) ; Set 'a' to a new list
(setq b a) ; Point 'b' at what 'a' is pointing to
(eq b a) ; => t, 'a' and 'b' refer to the same object
(equal b a) ; => t, 'a's and 'b's objects are equal
(setq b '(1 2 3 4)) ; Set 'b' to a new, but identical list
(eq b a) ; => nil, 'a' and 'b' do not refer to the same object
(equal b a) ; => t, 'a's and 'b's objects are equal
&lt;/code>&lt;/pre>
&lt;/td> &lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>eq&lt;/code> checks if two symbols or objects refer to the same memory address (identical objects).&lt;/li>
&lt;li>&lt;code>equal&lt;/code> tests for structural equality without considering if the two are the exact same object.&lt;/li>
&lt;/ul>
&lt;h3 id="string-related">String related&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Strings are created with " or '
"This is a string."
'This is also a string.'
# Strings can be added too
"Hello " + "world!" # => "Hello world!"
# String literals (but not variables) can be concatenated without using '+'
"Hello " "world!" # => "Hello world!"
# A string can be treated like a list of characters
"Hello world!"[0] # => 'H'
# You can find the length of a string
len("This is a string") # => 16
# Since Python 3.6, you can use f-strings or formatted string literals.
name = "Reiko"
f"She said her name is {name}." # => "She said her name is Reiko"
# Any valid Python expression inside these braces is returned to the string.
f"{name} is {len(name)} characters long." # => "Reiko is 5 characters long."
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Strings are created with double quotes
"This is a string."
"This is also a string."
;; Strings can be concatenated using `concat`
(concat "Hello " "world!") ; => "Hello world!"
;; In Elisp, there is no automatic concatenation without using a function like `concat`.
;; Accessing a character in a string
(aref "Hello world!" 0) ; => 72 (returns the ASCII value of 'H')
;; You can convert the ASCII value to a character if needed
(char-to-string (aref "Hello world!" 0)) ; => "H"
;; Finding the length of a string
(length "This is a string") ; => 16
;; Emacs Lisp doesn't have a built-in feature exactly like Python's f-strings,
;; but you can use `format` to achieve similar results.
(setq name "Reiko")
(format "She said her name is %s." name) ; => "She said her name is Reiko."
;; Using `format` for more complex expressions
(format "%s is %d characters long." name (length name)) ; => "Reiko is 5 characters long."
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="variables-and-collections">Variables and Collections&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="language-python">
print("I'm Python. Nice to meet you!") # => I'm Python. Nice to meet you!
# By default the print function also prints out a newline at the end.
# Use the optional argument end to change the end string.
print("Hello, World", end="!") # => Hello, World!
# Simple way to get input data from console
input_string_var = input("Enter some data: ") # Returns the data as a string
# There are no declarations, only assignments.
# Convention in naming variables is snake_case style
some_var = 5
some_var # => 5
# Accessing a previously unassigned variable is an exception.
# See Control Flow to learn more about exception handling.
some_unknown_var # Raises a NameError
# if can be used as an expression
# Equivalent of C's '?:' ternary operator
"yay!" if 0 > 1 else "nay!" # => "nay!"
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Emacs Lisp has a print function, `message`, commonly used for displaying output in the echo area.
(message "I'm Emacs Lisp. Nice to meet you!") ; Prints: I'm Emacs Lisp. Nice to meet you!
;; By default, `message` also outputs a newline at the end. You can concatenate strings to simulate different endings.
(message "Hello, World!") ; Prints: Hello, World
;; Simple way to get input data from console
(setq input-string-var (read-string "Enter some data: ")) ; Prompts user and returns the data as a string
;; Variables are set with `setq`, and Emacs Lisp uses lower-case with dashes (lisp-case).
(setq some-var 5)
some-var ; => 5
;; Accessing a previously unassigned variable results in `nil` if not set, not an exception.
some-unknown-var ; => nil unless previously set, does not raise an error
;; `if` can be used similarly to the ternary operator
(if (> 0 1) "yay!" "nay!") ; => "nay!"
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="list">list&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Lists store sequences
li = []
# You can start with a prefilled list
other_li = [4, 5, 6]
# Add stuff to the end of a list with append
li.append(1) # li is now [1]
li.append(2) # li is now [1, 2]
li.append(4) # li is now [1, 2, 4]
li.append(3) # li is now [1, 2, 4, 3]
# Remove from the end with pop
li.pop() # => 3 and li is now [1, 2, 4]
# Let's put it back
li.append(3) # li is now [1, 2, 4, 3] again.
# Access a list like you would any array
li[0] # => 1
# Look at the last element
li[-1] # => 3
# Looking out of bounds is an IndexError
li[4] # Raises an IndexError
# Make a one layer deep copy using slices
li2 = li[:] # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.
# Remove arbitrary elements from a list with "del"
del li[2] # li is now [1, 2, 3]
# Remove first occurrence of a value
li.remove(2) # li is now [1, 3]
li.remove(2) # Raises a ValueError as 2 is not in the list
# Insert an element at a specific index
li.insert(1, 2) # li is now [1, 2, 3] again
# Get the index of the first item found matching the argument
li.index(2) # => 1
li.index(4) # Raises a ValueError as 4 is not in the list
# You can add lists
# Note: values for li and for other_li are not modified.
li + other_li # => [1, 2, 3, 4, 5, 6]
# Concatenate lists with "extend()"
li.extend(other_li) # Now li is [1, 2, 3, 4, 5, 6]
# Check for existence in a list with "in"
1 in li # => True
# Examine the length with "len()"
len(li) # => 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Lists store sequences
(setq li '())
;; You can start with a prefilled list
(setq other-li '(4 5 6))
;; The '(...) is a macro of (list ...), so the below has same effect
(setq other-li (list 4 5 6))
;; Add stuff to the end of a list with `push` (note: `push` adds to the front, so let's use `append` for the end)
(setq li (append li '(1))) ; li is now (1)
(setq li (append li '(2))) ; li is now (1 2)
(setq li (append li '(4))) ; li is now (1 2 4)
(setq li (append li '(3))) ; li is now (1 2 4 3)
;; Remove from the end with `pop`
(pop li) ; => 3 and li is now (1 2 4)
;; Let's put it back
(setq li (append li '(3))) ; li is now (1 2 4 3) again.
;; Access a list like you would any array (using `nth`)
(nth 0 li) ; => 1
;; Look at the last element (using `car` on the reversed list)
(car (last li)) ; => 3
;; Looking out of bounds does not raise an error by default, returns nil
(nth 4 li) ; => nil, does not raise an IndexError
;; Make a one layer deep copy using `copy-sequence`
(setq li2 (copy-sequence li)) ;; li2 equals [1 2 4 3] but (eq li2 li) will result in nil.
;; Remove arbitrary elements from a list with `setf` and `nthcdr`
(setf (nthcdr 2 li) (cddr (nthcdr 2 li))) ;; li is now [1 2 3]
;; Emacs Lisp does not have a direct equivalent of Python's `list.remove`
;; for non-destructive removal, you'd typically filter the list
(setq li (remove 2 li)) ;; li is now [1 3]
;; For handling error (when element is not in the list), Emacs Lisp usually uses `condition-case`
(condition-case nil
(setq li (remove 2 li))
(error (message "ValueError: 2 is not in the list")))
;; Insert an element at a specific index
(setq li (cl-list* 1 2 (cdr li))) ;; li is now [1 2 3] again, using `cl-list*` to splice
;; Get the index of the first item found matching the argument
(position 2 li) ;; => 1
(condition-case nil
(position 4 li)
(error (message "ValueError: 4 is not in the list")))
;; You can add lists
(setq result (append li other_li)) ;; => [1 2 3 4 5 6]
;; Concatenate lists with `append` (destructively with `nconc`)
(setq li (append li other_li)) ;; Now li is [1 2 3 4 5 6]
;; Check for existence in a list with `member`
(member 1 li) ;; => (1 2 3 4 5 6) which is true-ish in Lisp (non-nil means true)
;; Examine the length with `length`
(length li) ;; => 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="dict">Dict&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Dictionaries store mappings from keys to values
empty_dict = {}
# Here is a prefilled dictionary
filled_dict = {"one": 1, "two": 2, "three": 3}
# Note keys for dictionaries have to be immutable types. This is to ensure that
# the key can be converted to a constant hash value for quick look-ups.
# Immutable types include ints, floats, strings, tuples.
invalid_dict = {[1,2,3]: "123"} # => Yield a TypeError: unhashable type: 'list'
valid_dict = {(1,2,3):[1,2,3]} # Values can be of any type, however.
# Look up values with []
filled_dict["one"] # => 1
# Get all keys as an iterable with "keys()". We need to wrap the call in list()
# to turn it into a list. We'll talk about those later. Note - for Python
# versions &lt;3.7, dictionary key ordering is not guaranteed. Your results might
# not match the example below exactly. However, as of Python 3.7, dictionary
# items maintain the order at which they are inserted into the dictionary.
list(filled_dict.keys()) # => ["three", "two", "one"] in Python &lt;3.7
list(filled_dict.keys()) # => ["one", "two", "three"] in Python 3.7+
# Get all values as an iterable with "values()". Once again we need to wrap it
# in list() to get it out of the iterable. Note - Same as above regarding key
# ordering.
list(filled_dict.values()) # => [3, 2, 1] in Python &lt;3.7
list(filled_dict.values()) # => [1, 2, 3] in Python 3.7+
# Check for existence of keys in a dictionary with "in"
"one" in filled_dict # => True
1 in filled_dict # => False
# Looking up a non-existing key is a KeyError
filled_dict["four"] # KeyError
# Use "get()" method to avoid the KeyError
filled_dict.get("one") # => 1
filled_dict.get("four") # => None
# The get method supports a default argument when the value is missing
filled_dict.get("one", 4) # => 1
filled_dict.get("four", 4) # => 4
# "setdefault()" inserts into a dictionary only if the given key isn't present
filled_dict.setdefault("five", 5) # filled_dict["five"] is set to 5
filled_dict.setdefault("five", 6) # filled_dict["five"] is still 5
# Adding to a dictionary
filled_dict.update({"four":4}) # => {"one": 1, "two": 2, "three": 3, "four": 4}
filled_dict["four"] = 4 # another way to add to dict
# Remove keys from a dictionary with del
del filled_dict["one"] # Removes the key "one" from filled dict
# From Python 3.5 you can also use the additional unpacking options
{"a": 1, **{"b": 2}} # => {'a': 1, 'b': 2}
{"a": 1, **{"a": 2}} # => {'a': 2}
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Hash tables store mappings from keys to values
(setq empty-dict (make-hash-table))
;; Here is a prefilled hash table
(setq filled-dict (make-hash-table :test 'equal))
(puthash "one" 1 filled-dict)
(puthash "two" 2 filled-dict)
(puthash "three" 3 filled-dict)
;; Note keys for hash tables should be comparable with the test function, `equal` here allows strings
;; Emacs Lisp hash tables do not restrict key types as strictly as Python does by default.
;; Attempt to use mutable types such as lists can be handled but requires careful consideration of equality testing.
;; Look up values with `gethash`
(gethash "one" filled-dict) ;; => 1
;; Get all keys as a list
(hash-table-keys filled-dict) ;; => '("one" "two" "three") in Emacs Lisp, ordering depends on hash function
;; Get all values as a list
(hash-table-values filled-dict) ;; => '(1 2 3)
;; Check for existence of keys in a hash table with `gethash`
(when (gethash "one" filled-dict) t) ;; => t (true)
(when (gethash 1 filled-dict) t) ;; => nil (false)
;; Looking up a non-existing key returns nil by default, no error
(gethash "four" filled-dict) ;; => nil
;; Use `gethash` with a default value to avoid nil for non-existing keys
(gethash "one" filled-dict 4) ;; => 1
(gethash "four" filled-dict 4) ;; => 4
;; `sethash` inserts into a hash table, replacing any existing value for the key
(puthash "five" 5 filled-dict) ;; filled-dict now has key "five" set to 5
(puthash "five" 6 filled-dict) ;; filled-dict["five"] is updated to 6
;; Adding to a hash table
(puthash "four" 4 filled-dict) ;; filled-dict now includes "four" => 4
;; Remove keys from a hash table with `remhash`
(remhash "one" filled-dict) ;; Removes the key "one" from filled-dict
;; Unpacking and merging hash tables isn't a direct feature in Emacs Lisp,
;; but can be achieved through looping and setting keys.
;; Below is an example of how to "merge" two hash tables in Emacs Lisp.
(setq a (make-hash-table :test 'equal))
(setq b (make-hash-table :test 'equal))
(puthash "a" 1 a)
(puthash "b" 2 b)
;; Simulating Python's dict unpacking:
(maphash (lambda (k v) (puthash k v a)) b)
;; Now, 'a' contains the contents of both 'a' and 'b'
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h4 id="set">Set&lt;/h4>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Sets store ... well sets
empty_set = set()
# Initialize a set with a bunch of values.
some_set = {1, 1, 2, 2, 3, 4} # some_set is now {1, 2, 3, 4}
# Similar to keys of a dictionary, elements of a set have to be immutable.
invalid_set = {[1], 1} # => Raises a TypeError: unhashable type: 'list'
valid_set = {(1,), 1}
# Add one more item to the set
filled_set = some_set
filled_set.add(5) # filled_set is now {1, 2, 3, 4, 5}
# Sets do not have duplicate elements
filled_set.add(5) # it remains as before {1, 2, 3, 4, 5}
# Do set intersection with &amp;
other_set = {3, 4, 5, 6}
filled_set &amp; other_set # => {3, 4, 5}
# Do set union with |
filled_set | other_set # => {1, 2, 3, 4, 5, 6}
# Do set difference with -
{1, 2, 3, 4} - {2, 3, 5} # => {1, 4}
# Do set symmetric difference with ^
{1, 2, 3, 4} ^ {2, 3, 5} # => {1, 4, 5}
# Check if set on the left is a superset of set on the right
{1, 2} >= {1, 2, 3} # => False
# Check if set on the left is a subset of set on the right
{1, 2} &lt;= {1, 2, 3} # => True
# Check for existence in a set with in
2 in filled_set # => True
10 in filled_set # => False
# Make a one layer deep copy
filled_set = some_set.copy() # filled_set is {1, 2, 3, 4, 5}
filled_set is some_set # => False
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Sets store ... well, something akin to sets using hash tables
(setq empty-set (make-hash-table :test 'equal))
;; Initialize a "set" with a bunch of values
(setq some-set (make-hash-table :test 'equal))
(mapc (lambda (x) (puthash x t some-set)) '(1 1 2 2 3 4)) ;; some-set is now effectively {1, 2, 3, 4}
;; Similar to keys of a dictionary, elements of a "set" have to be comparable with the test function.
;; Invalid "set" construction would cause errors if attempted with non-hashable types.
;; This is an invalid line in Emacs Lisp and commented out:
;; (setq invalid-set (make-hash-table :test 'equal))
;; (puthash [1] t invalid-set) ;; Would raise an error in a hypothetical correct context
(setq valid-set (make-hash-table :test 'equal))
(puthash (list 1) t valid-set)
(puthash 1 t valid-set)
;; Add one more item to the "set"
(setq filled-set some-set)
(puthash 5 t filled-set) ;; filled-set is now effectively {1, 2, 3, 4, 5}
(puthash 5 t filled-set) ;; it remains as before {1, 2, 3, 4, 5}
;; Set operations using hash tables require custom functions or cl-lib utilities:
;; Intersection (set1 &amp; set2)
(setq other-set (make-hash-table :test 'equal))
(mapc (lambda (x) (puthash x t other-set)) '(3 4 5 6))
(setq intersection-set (cl-intersection (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Union (set1 | set2)
(setq union-set (cl-union (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Difference (set1 - set2)
(setq difference-set (cl-set-difference (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Symmetric Difference (set1 ^ set2)
(setq symmetric-difference-set (cl-set-exclusive-or (hash-table-keys filled-set) (hash-table-keys other-set) :test 'equal))
;; Superset check
(cl-subsetp (hash-table-keys other-set) (hash-table-keys filled-set) :test 'equal) ;; => nil (false, filled-set is not a superset)
;; Subset check
(cl-subsetp (hash-table-keys '(1 2)) (hash-table-keys '(1 2 3)) :test 'equal) ;; => t (true, {1, 2} is a subset of {1, 2, 3})
;; Check for existence in a "set" with `gethash`
(gethash 2 filled-set) ;; => t (true)
(gethash 10 filled-set) ;; => nil (false)
;; Make a one layer deep copy
(setq filled-set-copy (make-hash-table :test 'equal))
(maphash (lambda (k v) (puthash k v filled-set-copy)) filled-set)
(eq filled-set filled-set-copy) ;; => nil
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="control-flow-and-iterables">Control Flow and Iterables&lt;/h2>
&lt;h3 id="if">if&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Let's just make a variable
some_var = 5
# Here is an if statement. Indentation is significant in Python!
# Convention is to use four spaces, not tabs.
# This prints "some_var is smaller than 10"
if some_var > 10:
print("some_var is totally bigger than 10.")
elif some_var &lt; 10: # This elif clause is optional.
print("some_var is smaller than 10.")
else: # This is optional too.
print("some_var is indeed 10.")
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Let's just make a variable
(setq some-var 5)
;; Here is an if statement
;; This prints "some_var is smaller than 10"
(if (> some-var 10)
(message "some_var is totally bigger than 10.")
(if (&lt; some-var 10) ;; This is like the elif in Python
(message "some_var is smaller than 10.")
(message "some_var is indeed 10."))) ;; This is the else part
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
"""
For loops iterate over lists
prints:
dog is a mammal
cat is a mammal
mouse is a mammal
"""
for animal in ["dog", "cat", "mouse"]:
# You can use format() to interpolate formatted strings
print("{} is a mammal".format(animal))
"""
"range(number)" returns an iterable of numbers
from zero up to (but excluding) the given number
prints:
0
1
2
3
"""
for i in range(4):
print(i)
"""
"range(lower, upper)" returns an iterable of numbers
from the lower number to the upper number
prints:
4
5
6
7
"""
for i in range(4, 8):
print(i)
"""
"range(lower, upper, step)" returns an iterable of numbers
from the lower number to the upper number, while incrementing
by step. If step is not indicated, the default value is 1.
prints:
4
6
"""
for i in range(4, 8, 2):
print(i)
"""
Loop over a list to retrieve both the index and the value of each list item:
0 dog
1 cat
2 mouse
"""
animals = ["dog", "cat", "mouse"]
for i, value in enumerate(animals):
print(i, value)
"""
While loops go until a condition is no longer met.
prints:
0
1
2
3
"""
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; For loops iterate over lists
(dolist (animal '("dog" "cat" "mouse"))
;; You can use `format` to interpolate formatted strings
(message "%s is a mammal" animal))
;; "dotimes" is used to iterate over a sequence of numbers
(dotimes (i 4)
(message "%d" i))
;; To create a range from 4 to 7 (inclusive in Python, but we adjust for Lisp)
(dotimes (i 4)
(message "%d" (+ i 4)))
;; Range with a step
(let ((start 4)
(end 8)
(step 2))
(while (&lt; start end)
(message "%d" start)
(setq start (+ start step))))
;; Loop over a list to retrieve both the index and the value of each list item
(let ((animals '("dog" "cat" "mouse"))
(i 0))
(dolist (value animals)
(message "%d %s" i value)
(setq i (1+ i))))
;; While loops go until a condition is no longer met.
(let ((i 0))
(while (&lt; i 4)
(message "%d" i)
(setq i (1+ i))))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="while">While&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
"""
While loops go until a condition is no longer met.
prints:
0
1
2
3
"""
x = 0
while x &lt; 4:
print(x)
x += 1 # Shorthand for x = x + 1
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; For loops iterate over lists
(dolist (animal '("dog" "cat" "mouse"))
;; You can use `format` to interpolate formatted strings
(message "%s is a mammal" animal))
;; "dotimes" is used to iterate over a sequence of numbers
(dotimes (i 4)
(message "%d" i))
;; To create a range from 4 to 7 (inclusive in Python, but we adjust for Lisp)
(dotimes (i 4)
(message "%d" (+ i 4)))
;; Range with a step
(let ((start 4)
(end 8)
(step 2))
(while (&lt; start end)
(message "%d" start)
(setq start (+ start step))))
;; Loop over a list to retrieve both the index and the value of each list item
(let ((animals '("dog" "cat" "mouse"))
(i 0))
(dolist (value animals)
(message "%d %s" i value)
(setq i (1+ i))))
;; While loops go until a condition is no longer met.
(let ((i 0))
(while (&lt; i 4)
(message "%d" i)
(setq i (1+ i))))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="try-dot-dot-dot-catch">try &amp;hellip; catch&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Handle exceptions with a try/except block
try:
# Use "raise" to raise an error
raise IndexError("This is an index error")
except IndexError as e:
pass # Refrain from this, provide a recovery (next example).
except (TypeError, NameError):
pass # Multiple exceptions can be processed jointly.
else: # Optional clause to the try/except block. Must follow
# all except blocks.
print("All good!") # Runs only if the code in try raises no exceptions
finally: # Execute under all circumstances
print("We can clean up resources here")
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Handle exceptions with a condition-case
(condition-case err
;; Use `error` to raise an error
(error "This is an index error")
;; Each error type to be caught is specified in a separate clause.
(error (message "Caught an error: %s" (error-message-string err))) ;; Handle specific errors
(index-error nil) ;; No action taken, similar to 'pass' in Python
(type-error nil)) ;; Handle multiple specific errors jointly like TypeError
;; Emacs Lisp does not have a direct equivalent of Python's else and finally clauses.
;; To simulate 'finally', you just continue writing code after the condition-case
(message "We can clean up resources here")
;; If you need to run something only if no error was raised, you would have to manage
;; it with additional flags or control flow structures outside the condition-case.
(let ((no-error t))
(condition-case nil
(progn
;; Potentially error-throwing code here
(error "Potential Error"))
(error (setq no-error nil))) ;; On error, set flag to nil
(if no-error
(message "All good!"))) ;; This runs only if no error was raised
;; Finally, code that runs regardless of error presence
(message "This always runs, simulating 'finally'")
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="with-statement">with statement&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Instead of try/finally to cleanup resources you can use a with statement
with open("myfile.txt") as f:
for line in f:
print(line)
# Writing to a file
contents = {"aa": 12, "bb": 21}
with open("myfile1.txt", "w") as file:
file.write(str(contents)) # writes a string to a file
import json
with open("myfile2.txt", "w") as file:
file.write(json.dumps(contents)) # writes an object to a file
# Reading from a file
with open("myfile1.txt") as file:
contents = file.read() # reads a string from a file
print(contents)
# print: {"aa": 12, "bb": 21}
with open("myfile2.txt", "r") as file:
contents = json.load(file) # reads a json object from a file
print(contents)
# print: {"aa": 12, "bb": 21}
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Reading from a file
(with-temp-buffer
(insert-file-contents "myfile.txt")
(goto-char (point-min))
(while (not (eobp))
(message "%s" (buffer-substring (line-beginning-position) (line-end-position)))
(forward-line 1)))
;; Writing to a file
(let ((contents (format "%s" '((aa . 12) (bb . 21)))))
(with-temp-file "myfile1.txt"
(insert contents)))
;; Emacs Lisp doesn't have a built-in JSON parser in its default environment,
;; but assuming json.el or similar is available:
(require 'json)
(let ((contents (json-encode '((aa . 12) (bb . 21)))))
(with-temp-file "myfile2.txt"
(insert contents)))
;; Reading from a file as a string
(let ((contents ""))
(with-temp-buffer
(insert-file-contents "myfile1.txt")
(setq contents (buffer-string)))
(message "Contents of myfile1.txt: %s" contents))
;; Reading from a file as JSON
(let ((contents nil))
(with-temp-buffer
(insert-file-contents "myfile2.txt")
(setq contents (json-read-from-string (buffer-string))))
(message "Contents of myfile2.txt: %s" contents))
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="define-a-function">Define a function&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Use "def" to create new functions
def add(x, y):
print("x is {} and y is {}".format(x, y))
return x + y # Return values with a return statement
# Calling functions with parameters
add(5, 6) # => prints out "x is 5 and y is 6" and returns 11
# Another way to call functions is with keyword arguments
add(y=6, x=5) # Keyword arguments can arrive in any order.
# You can define functions that take a variable number of
# positional arguments
def varargs(*args):
return args
varargs(1, 2, 3) # => (1, 2, 3)
# You can define functions that take a variable number of
# keyword arguments, as well
def keyword_args(**kwargs):
return kwargs
# Let's call it to see what happens
keyword_args(big="foot", loch="ness") # => {"big": "foot", "loch": "ness"}
# You can do both at once, if you like
def all_the_args(*args, **kwargs):
print(args)
print(kwargs)
"""
all_the_args(1, 2, a=3, b=4) prints:
(1, 2)
{"a": 3, "b": 4}
"""
# When calling functions, you can do the opposite of args/kwargs!
# Use * to expand args (tuples) and use ** to expand kwargs (dictionaries).
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(*args) # equivalent: all_the_args(1, 2, 3, 4)
all_the_args(**kwargs) # equivalent: all_the_args(a=3, b=4)
all_the_args(*args, **kwargs) # equivalent: all_the_args(1, 2, 3, 4, a=3, b=4)
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Use `defun` to create new functions
(defun add (x y)
(message "x is %d and y is %d" x y)
(+ x y)) ;; Return values with an implicit return (last expression evaluated)
;; Calling functions with parameters
(add 5 6) ;; => prints out "x is 5 and y is 6" and returns 11
;; Emacs Lisp does not support keyword arguments in the same way Python does,
;; but you can simulate them using a plist (property list).
(defun add-keywords (&amp;rest args)
(let ((x (plist-get args :x))
(y (plist-get args :y)))
(message "x is %d and y is %d" x y)
(+ x y)))
(add-keywords :y 6 :x 5) ;; Keyword arguments can arrive in any order, using plist.
;; You can define functions that take a variable number of
;; positional arguments
(defun varargs (&amp;rest args)
args)
(varargs 1 2 3) ;; => (1 2 3)
;; You can define functions that take a variable number of
;; keyword arguments, as well
(defun keyword-args (&amp;rest args)
args)
;; Let's call it to see what happens
(keyword-args :big "foot" :loch "ness") ;; => (:big "foot" :loch "ness")
;; You can do both at once, if you like
(defun all-the-args (&amp;rest args)
(message "args: %s" (prin1-to-string (cl-remove-if (lambda (x) (keywordp x)) args)))
(message "kwargs: %s" (prin1-to-string (cl-loop for (key val) on args by #'cddr collect (cons key val)))))
;; all_the_args(1, 2, a=3, b=4) prints:
;; args: (1 2)
;; kwargs: ((:a . 3) (:b . 4))
;; When calling functions, you can use apply to expand args (lists)
(setq args '(1 2 3 4))
(setq kwargs '(:a 3 :b 4))
(apply 'all-the-args args) ;; equivalent: all_the_args(1, 2, 3, 4)
(apply 'all-the-args (append args kwargs)) ;; equivalent: all_the_args(1, 2, 3, 4, :a 3, :b 4)
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="global-scopes">Global scopes&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# global scope
x = 5
def set_x(num):
# local scope begins here
# local var x not the same as global var x
x = num # => 43
print(x) # => 43
def set_global_x(num):
# global indicates that particular var lives in the global scope
global x
print(x) # => 5
x = num # global var x is now set to 6
print(x) # => 6
set_x(43)
set_global_x(6)
"""
prints:
43
5
6
"""
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Global scope
(defvar x 5)
;; `let` or `let*` is a safe way to get a local scope without altering
;; the global variables directly.
(defun set-x (num)
;; Local scope begins here
(let ((x num)) ;; Local var x, not the same as global var x
(message "%d" x))) ;; => 43
(defun set-global-x (num)
;; This function uses the global x, if no `let` wrap a local scope
(message "%d" x) ;; => 5 (initial global value)
(setq x num) ;; Global var x is now set to 6
(message "%d" x)) ;; => 6
(set-x 43)
(set-global-x 6)
;; This will print:
;; 43
;; 5
;; 6
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="closures">Closures&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# Python has first class functions
def create_adder(x):
def adder(y):
return x + y
return adder
add_10 = create_adder(10)
add_10(3) # => 13
# Closures in nested functions:
# We can use the nonlocal keyword to work with variables in nested scope which shouldn't be declared in the inner functions.
def create_avg():
total = 0
count = 0
def avg(n):
nonlocal total, count
total += n
count += 1
return total/count
return avg
avg = create_avg()
avg(3) # => 3.0
avg(5) # (3+5)/2 => 4.0
avg(7) # (8+7)/3 => 5.0
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Emacs Lisp has first-class functions
(defun create-adder (x)
(lambda (y) (+ x y)))
(setq add-10 (create-adder 10))
(funcall add-10 3) ;; => 13
;; Closures in nested functions
(defun create-avg ()
(let ((total 0) (count 0))
(lambda (n)
(setq total (+ total n))
(setq count (1+ count))
(/ (float total) count))))
(setq avg (create-avg))
(funcall avg 3) ;; => 3.0
(funcall avg 5) ;; => 4.0
(funcall avg 7) ;; => 5.0
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h3 id="lambda-function">lambda function&lt;/h3>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# There are also anonymous functions
(lambda x: x > 2)(3) # => True
(lambda x, y: x ** 2 + y ** 2)(2, 1) # => 5
# There are built-in higher order functions
list(map(add_10, [1, 2, 3])) # => [11, 12, 13]
list(map(max, [1, 2, 3], [4, 2, 1])) # => [4, 2, 3]
list(filter(lambda x: x > 5, [3, 4, 5, 6, 7])) # => [6, 7]
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; Anonymous functions
(funcall (lambda (x) (> x 2)) 3) ;; => t (true in Emacs Lisp)
(funcall (lambda (x y) (+ (* x x) (* y y))) 2 1) ;; => 5
;; First, let's assume 'add-10' is already defined as in the previous example
(setq add-10 (create-adder 10))
;; There are built-in higher order functions
(mapcar add-10 '(1 2 3)) ;; => (11 12 13)
(mapcar #'max '(1 2 3) '(4 2 1)) ;; => (4 2 3)
;; Filter using a lambda
(remove-if-not (lambda (x) (> x 5)) '(3 4 5 6 7)) ;; => (6 7)
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="modules">Modules&lt;/h2>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# You can import modules
import math
print(math.sqrt(16)) # => 4.0
# You can get specific functions from a module
from math import ceil, floor
print(ceil(3.7)) # => 4
print(floor(3.7)) # => 3
# You can import all functions from a module.
# Warning: this is not recommended
from math import *
# You can shorten module names
import math as m
math.sqrt(16) == m.sqrt(16) # => True
# Python modules are just ordinary Python files. You
# can write your own, and import them. The name of the
# module is the same as the name of the file.
# You can find out which functions and attributes
# are defined in a module.
import math
dir(math)
# If you have a Python script named math.py in the same
# folder as your current script, the file math.py will
# be loaded instead of the built-in Python module.
# This happens because the local folder has priority
# over Python's built-in libraries.
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; You can require built-in "modules" (libraries in Emacs terms)
(require 'calc) ;; Emacs's built-in calculator library, similar to importing 'math'
(message "%s" (calc-eval "sqrt(16)")) ;; => "4.0"
;; In Emacs, you generally use `require` for modules and access functions directly.
;; There isn't a direct equivalent of Python's `from module import specific_function`,
;; but you access everything directly once the library is loaded.
;; Emacs doesn't support `import *` as Python does. Everything is accessible after `require`.
;; You can use `require` with a nickname, but it's less common than in Python.
;; More commonly, Emacs Lisp doesn't rename libraries; it accesses all exported symbols
;; directly after loading them.
;; Loading your own modules is similar to Python:
;; If you write your own Emacs Lisp file, say `my-module.el`, you can load it using:
(load "my-module") ;; Equivalent to Python's import for custom modules.
;; You can list available functions and variables in a library using `C-h f` (for functions)
;; or `C-h v` (for variables) after loading the library, rather than using `dir()` like in Python.
;; Just as with Python, if you have an Emacs Lisp file in your load-path with the same name
;; as a built-in library, it will be loaded instead of the built-in one if you call `load`
;; explicitly with its filename.
;; Here's an example using `cl-lib` which is a common library for utility functions
(require 'cl-lib)
(message "%s" (cl-lib-version)) ;; Access a specific function or variable from `cl-lib`
;; Note: In practice, Emacs Lisp files (.el) when loaded or required, are typically
;; not referred to with an alias like Python's `as` but are loaded and
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="class">Class&lt;/h2>
&lt;table> &lt;tr>
&lt;td> &lt;pre>&lt;code class="python-html">
# We use the "class" statement to create a class
class Human:
# A class attribute. It is shared by all instances of this class
species = "H. sapiens"
# Basic initializer, this is called when this class is instantiated.
# Note that the double leading and trailing underscores denote objects
# or attributes that are used by Python but that live in user-controlled
# namespaces. Methods(or objects or attributes) like: __init__, __str__,
# __repr__ etc. are called special methods (or sometimes called dunder
# methods). You should not invent such names on your own.
def __init__(self, name):
# Assign the argument to the instance's name attribute
self.name = name
# Initialize property
self._age = 0 # the leading underscore indicates the "age" property is
# intended to be used internally
# do not rely on this to be enforced: it's a hint to other devs
# An instance method. All methods take "self" as the first argument
def say(self, msg):
print("{name}: {message}".format(name=self.name, message=msg))
# Another instance method
def sing(self):
return "yo... yo... microphone check... one two... one two..."
# A class method is shared among all instances
# They are called with the calling class as the first argument
@classmethod
def get_species(cls):
return cls.species
# A static method is called without a class or instance reference
@staticmethod
def grunt():
return "*grunt*"
# A property is just like a getter.
# It turns the method age() into a read-only attribute of the same name.
# There's no need to write trivial getters and setters in Python, though.
@property
def age(self):
return self._age
# This allows the property to be set
@age.setter
def age(self, age):
self._age = age
# This allows the property to be deleted
@age.deleter
def age(self):
del self._age
&lt;/code>&lt;/pre> &lt;/td>
&lt;td> &lt;pre>&lt;code class="lisp-html">
;; There is no built-in approach to define a struct.
;; The cl-lib extension brings `cl-defstruct` from Common Lisp.
;; Define a struct to mimic a class
(cl-defstruct (human
(:constructor create-human (name)) ;; constructor function
(:conc-name human-)) ;; prefix for automatically generated accessor functions
name ;; This will create human-name accessor
(age 0) ;; Default age, creating human-age accessor and mutator
(species "H. sapiens")) ;; A default class-like attribute, shared unless overridden
;; Instance method equivalent
(defun human-say (this msg)
(message "%s: %s" (human-name this) msg))
(defun human-sing ()
"yo... yo... microphone check... one two... one two...")
;; Class method equivalent
(defun human-get-species (this)
(human-species this))
;; Static method equivalent
(defun human-grunt ()
"*grunt*")
;; Using the struct with methods
(let ((bob (create-human "Bob")))
(human-say bob "Hello!") ;; Bob: Hello!
(message "Bob sings: %s" (human-sing)) ;; Bob sings: yo... yo... microphone check... one two... one two...
(message "Species: %s" (human-get-species bob)) ;; Species: H. sapiens
(setf (human-age bob) 25) ;; Setting age
(message "Bob's age: %d" (human-age bob)) ;; Bob's age: 25
(message "Static call: %s" (human-grunt))) ;; Static call: *grunt*
;; Properties as getters/setters are handled by the `cl-defstruct` accessors and mutators
;; `age` property management is already provided by the struct definition
&lt;/code>&lt;/pre> &lt;/td>
&lt;/tr> &lt;/table>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/python/">Learn Python in Y Minutes&lt;/a>&lt;/li>
&lt;li>ChatGPT helps to generate most of the code examples&lt;/li>
&lt;/ul>
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js">&lt;/script>
&lt;!-- and it's easy to individually load additional languages -->
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js">&lt;/script>
&lt;script>hljs.highlightAll();&lt;/script>
&lt;style>
table td {
display: block;
float: left;
width: 50%;
}
&lt;/style></description></item><item><title>Reduce kernel in CUDA</title><link>/posts/reduce-cuda/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><guid>/posts/reduce-cuda/</guid><description>&lt;h2 id="question-definition">Question definition&lt;/h2>
&lt;p>Given an array of \(n\) integers, the goal is to compute the sum of all elements within the array.&lt;/p>
&lt;h2 id="solutions">Solutions&lt;/h2>
&lt;p>The implementations for all kernel versions can be found at &lt;a href="https://github.com/Superjomn/cuda-from-scratch/blob/dev/2-reduce.cu">2-reduce.cu on GitHub&lt;/a>.&lt;/p>
&lt;h3 id="naive-version-with-atomicadd">Naive Version with &lt;code>atomicAdd&lt;/code>&lt;/h3>
&lt;p>The simplest approach involves utilizing each thread to perform an &lt;code>atomicAdd&lt;/code> operation on the output variable. Here&amp;rsquo;s how the kernel is defined:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">reduce_naive_atomic&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> idx &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> gridSize &lt;span style="color:#666">=&lt;/span> blockDim.x &lt;span style="color:#666">*&lt;/span> gridDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> idx; i &lt;span style="color:#666">&amp;lt;&lt;/span> n; i &lt;span style="color:#666">+=&lt;/span> gridSize)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#666">+=&lt;/span> g_idata[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> atomicAdd(g_odata, sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the kernel launcher is straightforward, invoking the kernel a single time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">launch_reduce&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n, &lt;span style="color:#902000">int&lt;/span> block_size, kernel_fn kernel, cudaStream_t stream)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> idata &lt;span style="color:#666">=&lt;/span> g_idata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> odata &lt;span style="color:#666">=&lt;/span> g_odata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">uint32_t&lt;/span> num_warps &lt;span style="color:#666">=&lt;/span> block_size &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> smem_size &lt;span style="color:#666">=&lt;/span> num_warps &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020;font-weight:bold">sizeof&lt;/span>(&lt;span style="color:#902000">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> num_blocks &lt;span style="color:#666">=&lt;/span> ceil(n, block_size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Launch the kernel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> kernel&lt;span style="color:#666">&amp;lt;&amp;lt;&amp;lt;&lt;/span>num_blocks, block_size, smem_size, stream&lt;span style="color:#666">&amp;gt;&amp;gt;&amp;gt;&lt;/span>(idata, odata, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>FLAGS_profile)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cudaStreamSynchronize(stream);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Copy the final result back to the host
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#902000">int&lt;/span> h_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NVCHECK(cudaMemcpyAsync(&lt;span style="color:#666">&amp;amp;&lt;/span>h_out, odata, &lt;span style="color:#007020;font-weight:bold">sizeof&lt;/span>(&lt;span style="color:#902000">int&lt;/span>), cudaMemcpyDeviceToHost, stream));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> h_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When tested on a GTX 4080, this method achieved a throughput of approximately 82GB/s.&lt;/p>
&lt;h3 id="tiled-reduction-with-shared-memory">Tiled Reduction with Shared Memory&lt;/h3>
&lt;p>A classical approach involves leveraging a thread block to perform local reductions on a tile within shared memory.
This method encompasses several kernel versions, each with different optimizations.&lt;/p>
&lt;h4 id="basic-version">Basic version&lt;/h4>
&lt;p>The initial implementation is as below:&lt;/p>
&lt;ol>
&lt;li>A tile of data is collaboratively loaded into shared memory.&lt;/li>
&lt;li>A partial reduction on this data tile is executed within a thread block, get the sum of the tile.&lt;/li>
&lt;li>The sum is then written to a designated spot in the global memory&amp;rsquo;s output slot. It&amp;rsquo;s important to note that this kernel requires a temporary buffer for writing partial results from each thread block.&lt;/li>
&lt;li>The process repeats with the size \(n\) reduced to \(\frac{n}{blockSize}\), continuing until \(n=1\).&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">reduce_smem_naive&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> tid &lt;span style="color:#666">=&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Read a block of data into shared memory collectively
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> sdata[tid] &lt;span style="color:#666">=&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n) &lt;span style="color:#666">?&lt;/span> g_idata[i] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> stride &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; stride &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x; stride &lt;span style="color:#666">*=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// ISSUE: divergent warps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (tid &lt;span style="color:#666">%&lt;/span> (&lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> stride) &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[tid] &lt;span style="color:#666">+=&lt;/span> sdata[tid &lt;span style="color:#666">+&lt;/span> stride];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads(); &lt;span style="color:#60a0b0;font-style:italic">// need to sync per level
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Write the result for this block to global memory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (tid &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g_odata[blockIdx.x] &lt;span style="color:#666">=&lt;/span> sdata[&lt;span style="color:#40a070">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Launching this kernel multiple times involves a slightly more complex launcher:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">launch_reduce&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n, &lt;span style="color:#902000">int&lt;/span> block_size, kernel_fn kernel, cudaStream_t stream,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">uint32_t&lt;/span> num_blocks, &lt;span style="color:#902000">uint32_t&lt;/span> smem_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> idata &lt;span style="color:#666">=&lt;/span> g_idata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> odata &lt;span style="color:#666">=&lt;/span> g_odata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (smem_size &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> smem_size &lt;span style="color:#666">=&lt;/span> block_size &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#007020;font-weight:bold">sizeof&lt;/span>(&lt;span style="color:#902000">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Calculate the number of blocks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> num_blocks &lt;span style="color:#666">=&lt;/span> (num_blocks &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">0&lt;/span>) &lt;span style="color:#666">?&lt;/span> &lt;span style="color:#002070;font-weight:bold">num_blocks&lt;/span> : (n &lt;span style="color:#666">+&lt;/span> block_size &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">/&lt;/span> block_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>FLAGS_profile)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#4070a0">&amp;#34;- launching: num_blocks: %d, block_size:%d, n:%d&lt;/span>&lt;span style="color:#4070a0;font-weight:bold">\n&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>, num_blocks, block_size, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> level &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Launch the kernel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> kernel&lt;span style="color:#666">&amp;lt;&amp;lt;&amp;lt;&lt;/span>num_blocks, block_size, smem_size, stream&lt;span style="color:#666">&amp;gt;&amp;gt;&amp;gt;&lt;/span>(idata, odata, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>FLAGS_profile)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cudaStreamSynchronize(stream);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level&lt;span style="color:#666">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Recursively reduce the partial sums
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> (num_blocks &lt;span style="color:#666">&amp;gt;&lt;/span> &lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#666">::&lt;/span>swap(idata, odata);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#666">=&lt;/span> num_blocks;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_blocks &lt;span style="color:#666">=&lt;/span> (n &lt;span style="color:#666">+&lt;/span> block_size &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">/&lt;/span> block_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kernel&lt;span style="color:#666">&amp;lt;&amp;lt;&amp;lt;&lt;/span>num_blocks, block_size, smem_size, stream&lt;span style="color:#666">&amp;gt;&amp;gt;&amp;gt;&lt;/span>(idata, odata, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>FLAGS_profile)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cudaStreamSynchronize(stream);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Copy the final result back to the host
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#902000">int&lt;/span> h_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NVCHECK(cudaMemcpyAsync(&lt;span style="color:#666">&amp;amp;&lt;/span>h_out, odata, &lt;span style="color:#007020;font-weight:bold">sizeof&lt;/span>(&lt;span style="color:#902000">int&lt;/span>), cudaMemcpyDeviceToHost, stream));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> h_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All tiled reduction kenrels utilize the aforementioned launcher, achieving a throughput of 54GB/s. This is less efficient compared to the atomic naive version, which reaches 82GB/s.&lt;/p>
&lt;h4 id="avoid-thread-divergence">Avoid thread divergence&lt;/h4>
&lt;p>The basic version encounters significant thread divergence, particularly noticeable at &lt;code>if (tid % (2 * stride) == 0)&lt;/code>.
Here is an optimized variant:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">reduce_smem_1_avoid_divergent_warps&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> tid &lt;span style="color:#666">=&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[tid] &lt;span style="color:#666">=&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n) &lt;span style="color:#666">?&lt;/span> g_idata[i] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> stride &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; stride &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x; stride &lt;span style="color:#666">*=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> index &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> stride &lt;span style="color:#666">*&lt;/span> tid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (index &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Issue: bank conflict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> sdata[index] &lt;span style="color:#666">+=&lt;/span> sdata[index &lt;span style="color:#666">+&lt;/span> stride];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (tid &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g_odata[blockIdx.x] &lt;span style="color:#666">=&lt;/span> sdata[&lt;span style="color:#40a070">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The optimization yields a 70GB/s throughput, marking a 29% improvement over the basic version.&lt;/p>
&lt;h4 id="read-two-elements-one-time">Read two elements one time&lt;/h4>
&lt;p>The preceding version&amp;rsquo;s DRAM throughput was only 20.63%, likely due to&lt;/p>
&lt;ol>
&lt;li>Insufficient grid size for small inputs, leading to underutilized thread resources.&lt;/li>
&lt;li>Each thread reading a single element at a time, given the fixed number of resident thread blocks per SM for a specific kernel, results in a limited number of load instructions issued.&lt;/li>
&lt;/ol>
&lt;p>To enhance DRAM throughput, especially for smaller grid sizes, threads can be configured to read more than one element at a time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">reduce_smem_3_read_two&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> tid &lt;span style="color:#666">=&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> (blockDim.x &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#define GET_ELEM(__idx) ((__idx) &amp;lt; n ? g_idata[(__idx)] : 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[tid] &lt;span style="color:#666">=&lt;/span> GET_ELEM(i) &lt;span style="color:#666">+&lt;/span> GET_ELEM(i &lt;span style="color:#666">+&lt;/span> blockDim.x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> stride &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>; stride &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x; stride &lt;span style="color:#666">*=&lt;/span> &lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> index &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> stride &lt;span style="color:#666">*&lt;/span> tid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (index &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Issue: bank conflict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> sdata[index] &lt;span style="color:#666">+=&lt;/span> sdata[index &lt;span style="color:#666">+&lt;/span> stride];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (tid &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g_odata[blockIdx.x] &lt;span style="color:#666">=&lt;/span> sdata[&lt;span style="color:#40a070">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach improves the DRAM Throughput to 33.78%, a significant 63.72% increase over the previous method.
The overall throughput reaches 96.51GB/s, demonstrating 37.87% enhancement from the 70GB/s achieved earlier.&lt;/p>
&lt;h3 id="tiled-reduction-with-warp-shuffle">Tiled Reduction with Warp Shuffle&lt;/h3>
&lt;p>Modern GPUs facilitate direct data exchange within a warp, bypassing the need for shared memory.&lt;/p>
&lt;p>The function below demonstrates how to conduct a reduction within a single warp using the warp shuffle instruction, as highlighted in the book &amp;lt;Professional CUDA C Programming&amp;gt;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// using warp shuffle instruction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// From book &amp;lt;Professional CUDA C Programming&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>__inline__ __device__ &lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">warpReduce&lt;/span>(&lt;span style="color:#902000">int&lt;/span> mySum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> __shfl_xor(mySum, &lt;span style="color:#40a070">16&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> __shfl_xor(mySum, &lt;span style="color:#40a070">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> __shfl_xor(mySum, &lt;span style="color:#40a070">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> __shfl_xor(mySum, &lt;span style="color:#40a070">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> __shfl_xor(mySum, &lt;span style="color:#40a070">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Utilizing shared memory to store the sum computed by each warp and subsequently reducing these sums as previously described enables the calculation of a thread block&amp;rsquo;s total sum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">reduce_warp_shlf&lt;/span>(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Helps to share data between warps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// size should be (blockDim.x / warpSize)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> idx &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Necessary to make sure shfl instruction is not used with uninitialized data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#902000">int&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> idx &lt;span style="color:#666">&amp;lt;&lt;/span> n &lt;span style="color:#666">?&lt;/span> g_idata[idx] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> lane &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">%&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> warp &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">/&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (lane &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[warp] &lt;span style="color:#666">=&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// last warp reduce
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> (threadIdx.x &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x &lt;span style="color:#666">/&lt;/span> warpSize) &lt;span style="color:#666">?&lt;/span> sdata[lane] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (warp &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (threadIdx.x &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g_odata[blockIdx.x] &lt;span style="color:#666">=&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Despite reading only a single element per thread, this kernel can achieve a throughput of 96GB/s, outperforming the shared memory version&amp;rsquo;s 70GB/s.
Furthermore, the kernel can be modified to read \(NT\) elements at a time for enhanced efficiency:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span> NT&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> reduce_warp_shlf_read_N(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Helps to share data between warps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// size should be (blockDim.x / warpSize)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> blockSize &lt;span style="color:#666">=&lt;/span> NT &lt;span style="color:#666">*&lt;/span> blockDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> idx &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockSize &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Necessary to make sure shfl instruction is not used with uninitialized data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">#define GET_ELEM(__idx) ((__idx) &amp;lt; n ? g_idata[(__idx)] : 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span> &lt;span style="color:#902000">int&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#pragma unroll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> NT; i&lt;span style="color:#666">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> GET_ELEM(idx &lt;span style="color:#666">+&lt;/span> i &lt;span style="color:#666">*&lt;/span> blockDim.x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> lane &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">%&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> warp &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">/&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (lane &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[warp] &lt;span style="color:#666">=&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// last warp reduce
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> (threadIdx.x &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x &lt;span style="color:#666">/&lt;/span> warpSize) &lt;span style="color:#666">?&lt;/span> sdata[lane] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (warp &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (threadIdx.x &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g_odata[blockIdx.x] &lt;span style="color:#666">=&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Performance varies with different \(N\) values, as summarized below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>NT&lt;/th>
&lt;th>throughput (GB/s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>96.3187&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>96.2341&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>96.8153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>107.226&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="warp-shuffle-combined-with-atomic-operations">Warp Shuffle Combined with Atomic Operations&lt;/h3>
&lt;p>Compared to tiled reduction solutions, utilizing &lt;code>atomicAdd&lt;/code> eliminates the need for a temporary buffer and requires only a single kernel launch.
This segment explores combining warp shuffle and atomic operations for efficient reduction.&lt;/p>
&lt;p>The kernel template below demonstrates this approach, utilizing warp shuffle instructions to enhance the warp reduction performance, and leveraging atomic operations to write directly to the output slot without the need for temporary buffer and multiple kernel launches.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span> NT&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> reduce_warp_shlf_read_N_atomic(&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_idata, &lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> g_odata, &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// Helps to share data between warps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// size should be (blockDim.x / warpSize)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ &lt;span style="color:#902000">int&lt;/span> sdata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> blockSize &lt;span style="color:#666">=&lt;/span> NT &lt;span style="color:#666">*&lt;/span> blockDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#902000">int&lt;/span> idx &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockSize &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Necessary to make sure shfl instruction is not used with uninitialized data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// This only needs one turn of launch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020">#define GET_ELEM(__idx) ((__idx) &amp;lt; n ? g_idata[(__idx)] : 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span> &lt;span style="color:#902000">int&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#pragma unroll
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> NT; i&lt;span style="color:#666">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">+=&lt;/span> GET_ELEM(idx &lt;span style="color:#666">+&lt;/span> i &lt;span style="color:#666">*&lt;/span> blockDim.x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> lane &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">%&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> warp &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">/&lt;/span> warpSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (lane &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdata[warp] &lt;span style="color:#666">=&lt;/span> mySum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// last warp reduce
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> mySum &lt;span style="color:#666">=&lt;/span> (threadIdx.x &lt;span style="color:#666">&amp;lt;&lt;/span> blockDim.x &lt;span style="color:#666">/&lt;/span> warpSize) &lt;span style="color:#666">?&lt;/span> sdata[lane] &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (warp &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mySum &lt;span style="color:#666">=&lt;/span> warpReduce(mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (threadIdx.x &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> atomicAdd(g_odata, mySum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remarkably, this kernel achieves a throughput of 121.777 GB/s under the same conditions.&lt;/p>
&lt;h2 id="benchmark">Benchmark&lt;/h2>
&lt;p>The benchmark results illustrate the performance of different CUDA optimization strategies under varying conditions.&lt;/p>
&lt;figure>&lt;img src="/ox-hugo/2024-04-06_16-47-39_screenshot.png">
&lt;/figure>
&lt;p>Note that the optimal kernel configuration may vary depending on the size of the input data(\(n\)).&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developer.download.nvidia.com/assets/cuda/files/reduction.pdf">Optimizing Parallel Reduction in CUDA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.nvidia.com/blog/faster-parallel-reductions-kepler/">Faster Parallel Reductions on Kepler | NVIDIA Technical Blog&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Count the parameters in LLaMA V1 model</title><link>/posts/count-parameters-in-llama/</link><pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate><guid>/posts/count-parameters-in-llama/</guid><description>&lt;p>Let&amp;rsquo;s load the model&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">transformers&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> LlamaModel, LlamaConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>model &lt;span style="color:#666">=&lt;/span> LlamaModel&lt;span style="color:#666">.&lt;/span>from_pretrained(&lt;span style="color:#4070a0">&amp;#34;llama-7b-hf-path&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">count_params&lt;/span>(model, is_human: &lt;span style="color:#007020">bool&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">False&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> params: &lt;span style="color:#007020">int&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">sum&lt;/span>(p&lt;span style="color:#666">.&lt;/span>numel() &lt;span style="color:#007020;font-weight:bold">for&lt;/span> p &lt;span style="color:#007020;font-weight:bold">in&lt;/span> model&lt;span style="color:#666">.&lt;/span>parameters() &lt;span style="color:#007020;font-weight:bold">if&lt;/span> p&lt;span style="color:#666">.&lt;/span>requires_grad)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>params &lt;span style="color:#666">/&lt;/span> &lt;span style="color:#40a070">1e6&lt;/span>&lt;span style="color:#70a0d0">:&lt;/span>&lt;span style="color:#4070a0">.2f&lt;/span>&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">M&amp;#34;&lt;/span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> is_human &lt;span style="color:#007020;font-weight:bold">else&lt;/span> params
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(model)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Total # of params:&amp;#34;&lt;/span>, count_params(model, is_human&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Print out the layers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>LlamaModel(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (embed_tokens): Embedding(32000, 4096, padding_idx=0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (layers): ModuleList(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (0-31): 32 x LlamaDecoderLayer(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (self_attn): LlamaSdpaAttention(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (q_proj): Linear(in_features=4096, out_features=4096, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (k_proj): Linear(in_features=4096, out_features=4096, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (v_proj): Linear(in_features=4096, out_features=4096, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (o_proj): Linear(in_features=4096, out_features=4096, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (rotary_emb): LlamaRotaryEmbedding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (mlp): LlamaMLP(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (gate_proj): Linear(in_features=4096, out_features=11008, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (up_proj): Linear(in_features=4096, out_features=11008, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (down_proj): Linear(in_features=11008, out_features=4096, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (act_fn): SiLU()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (input_layernorm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (post_attention_layernorm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (norm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total # of params: 6607.34M
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Transformers shows that there are 6607.34M float16 parameters, roughly 13GB, that is aligned to the actual weight size.&lt;/p>
&lt;h2 id="the-basic-setting-of-the-7b-model">The basic setting of the 7B model&lt;/h2>
&lt;ul>
&lt;li>model dimension \(d_{model}=4096\)&lt;/li>
&lt;li>number of heads \(n_{head}=32\)&lt;/li>
&lt;li>head size \(d_{head} = \frac{d_{model}}{n_{head}}\)&lt;/li>
&lt;li>dimension of the feed-forward network&amp;rsquo;s inner layer \(d_{ff}=11008\)&lt;/li>
&lt;li>number of tokens \(n_{token}=32000\)&lt;/li>
&lt;li>number of transformer layers \(n_{layer}=32\)&lt;/li>
&lt;/ul>
&lt;h2 id="layer-by-layer-parameter-count">Layer-by-Layer Parameter Count&lt;/h2>
&lt;h3 id="embedding-layer">Embedding layer&lt;/h3>
&lt;p>For vocabulary embedding, \(n_{token}\times d_{model}=131.072M\), while for position embedding, since RoPE doesn&amp;rsquo;t need a separate embedding, so that is 0.&lt;/p>
&lt;h3 id="transformer-layers">Transformer layers&lt;/h3>
&lt;h4 id="input-layernorm-and-post-attention-layernorm">&lt;code>input_layernorm&lt;/code> and &lt;code>post_attention_layernorm&lt;/code>&lt;/h4>
&lt;p>Both are RMSNorm whose parameters are \(d_{model}\), so both sum to \(2\times d_{model}=8M\)&lt;/p>
&lt;h4 id="multi-head-self-attention">multi-head self-attention&lt;/h4>
&lt;p>For Q,K,V and O, each is a Linear layer of size \(d_{model} \times d_{model}\), so in total, there are \(4\times d_{model}^2=67.1M\).&lt;/p>
&lt;p>There is one tiny issue here, why a linear layer could generate Q, while in the original transformer paper, each head is calculated separately, for example, \(Q_i=QW^Q_i\) where \(i\) is the head id. That is because, if we concatenate all all the heads, that is identical to a linear of \(d_{model} \times (n_{head} \times d_{head})\), that is \(d_{model} \times d_{model}\) in llama v1.&lt;/p>
&lt;p>The self-attention doesn&amp;rsquo;t have extra parameters since they simply applies the following formula&lt;/p>
&lt;p>\[
Attention(Q,K,V) = softmax(\frac{QK^T}{\sqrt{d_k}})V
\]&lt;/p>
&lt;h4 id="mlp">mlp&lt;/h4>
&lt;p>The LlamaMLP layer contains three separate Linear layers:&lt;/p>
&lt;ol>
&lt;li>&lt;code>gate_proj&lt;/code>: \(d_{model} \times d_{ff}\)&lt;/li>
&lt;li>&lt;code>up_proj&lt;/code>: \(d_{model} \times d_{ff}\)&lt;/li>
&lt;li>&lt;code>down_proj&lt;/code>: \(d_{ff} \times d_{model}\)&lt;/li>
&lt;/ol>
&lt;p>So in total, they have \(3\times d_{model} \times d_{ff} = 135.27M\) parameters.&lt;/p>
&lt;h2 id="total-count-of-parameters">Total count of parameters&lt;/h2>
&lt;p>The overall parameters are composed of two major parts, the vocabulary embedding, and the transformer layers, that is &lt;code>embed + 32 * (mha + mlp + norm)&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>\(embed=n_{token}\times d_{model}=131.07M\)&lt;/li>
&lt;li>\(mha=4* d_{model}^2=67.1M\)&lt;/li>
&lt;li>\(mlp=3* d_{model}\times d_{ff}=135.27M\)&lt;/li>
&lt;li>\(norm=2*d_{model}=8.19M\)&lt;/li>
&lt;/ul>
&lt;p>And the count of the parameters is 6607.3M, which is aligned to the number from Transformers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">count_llama_params&lt;/span>(d_model, d_ff, n_tokens, n_layers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embed &lt;span style="color:#666">=&lt;/span> n_tokens &lt;span style="color:#666">*&lt;/span> d_model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mha &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">4&lt;/span> &lt;span style="color:#666">*&lt;/span> d_model&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mlp &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="color:#666">*&lt;/span> d_moel &lt;span style="color:#666">*&lt;/span> d_ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> norm &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">2&lt;/span> &lt;span style="color:#666">*&lt;/span> d_model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> embed &lt;span style="color:#666">+&lt;/span> n_layers &lt;span style="color:#666">*&lt;/span> (mha &lt;span style="color:#666">+&lt;/span> mlp &lt;span style="color:#666">+&lt;/span> norm)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, the Llama 65B model&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>LlamaModel(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (embed_tokens): Embedding(32000, 8192, padding_idx=0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (layers): ModuleList(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (0-79): 80 x LlamaDecoderLayer(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (self_attn): LlamaSdpaAttention(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (q_proj): Linear(in_features=8192, out_features=8192, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (k_proj): Linear(in_features=8192, out_features=8192, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (v_proj): Linear(in_features=8192, out_features=8192, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (o_proj): Linear(in_features=8192, out_features=8192, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (rotary_emb): LlamaRotaryEmbedding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (mlp): LlamaMLP(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (gate_proj): Linear(in_features=8192, out_features=22016, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (up_proj): Linear(in_features=8192, out_features=22016, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (down_proj): Linear(in_features=22016, out_features=8192, bias=False)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (act_fn): SiLU()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (input_layernorm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (post_attention_layernorm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (norm): LlamaRMSNorm()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total # of params: 65023.52M
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And let&amp;rsquo;s use the function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>count_llama_params(d_model&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">8192&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d_ff&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">22016&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n_tokens&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">32000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n_layers&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">80&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It gives 65023.5M, is is roughly aligned.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://michaelwornow.net/2024/01/18/counting-params-in-transformer">Transformer Math (Part 1) - Counting Model Parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/huggingface/transformers/blob/main/src/transformers/models/llama/modeling_llama.py">modeling_llama.py from huggingface transformers&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Get GPU Properties</title><link>/posts/gpu-get-props/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>/posts/gpu-get-props/</guid><description>&lt;p>In `cuda_runtime.h`, there are several APIs for retrieving properties for the installed GPU.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gb22e8256592b836df9a9cc36c9db7151">cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device)&lt;/a>: a C api&lt;/li>
&lt;li>&lt;a href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g1bf9d625a931d657e08db2b4391170f0">cudaGetDeviceProperties ( cudaDeviceProp* prop, int device ) &lt;/a>: a C++ api&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/Superjomn/cuda-from-scratch/blob/dev/dump-gpu-props.cpp">Here&lt;/a> is the code of the example.&lt;/p>
&lt;p>On a Nvidia GTX 3080 GPU, the properties are as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Device 0 properties:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Max block dimensions: 1024 x 1024 x 64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Max grid dimensions: 2147483647 x 65535 x 65535
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Shared memory bank size: 4 bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Max shared memory per block: 49152 bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Max registers per block: 65536
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Warp size: 32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Multiprocessor count: 68
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Max resident threads per multiprocessor: 1536 = 48 warps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> L2 cache size: 5242880 bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Global L1 cache supported: yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Total global memory: 9 GB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Processor clock: 1 MHZ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Memory clock: 9 MHZ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Notes on LLM technologies (keep updating)</title><link>/posts/llm_notes/</link><pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate><guid>/posts/llm_notes/</guid><description>&lt;p>Brief notes on LLM technologies.&lt;/p>
&lt;h2 id="models">Models&lt;/h2>
&lt;h3 id="gpt2">GPT2&lt;/h3>
&lt;h4 id="model-structure">Model structure&lt;/h4>
&lt;figure>&lt;img src="/ox-hugo/GPT%20model%20structure.png">
&lt;/figure>
&lt;p>The GPT model employs a repeated structure of Transformer Blocks, each containing two sub-layers: a Masked Multi-Head Attention (MMHA) layer and a Position-wise Feed-Forward Network.&lt;/p>
&lt;p>The MMHA is a central component of the model. It operates by splitting the input into multiple &amp;lsquo;heads&amp;rsquo;, each of which learns to attend to different positions within the input sequence, allowing the model to focus on different aspects of the input simultaneously. The output of these heads is then concatenated and linearly transformed to produce the final output.&lt;/p>
&lt;p>The MMHA mechanism can be formally defined as follows:&lt;/p>
&lt;p>\[
MultiHead(Q,K,V) = Concat(head_1, \cdots, head_h)W^O
\]&lt;/p>
&lt;p>where each head is computed as:&lt;/p>
&lt;p>\[
head_i = Attention(QW_i^Q, KW_i^K, VW_i^V)
\]&lt;/p>
&lt;p>In implementation, the computation of \(Q,K,V\) can be packed together with Linear operations regardless of the number of heads, like&lt;/p>
&lt;figure>&lt;img src="/ox-hugo/qkv.png">
&lt;/figure>
&lt;p>And the computation is as below&lt;/p>
&lt;p>\begin{split}
Q &amp;amp;= xW^Q \\
K &amp;amp;= xW^K \\
V &amp;amp;= xW^V
\end{split}&lt;/p>
&lt;p>The Attention function is defined as:&lt;/p>
&lt;p>\[
Attention(q_i, k_i, v_i) = softmax(\frac{q_i k_i^T}{\sqrt{d_k}})v_i
\]&lt;/p>
&lt;p>Here, \(d_k\) represents the dimension of the keys, which is calculated as \(d_k = \frac{H}{h}\), where \(H\) is the total dimension of the input and \(h\) is the number of heads.&lt;/p>
&lt;p>To ensure the MHA mechanism works correctly with sequences of varying lengths, a Mask is applied. This Mask effectively ignores padding elements by setting their values to \(-\infty\), allowing the Softmax function to handle them appropriately.
The layer output demensions are as below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Layer&lt;/th>
&lt;th>Dimensions&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Model input&lt;/td>
&lt;td>&lt;code>[bs, seq_len]&lt;/code>&lt;/td>
&lt;td>Token IDs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Text &amp;amp; PosEmbed&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H]&lt;/code>&lt;/td>
&lt;td>Text embeddings + position embeddings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Layer Norm (0)&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Feed Forward&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Layer Norm (1)&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\(head_i\)&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H/h]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MMHA&lt;/td>
&lt;td>&lt;code>[bs, seq_len, H]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Where&lt;/p>
&lt;ul>
&lt;li>&lt;code>bs&lt;/code> is the batch size&lt;/li>
&lt;li>&lt;code>seq_len&lt;/code> is the max length of the sequence&lt;/li>
&lt;li>&lt;code>H&lt;/code> is the size of the hidden state&lt;/li>
&lt;li>&lt;code>h&lt;/code> is the number of heads&lt;/li>
&lt;/ul>
&lt;h3 id="reference">Reference&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/2211.17192">Leviathan, Yaniv, Matan Kalman, and Yossi Matias. &amp;ldquo;Fast inference from transformers via speculative decoding.&amp;rdquo; International Conference on Machine Learning. PMLR, 2023.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/docs/stable/generated/torch.nn.MultiheadAttention.html">Multi-head attention in Pytorch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="lora">Lora&lt;/h2>
&lt;h3 id="algorithm">Algorithm&lt;/h3>
&lt;p>&lt;img src="/ox-hugo/2024-03-17_15-41-23_screenshot.png" alt="">
&lt;em>(image borrowed from &lt;a href="https://magazine.sebastianraschka.com/p/practical-tips-for-finetuning-llms">this page&lt;/a>)&lt;/em>&lt;/p>
&lt;p>A classical workflow to finetune an LLM is to learn an additional parameters denoted as \(\delta W\) as long as frooze the original parameters, just as the left part of the figure below.&lt;/p>
&lt;p>\[
h = W_0 x \Rightarrow (W_0 + \delta W) x
\]&lt;/p>
&lt;p>This could be applied on the \(W_q, W_k, W_v\) and \(W_o\) in the Transformer block, while since the Transformer blocks contains the mojority of the parameters, that workflow could result in significant increase of additional parameters.&lt;/p>
&lt;p>For instance, a Llama V1 7B model, whose hidden size is 4096, and the dimension of the MLP&amp;rsquo;s inner layer is 11008, let&amp;rsquo;s zoom into a Transformer layer, the \(W_q, W_k, W_v, W_o\), each contains \(4096 \times 4096 = 4096 \times 128=16.78M\) parameters, and the MLP contains three Linear layer of \(135.27M\) parameters, and two RMSNorm layers each contains \(4096=4M\) parameters. In total, a single Transformer layer contains \(16.78M \times 4 + 135.27M + 4M\times 2=210.29M\). You can refer to &lt;a href="https://superjomn.github.io/posts/count-parameters-in-llama/">Superjomn&amp;rsquo;s blog | Count the parameters in LLaMA V1 model&lt;/a> for details about counting the parameters.&lt;/p>
&lt;p>The LoRA is for such scenarios, instead of learning the \(\delta W\) itself, it learns decomposed representation of \(\delta W\) directly during finetune training. Since the rank could be \(8\), that could reduce the number of trainable parameters required for adaptation to downstream tasks. Let&amp;rsquo;s revisit the Llama V1 7B example, if we apply LoRA on all the Linear layers within a Transformer layer:&lt;/p>
&lt;ul>
&lt;li>\(W_q, W_k, W_v, W_o\) each will take \(4096*8 + 8*4096=0.065M\) parameters&lt;/li>
&lt;li>MLP have \(3 \times (4096 \times 8 + 8 \times 11008)=0.362M\)&lt;/li>
&lt;/ul>
&lt;p>So in total, the LoRA will bring \(0.362+0.065*4=0.622\) additional parameters, that is only \(\frac{0.622}{210.29}=0.29\%\) of the original parameters.&lt;/p>
&lt;p>So instead of fully-finetune all the original paramters, the LoRA could finetune the LLaMA 7B model with less than 1% parameters, that is quite efficient.&lt;/p>
&lt;h3 id="reference">Reference&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://magazine.sebastianraschka.com/p/practical-tips-for-finetuning-llms">Practical Tips for Finetuning LLMs Using LoRA (Low-Rank Adaptation)&lt;/a>&lt;/li>
&lt;li>Hu, Edward J., et al. &amp;ldquo;Lora: Low-rank adaptation of large language models.&amp;rdquo; arXiv preprint arXiv:2106.09685 (2021).&lt;/li>
&lt;/ul>
&lt;h2 id="speculative-decoding">Speculative decoding&lt;/h2>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Consider a scenerio where we have a prefix such as &amp;ldquo;Geoffrey Hinton did his PhD at the University&amp;rdquo;, and the target suffix is &amp;ldquo;of Edinburgh&amp;rdquo;. When a LLM continues the generation, it is evident that:&lt;/p>
&lt;ol>
&lt;li>The word &amp;ldquo;of&amp;rdquo; is simple to generate and could be produced by a smaller model given the same prefix&lt;/li>
&lt;li>The word &amp;ldquo;Edinburgh&amp;rdquo; is more challenging to generate and may require a larger model with more knowledge&lt;/li>
&lt;/ol>
&lt;p>Speculative decoding addresses this by using a smaller model to generate &amp;ldquo;easy&amp;rdquo; words like &amp;ldquo;of&amp;rdquo; for better throughput, while leaving more challenging words to a larger model for precision.&lt;/p>
&lt;h3 id="algorithm">Algorithm&lt;/h3>
&lt;p>Speculative decoding employs two models:&lt;/p>
&lt;ol>
&lt;li>A draft model, denoted as \(M_p\), which is smaller and much faster (as least 2X) to give a sub-sequence of the next K tokens.&lt;/li>
&lt;li>A target model, denoted as \(M_q\), which is larger and more precise. It evaluates the sub-sequence generated by the draft model.&lt;/li>
&lt;/ol>
&lt;p>Assuming K to be 4, the prefix to be \(pf\), and the draft model generates five tokens based on \(pf\):&lt;/p>
&lt;ol>
&lt;li>Token \(x_1\), the probability is \(p_1(x) = M_p(pf)\)&lt;/li>
&lt;li>Token \(x_2\) with probability of \(p_2(x) = M_p(pf, x_1)\)&lt;/li>
&lt;li>Token \(x_3\) with probability of \(p_3(x) = M_p(pf, x_1, x_2)\)&lt;/li>
&lt;li>Token \(x_4\) with probability of \(p_4(x) = M_p(pf, x_1, x_2, x_3)\)&lt;/li>
&lt;/ol>
&lt;p>The target model evalutes K tokens generated by \(M_p\) with a single model forward pass, similar to the training phase:&lt;/p>
&lt;p>\[
q_1(x), q_2(x), q_3(x), q_4(x) = M_q(pf, x_1, x_2, x_3, x_4)
\]&lt;/p>
&lt;p>Let&amp;rsquo;s consider a real example to illustrate the heuristics. Suppose the draft model generate the following sub-sequence with \(K=4\):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Token&lt;/th>
&lt;th>x1&lt;/th>
&lt;th>x2&lt;/th>
&lt;th>x3&lt;/th>
&lt;th>x4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>dogs&lt;/td>
&lt;td>love&lt;/td>
&lt;td>chasing&lt;/td>
&lt;td>after&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p(x)&lt;/td>
&lt;td>0.8&lt;/td>
&lt;td>0.7&lt;/td>
&lt;td>0.9&lt;/td>
&lt;td>0.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q(x)&lt;/td>
&lt;td>0.9&lt;/td>
&lt;td>0.8&lt;/td>
&lt;td>0.8&lt;/td>
&lt;td>0.3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q(x)&amp;gt;=p(x)?&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>N&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>accept prob&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0.8/0.9&lt;/td>
&lt;td>0.3/0.8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The rules is as below:&lt;/p>
&lt;ol>
&lt;li>If \(q(x) &amp;gt;= p(x)\), then accept the token.&lt;/li>
&lt;li>If not, the accept probability is \(\frac{q(x)}{p(x)}\), so the token &amp;ldquo;chasing&amp;rdquo; has a probability of \(\frac{0.8}{0.9}=89\%\), while the next token &amp;ldquo;after&amp;rdquo; has an accept probability of only \(\frac{0.3}{0.8}=37.5\%\).&lt;/li>
&lt;li>If a word is unaccepted, the candidate word after it will be dropped as well. It will be resampled by target model, not the draft model.&lt;/li>
&lt;li>Repeat the steps above from the next position&lt;/li>
&lt;/ol>
&lt;h3 id="reference">Reference&lt;/h3>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=S-8yr_RibJ4">Speculative Decoding: When Two LLMs are Faster than One - YouTube&lt;/a>&lt;/p></description></item><item><title>Memory coalescing in CUDA (2) – Matrix Transpose</title><link>/posts/cuda-memory-coalescing-access-matrix-transpose/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate><guid>/posts/cuda-memory-coalescing-access-matrix-transpose/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>In the &lt;a href="https://superjomn.github.io/posts/cuda-memory-coalescing-access/">VecAdd&lt;/a> page, we&amp;rsquo;ve introduced the memory coalescing in global memory access. This post will follow the topic with another interesting application: Matrix transposing.&lt;/p>
&lt;p>The following content will briefly touch on the following topics:&lt;/p>
&lt;ul>
&lt;li>Tiles in matrix, this is the basis of optimization matrix computation&lt;/li>
&lt;li>A simple trick to avoid bank conflict in shared memory access&lt;/li>
&lt;/ul>
&lt;h2 id="kernels">Kernels&lt;/h2>
&lt;p>The code for all the kernels locates in &lt;a href="https://github.com/Superjomn/cuda-from-scratch/blob/dev/1-matrix-transpose-coalesce.cu">1-matrix-transpose-coalesce.cu&lt;/a>.&lt;/p>
&lt;h3 id="read-coalesced">Read coalesced&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> transpose_read_coalesce(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ input,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x; &lt;span style="color:#60a0b0;font-style:italic">// the contiguous tid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#902000">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output[i &lt;span style="color:#666">*&lt;/span> m &lt;span style="color:#666">+&lt;/span> j] &lt;span style="color:#666">=&lt;/span> input[j &lt;span style="color:#666">*&lt;/span> n &lt;span style="color:#666">+&lt;/span> i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="write-coalesced">Write coalesced&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> transpose_write_coalesce(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ input,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x; &lt;span style="color:#60a0b0;font-style:italic">// the contiguous tid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#902000">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output[j &lt;span style="color:#666">*&lt;/span> n &lt;span style="color:#666">+&lt;/span> i] &lt;span style="color:#666">=&lt;/span> input[i &lt;span style="color:#666">*&lt;/span> m &lt;span style="color:#666">+&lt;/span> j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="both-read-and-write-coalesced-by-tiling-with-shared-memory">Both read and write coalesced by tiling with shared memory&lt;/h3>
&lt;p>The tiling method is a common methodology for optimizing matrix operation. It divides the matrix into smaller, manageable blocks or &amp;ldquo;tiles&amp;rdquo; that can fit into shared memory.&lt;/p>
&lt;p>Let&amp;rsquo;s divide the matrix into tiles of size \(TILE \times TILE\), and the overall transpose could be decoupled into two sub-levels:&lt;/p>
&lt;ol>
&lt;li>the inter-tile transpose, that is move the tile to the target position; and secondly,&lt;/li>
&lt;li>the intra-tile transpose, that is transpose the elements within a single tile&lt;/li>
&lt;/ol>
&lt;h4 id="inter-tile-transpose">Inter-tile transpose&lt;/h4>
&lt;figure>&lt;img src="/ox-hugo/inter-tile.png">
&lt;/figure>
&lt;p>Each tile is processed by a thread block, so the tile coordinate is &lt;code>(blockIdx.y, blockIdx.x)&lt;/code>, and the target coord is &lt;code>(blockIdx.x, blockIdx.y)&lt;/code>.&lt;/p>
&lt;p>We can continue to process the elements within each tile.&lt;/p>
&lt;h4 id="intra-tile-transpose">Intra-tile transpose&lt;/h4>
&lt;figure>&lt;img src="/ox-hugo/intra-tile.png">
&lt;/figure>
&lt;p>Within a tile, we will read the elements, store the transposed version in the shared memory, and then store the tile in global memory, with the coord determined by the intra-tile transpose phase.&lt;/p>
&lt;p>There are two copies:&lt;/p>
&lt;ol>
&lt;li>Copying the tile from the input matrix and storing a transposed version into shared memory&lt;/li>
&lt;li>Copying the tile from shared memory into the output matrix in global memory&lt;/li>
&lt;/ol>
&lt;p>Only one side is in global memory in both copies, so it can perform a memory coalescing access pattern. Both copies are performed by all the threads collectively within a thread block.&lt;/p>
&lt;p>To make a coalesced memory access, in the first copy, a thread reads element of coord of &lt;code>(threadIdx.y, threadIdx.x)&lt;/code>, and the memory offset &lt;code>threadIdx.y * M + threadIdx.x&lt;/code> is contignuous for adjacent threads.
In the second copy, the thread block needs to copy a tile to global memory, similarly, a thread should process the element of &lt;code>(threadIdx.y, threadIdx.x)&lt;/code> in the output tile.&lt;/p>
&lt;h4 id="kernel-with-constant-tile-size">Kernel with constant tile size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T, &lt;span style="color:#902000">int&lt;/span> TILE&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> transpose_tiled_coalesce0(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ input,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(blockDim.x &lt;span style="color:#666">==&lt;/span> blockDim.y &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> blockDim.x &lt;span style="color:#666">==&lt;/span> TILE_DIM);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// TILE + 1 to avoid bank conflict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// By padding the shared memory array with an extra element, the consecutive threads access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> &lt;span style="color:#60a0b0;font-style:italic">// memory locations that fall into different banks to avoid bank conflict
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> __shared__ T tile[TILE][TILE &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> m &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tile[threadIdx.x][threadIdx.y] &lt;span style="color:#666">=&lt;/span> input[i &lt;span style="color:#666">*&lt;/span> n &lt;span style="color:#666">+&lt;/span> j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output[i &lt;span style="color:#666">*&lt;/span> m &lt;span style="color:#666">+&lt;/span> j] &lt;span style="color:#666">=&lt;/span> tile[threadIdx.y][threadIdx.x];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that, since each thread processes only one element, so both &lt;code>blockDim.x&lt;/code> and &lt;code>blockDim.y&lt;/code> should equal to &lt;code>TILE&lt;/code>, and &lt;code>TILE&lt;/code> is a constant value.&lt;/p>
&lt;h4 id="kernel-with-dynamic-tile-size">Kernel with dynamic tile size&lt;/h4>
&lt;p>It is possible to allocate the shared memory dynamically, making the &lt;code>TILE&lt;/code> a variable that could be assigned with &lt;code>blockDim.x&lt;/code> or &lt;code>blockDim.y&lt;/code> on the fly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> transpose_tiled_coalesce1(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ input,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ output,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> size_t TILE &lt;span style="color:#666">=&lt;/span> blockDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(blockDim.x &lt;span style="color:#666">==&lt;/span> blockDim.y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">extern&lt;/span> __shared__ T tile[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> m &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tile[threadIdx.x &lt;span style="color:#666">*&lt;/span> (TILE &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> threadIdx.y] &lt;span style="color:#666">=&lt;/span> input[i &lt;span style="color:#666">*&lt;/span> n &lt;span style="color:#666">+&lt;/span> j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __syncthreads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#666">=&lt;/span> blockIdx.y &lt;span style="color:#666">*&lt;/span> blockDim.y &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#666">&amp;lt;&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output[i &lt;span style="color:#666">*&lt;/span> m &lt;span style="color:#666">+&lt;/span> j] &lt;span style="color:#666">=&lt;/span> tile[threadIdx.y &lt;span style="color:#666">*&lt;/span> (TILE &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> threadIdx.x];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="performance">Performance&lt;/h2>
&lt;p>In NVIDIA GTX 3080, these kernels have a pretty close performance:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Kernel&lt;/th>
&lt;th>Latency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Read coalesced&lt;/td>
&lt;td>0.0476&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Write coalesced&lt;/td>
&lt;td>0.0474&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tiled&lt;/td>
&lt;td>0.0478&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://leimao.github.io/blog/CUDA-Coalesced-Memory-Access/">CUDA Coalesced Memory Access - blog of Lei Mao&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Memory coalescing in CUDA (1) – VecAdd</title><link>/posts/cuda-memory-coalescing-access/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>/posts/cuda-memory-coalescing-access/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>&lt;strong>Memory coalescing&lt;/strong> is a crucial optimization technique in CUDA programming that allows optimal usage of the &lt;strong>global memory bandwidth&lt;/strong>. When threads in the same warp running the same instruction access to &lt;strong>consecutive locations&lt;/strong> in the global memory, the hardware can coalesce these accesses into a single transaction, significantly improving performance.&lt;/p>
&lt;p>Coalescing memory access is vital for achieving high performance. Besides PCIe memory traffic, accessing global memory tends to be the largest bottleneck in GPU&amp;rsquo;s memory hierarchy.
Non-coalesced memory access can lead to underutilization of memory bandwidth.&lt;/p>
&lt;p>In the following post, we will delve deeper into memory coalescing with CUDA code for the classical vector adding.&lt;/p>
&lt;h2 id="vecadd">VecAdd&lt;/h2>
&lt;p>There are three kernels in below. The complete code locates &lt;a href="https://github.com/Superjomn/cuda-from-scratch/blob/dev/0-vecadd-memory-coalesce.cu">here&lt;/a>.&lt;/p>
&lt;h3 id="naive-vecadd-kernel-with-memory-coalescing-enabled">Naive VecAdd kernel with memory coalescing enabled&lt;/h3>
&lt;p>The first program is simple but follows the coalescing memory access pattern:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>tid&lt;/th>
&lt;th>element&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The thread 0,1,2,3 visits elements 0,1,2,3, which is contiguous, and results in a coalescing memory accessing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> add_coalesced0(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x &lt;span style="color:#666">+&lt;/span> threadIdx.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (i &lt;span style="color:#666">&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c[i] &lt;span style="color:#666">=&lt;/span> a[i] &lt;span style="color:#666">+&lt;/span> b[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The only issue is that, the number of the elements should be no larger than the number of threads, so the launching parameters of the kernel should be carefully designed.&lt;/p>
&lt;h3 id="optimized-one-strided-with-less-threads">Optimized one: strided with less threads&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> add_coalesced1(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> N) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> tid &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">+&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> num_threads &lt;span style="color:#666">=&lt;/span> blockDim.x &lt;span style="color:#666">*&lt;/span> gridDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">while&lt;/span> (tid &lt;span style="color:#666">&amp;lt;&lt;/span> N) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c[tid] &lt;span style="color:#666">=&lt;/span> a[tid] &lt;span style="color:#666">+&lt;/span> b[tid];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tid &lt;span style="color:#666">+=&lt;/span> num_threads;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This one simplifies the calculation of the launch thread number, it should fit any number of elements with a arbitrary number of threads.&lt;/p>
&lt;h3 id="uncoalesced-memory-accessing-one">Uncoalesced memory accessing one&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#007020;font-weight:bold">typename&lt;/span> T&lt;span style="color:#666">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__global__ &lt;span style="color:#902000">void&lt;/span> add_uncoalesced(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">const&lt;/span> T&lt;span style="color:#666">*&lt;/span> __restrict__ b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#666">*&lt;/span> __restrict__ c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> tid &lt;span style="color:#666">=&lt;/span> threadIdx.x &lt;span style="color:#666">+&lt;/span> blockIdx.x &lt;span style="color:#666">*&lt;/span> blockDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> num_threads &lt;span style="color:#666">=&lt;/span> blockDim.x &lt;span style="color:#666">*&lt;/span> gridDim.x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> num_tasks &lt;span style="color:#666">=&lt;/span> nvceil(n, num_threads);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> num_tasks; &lt;span style="color:#666">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> idx &lt;span style="color:#666">=&lt;/span> tid &lt;span style="color:#666">*&lt;/span> num_tasks &lt;span style="color:#666">+&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> (idx &lt;span style="color:#666">&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c[idx] &lt;span style="color:#666">=&lt;/span> a[idx] &lt;span style="color:#666">+&lt;/span> b[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This one doesn&amp;rsquo;t follow the coalescing access pattern, lets assume that we have 4 threads with 8 elements, then the `num_tasks=2`&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>tid&lt;/th>
&lt;th>0-th element&lt;/th>
&lt;th>1-st element&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>6&lt;/td>
&lt;td>7&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In the first step of the for-loop, these four threads visit 0,2,4,6 elements, which is not contiguous, this results in an uncoalesced memory accessing.&lt;/p>
&lt;h2 id="performance">Performance&lt;/h2>
&lt;p>All the kernels are tested with double data type, and the block size is 256, for the last kernels, each thread are setted to consume 8 elements.
The performance is tested on GTX 3090, with the clocks locked as below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>GPU clocks&lt;/th>
&lt;th>Memory clocks&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2100 MHZ&lt;/td>
&lt;td>9501MHZ&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The latency of each kernel:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>kernel&lt;/th>
&lt;th>latency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>coalesced0&lt;/td>
&lt;td>0.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>coalesced1&lt;/td>
&lt;td>0.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>uncoalesced&lt;/td>
&lt;td>0.14&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The uncoalesced kernel is 3x slower than the two coalesced kernel.&lt;/p>
&lt;p>The Nsight also report the Uncoalescing Global Accesses in the uncoalesced kernel:&lt;/p>
&lt;figure>&lt;img src="/ox-hugo/2024-02-28_19-37-47_screenshot.png">
&lt;/figure>
&lt;p>It reports that 75% of the sectors are excessive, IIUC, since only 8 bytes(a double) out each 32 byte transition is valid, so the overall efficiency is \(\frac{8}{32}=25\%\) .&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Professional CUDA C Programming&lt;/li>
&lt;/ul></description></item><item><title>LLVM Utilities (keep updating)</title><link>/posts/llvm-utils/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>/posts/llvm-utils/</guid><description>&lt;p>There are many handy functions or data structures in LLVM project, which are widely used by other projects that rely on LLVM. In this page, I will introduce some common utilities that are worthy of using in your own project or frequently used in LLVM code that you should be familiar with.&lt;/p>
&lt;h2 id="basic-data-type">Basic data type&lt;/h2>
&lt;h3 id="llvm-stringref">llvm::StringRef&lt;/h3>
&lt;p>It is a lightweight, non-owning reference to a sequence of characters.
It is similar to &lt;code>std::string_view&lt;/code> introduced in &lt;code>C++17&lt;/code>.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from a C-string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">const&lt;/span> &lt;span style="color:#902000">char&lt;/span>&lt;span style="color:#666">*&lt;/span> cStr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef(cStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from a C++-string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>std&lt;span style="color:#666">::&lt;/span>string cppStr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef1(cppStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// from pointer and length
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>llvm&lt;span style="color:#666">::&lt;/span>StringRef strRef2(cppStr.c_str(), cppStr.size());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-arrayref">llvm::ArrayRef&lt;/h3>
&lt;p>It is a lightweight, non-owning reference to an array of elements. It is similar to &lt;code>std::span&lt;/code> introduced in C++20.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> myArray[] &lt;span style="color:#666">=&lt;/span> {&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>ArrayRef&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> arrayRef(myArray, &lt;span style="color:#40a070">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-twine">llvm::Twine&lt;/h3>
&lt;p>&lt;code>llvm::Twine&lt;/code> is a class used to efficiently concatenate strings in both memory and performance.&lt;/p>
&lt;p>To concate two strings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine1(&lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine2(&lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> twine1 &lt;span style="color:#666">+&lt;/span> twine2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To concate string with other elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine twine1(&lt;span style="color:#4070a0">&amp;#34;The answer is &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> value &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> twine1 &lt;span style="color:#666">+&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>Twine(value);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is possible to concate multiple elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>Twine result &lt;span style="color:#666">=&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>Twine(&lt;span style="color:#4070a0">&amp;#34;Hello, &amp;#34;&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#4070a0">&amp;#34;world!&amp;#34;&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">42&lt;/span> &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#40a070">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, the first &amp;ldquo;Hello&amp;rdquo; is a &lt;code>Twine&lt;/code> instance, and all the following &amp;ldquo;+&amp;rdquo; will use &lt;code>Twine&lt;/code>&amp;rsquo;s &lt;code>operator+&lt;/code> and get new &lt;code>Twine&lt;/code> instances, so it is able to concate any number of elements in the real usages.&lt;/p>
&lt;h3 id="llvm-nullableptr">llvm::NullablePtr&lt;/h3>
&lt;p>It is used to represent a pointer that can be either a valid pointer or null.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>NullablePtr&lt;span style="color:#666">&amp;lt;&lt;/span>MyType&lt;span style="color:#666">&amp;gt;&lt;/span> ptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ptr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> MyType();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// or ptr = nullptr;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">if&lt;/span> (ptr.isNull()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>} &lt;span style="color:#007020;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">delete&lt;/span> ptr.get(); &lt;span style="color:#60a0b0;font-style:italic">// get the underlying pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="container">Container&lt;/h2>
&lt;h3 id="llvm-densemap">llvm::DenseMap&lt;/h3>
&lt;p>&lt;code>llvm::DenseMap&lt;/code> has higher performance than &lt;code>std::unordered_map&lt;/code> and a similar usage.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>DenseMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>, &lt;span style="color:#902000">float&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> map;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map[&lt;span style="color:#40a070">20&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">20.f&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.insert(std&lt;span style="color:#666">::&lt;/span>make_pair(&lt;span style="color:#40a070">20&lt;/span>, &lt;span style="color:#40a070">20.f&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-densemapinfo">llvm::DenseMapInfo&lt;/h3>
&lt;p>&lt;code>llvm::DenseMapInfo&lt;/code> is a utility class that provides information and hashing for custom types used as keys in &lt;code>llvm::DenseMap&lt;/code>. To use it, you should define your custom type with the following methods provided:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static KeyTy getEmptyKey()&lt;/code>: This function should return a unique value representing an &amp;ldquo;empty&amp;rdquo; or &amp;ldquo;deleted&amp;rdquo; key in your custom type&lt;/li>
&lt;li>&lt;code>static KeyTy getTombstoneKey()&lt;/code>: It should return a unique value representing a &amp;ldquo;tombstone&amp;rdquo; key, which is used when a key is removed.&lt;/li>
&lt;li>&lt;code>static unique getHashValue(const KeyTy&amp;amp; key)&lt;/code>: This function returns the hash value of a given key.&lt;/li>
&lt;li>&lt;code>static bool isEqual(const KeyTy&amp;amp; a, const KeyTy &amp;amp;b)&lt;/code>: This function compares two keys and returns true if they are equal, or false if they are not.&lt;/li>
&lt;/ul>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">struct&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyKeyType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#902000">int&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getEmptyKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType{&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getTombstoneKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType{&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">2&lt;/span>}; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#06287e">getHashValue&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>key) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> llvm&lt;span style="color:#666">::&lt;/span>hash_value(key.value); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">bool&lt;/span> &lt;span style="color:#06287e">isEqual&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>a, &lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>b) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> a.value &lt;span style="color:#666">==&lt;/span> b.value; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this, you should specialize the &lt;code>llvm::DenseMapInfo&lt;/code> template for your custom type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">namespace&lt;/span> llvm {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">template&lt;/span> &lt;span style="color:#666">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">struct&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">DenseMapInfo&lt;/span>&lt;span style="color:#666">&amp;lt;&lt;/span>MyKeyType&lt;span style="color:#666">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getEmptyKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getEmptyKey(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> MyKeyType &lt;span style="color:#06287e">getTombstoneKey&lt;/span>() { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getTombstoneKey(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">unsigned&lt;/span> &lt;span style="color:#06287e">getHashValue&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>key) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>getHashValue(key); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">bool&lt;/span> &lt;span style="color:#06287e">isEqual&lt;/span>(&lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>a, &lt;span style="color:#007020;font-weight:bold">const&lt;/span> MyKeyType &lt;span style="color:#666">&amp;amp;&lt;/span>b) { &lt;span style="color:#007020;font-weight:bold">return&lt;/span> MyKeyType&lt;span style="color:#666">::&lt;/span>isEqual(a, b); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-stringmap">llvm::StringMap&lt;/h3>
&lt;p>It is a map-like container that is specially optimized for string keys.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>StringMap&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> stringToIntMap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stringToIntMap[&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>] &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tim&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stringToIntMap.insert(std&lt;span style="color:#666">::&lt;/span>map_pair(&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="llvm-smallvector">llvm::SmallVector&lt;/h3>
&lt;p>It is a dynamic array container that quite similar to &lt;code>std::vector&lt;/code> but optimized for situations where the number of elements is expected to be small.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>SmallVector&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>, &lt;span style="color:#40a070">4&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span> vec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vec.push_back(&lt;span style="color:#40a070">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="misc">Misc&lt;/h2>
&lt;h3 id="llvm-bumpptrallocator">llvm::BumpPtrAllocator&lt;/h3>
&lt;p>This is an allocator used to allocate memory in a highly efficient manner. But note that, it doesn&amp;rsquo;t support deallocation for the elements allocated.
Once the &lt;code>llvm::BumpPtrAllocator&lt;/code> instance is freed, all the allocated elements will be deallocated in bulk automatically.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>llvm&lt;span style="color:#666">::&lt;/span>BumpPtrAllocator allocator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">*&lt;/span> intPtr &lt;span style="color:#666">=&lt;/span> allocator.Allocate&lt;span style="color:#666">&amp;lt;&lt;/span>&lt;span style="color:#902000">int&lt;/span>&lt;span style="color:#666">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">*&lt;/span>intPtr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">100&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="updating-log">Updating log&lt;/h2>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[2024-02-25 Sun] &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> Publish the post&lt;/li>
&lt;/ul></description></item><item><title>Apple TV 折腾记</title><link>/posts/apple-tv-as-service/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/apple-tv-as-service/</guid><description>&lt;p>由于房屋面积有限，我们的大厅一直没有安装电视。相反，我们使用了一个较大的LG 4K显示器作为娱乐中心，并搭配了两个巨大的Fyne落地音箱，效果不错。我们主要观看的节目是Netflix，晚上我们会和家人一起围在电脑旁边观看，感觉还不错。但是，将显示器用作电视存在一个问题，就是必须通过操作系统进行操作。由于我的职业是程序员，一旦接触电脑，就不由自主地敲击键盘，并且很容易进入工作模式，这对放松娱乐有些影响。&lt;/p>
&lt;p>因此，我开始考虑使用Apple TV作为我们的娱乐中心。我选择这个方案的原因如下：&lt;/p>
&lt;ol>
&lt;li>电视盒子本身可以提供完整的电视体验，操作相对简单，可以将电脑关闭以便更好地放松娱乐。&lt;/li>
&lt;li>Apple TV可以安装Netflix、Youtube等应用程序，支持我们现有的娱乐方式。&lt;/li>
&lt;li>它具有HDMI接口，完美兼容我们现有的4K显示器，并且在未来升级成电视时也不会有问题。&lt;/li>
&lt;/ol>
&lt;p>现在，我们家的娱乐系统已经成为一套完整的影音系统。下面是我使用Apple TV的Recipe和我的考虑，供大家参考。&lt;/p>
&lt;h2 id="apple-tv-本体">Apple TV 本体&lt;/h2>
&lt;p>Apple TV 本体还是挺便宜的，可能 Apple 真正挣钱的是 Itunes 这类订阅服务吧，硬件只是附带的。我买的型号是 &amp;ldquo;Apple 苹果TV电视21/22新款 TV6 4K机顶盒子TV 7代 5.0 A15仿生电视盒子 苹果TV7代 128GB WIFI+网线版 美版&amp;rdquo;，价格是 1379人民币，你可以在淘宝或者京东找到。&lt;/p>
&lt;h2 id="wifi路由器">Wifi路由器&lt;/h2>
&lt;p>接下来需要有一款可以科学上网的 Wifi 路由器，这类 Wifi 由于要安装固件以及 ShadowSocks APP，因此一般配置要高一些也贵一些。&lt;/p>
&lt;p>路由器一般要安装梅林固件，你最好了解下 &lt;a href="https://zhuanlan.zhihu.com/p/205303870">梅林固件到底是什么-zhihu&lt;/a>，只有华硕的一部分型号可以支持。&lt;/p>
&lt;p>我选择的是 &amp;ldquo;华硕（ASUS）RT-AX86U双频5700M全千兆电竞路由无线路由器/一键性能加速/2.5G端口/WiFi6路由/PS5网络加速&amp;rdquo;，同样你可以在京东或者淘宝找到这款路由器，拼多多或者咸鱼上有可能找到更便宜的价格。
这是一款中高端的路由器，性能应该有点过剩了，我之前计划利用它自带的 USB 接口搭建一个简易的 NAS，但考虑到 4GB 的单个文件限制，最终没有实施；目前这是一个欠开发的，比较奢侈的路由器。&lt;/p>
&lt;p>路由器连上网络后，需要刷梅林固件，这个网上教程很多，我参考比较多的是 &lt;a href="https://www.youtube.com/watch?v=TKP3w1tlxL0">这个&lt;/a>。 当然，前提是有个科学上网的 V&amp;amp;P&amp;amp;N，绑定到 WIFI 路由器中。&lt;/p>
&lt;p>激活网络后，Apple TV 连上 WIFI，现在你应该已经能够激活和使用 Apple TV 了。&lt;/p>
&lt;h2 id="音响dac的支持">音响DAC的支持&lt;/h2>
&lt;p>虽然Apple TV支持AirPlay音源输出，但如果家里的音响是类似于HomePod或其他支持的播放器，只需要在设置里进行添加，就可以正常使用了。然而，由于我家里有一套音响系统，有专门的DAC，所以使用AirPlay这类有损的传输就比较可惜了。因此，我找到了一款HDMI拆分音源信息到光纤的转换器，名为“毕亚兹 HDMI2.0音频分离器线 4K/60HZ高清视频7.1光纤/同轴/3.5mm音频转换器笔记本机顶盒连接电视音响 ZH136”，可以完美支持AURALIC这类播放器的光纤输入。
注意，这里特定的参数才能支持 4K 视频的输出。转换后的音质与电脑的USB相比没有明显的差别，对于电视节目已经足够了吧。&lt;/p>
&lt;h2 id="nas系统">NAS系统&lt;/h2>
&lt;p>由于我有本地的音乐和视频想要组合到Apple TV的系统里，因此我额外花了不少银子搭建了一套NAS系统。如果您主要使用流媒体，这个基本上不是必需品，因为价格基本上比上面的组件加起来还要高一些。&lt;/p>
&lt;p>之前我没有接触过NAS系统，并且也想降低不兼容的风险，所以我选择了群晖现成的NAS，DS220这款，外加希捷酷狼8TB的企业盘，从闲置的台式机上拆下来一个1TB的盘，七拼八凑跑起来了。目前这一套运行得不错，我经常使用自带的Download Station下载BT文件，目前有一半的节目是NAS提供的。&lt;/p>
&lt;p>谈到NAS，Apple TV上的Infuse应用程序确实很实用，但是我尝试在App Store上付费时，似乎大陆的VISA无法使用。不过，总之还是通过各种折腾成功地使用了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>总结下，除了 Apple TV 本体外，科学上网的 WIFI 路由器提供网络；NAS 提供本地的 BT 下载和视频服务；如果你要支持 DAC 那额外的 HDMI 拆光纤的转接口也是需要的。&lt;/p>
&lt;p>折腾不易，且行珍惜。&lt;/p>
&lt;p>老实说，这样一套操作下来，我觉得折腾的成本还是比较高的，从金钱到精力的投入都比较可观的，非技术宅折腾可能有点困难了。&lt;/p></description></item><item><title>Best Practices for Python Programming (Continuously Updated)</title><link>/posts/python-best-practices/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>/posts/python-best-practices/</guid><description>&lt;p>When delving into the codebases of some successful large Python projects such as PyTorch, I am consistently impressed by their code &amp;ndash; whether it&amp;rsquo;s clean yet precise, or leveraging lesser-known built-in or third-party packages to significantly enhance functionality.&lt;/p>
&lt;p>High-quality code snippets, handy packages, and modules have greatly facilitated my work. In this blog, I&amp;rsquo;ll be sharing noteworthy findings and insights learned from the open-source codebase.&lt;/p>
&lt;h2 id="basics">Basics&lt;/h2>
&lt;h3 id="new">&lt;code>__new__&lt;/code>&lt;/h3>
&lt;p>The &lt;code>__new__&lt;/code> method is used for creating a new instance of a class. It is a static method that gets called before the &lt;code>__init__&lt;/code> method.&lt;/p>
&lt;p>The default &lt;code>__new__&lt;/code> method could be&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">MyClass&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instance &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">super&lt;/span>(MyClass, &lt;span style="color:#007020">cls&lt;/span>)&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> instance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that, different from &lt;code>__init__&lt;/code>, whose first argument is an instance &lt;code>self&lt;/code>, &lt;code>__new__&lt;/code>&amp;rsquo;s first argument is a class.&lt;/p>
&lt;p>You can override &lt;code>__new__&lt;/code> if something special need to be done with the object creation.&lt;/p>
&lt;p>There are some classical use cases for the &lt;code>__new__&lt;/code> method:&lt;/p>
&lt;h4 id="singleton-pattern">Singleton Pattern&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Singleton&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _instance &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">cls&lt;/span>&lt;span style="color:#666">.&lt;/span>_instance &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">cls&lt;/span>&lt;span style="color:#666">.&lt;/span>_instance &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020">super&lt;/span>()&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">cls&lt;/span>&lt;span style="color:#666">.&lt;/span>_instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>singleton1 &lt;span style="color:#666">=&lt;/span> Singleton()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>singleton2 &lt;span style="color:#666">=&lt;/span> Singleton()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(singleton1 &lt;span style="color:#007020;font-weight:bold">is&lt;/span> singleton2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="subclassing-immutable-types">Subclassing Immutable Types&lt;/h4>
&lt;p>When subclassing immutable types like &lt;code>str&lt;/code>, &lt;code>int&lt;/code>, &lt;code>unicode&lt;/code> or &lt;code>tuple&lt;/code>, the properties of immutable cannot be changed after they are created, you can override &lt;code>__new__&lt;/code> instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">UpperStr&lt;/span>(&lt;span style="color:#007020">str&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, value):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">str&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, value&lt;span style="color:#666">.&lt;/span>upper())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>upper_string &lt;span style="color:#666">=&lt;/span> UpperStr(&lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(upper_string) &lt;span style="color:#60a0b0;font-style:italic"># Output: HELLO&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>HELLO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="factory-methods">Factory Methods&lt;/h4>
&lt;p>&lt;code>__new__&lt;/code> can be used to implement factory methods that return instances of different classes based on input parameters.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Shape&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">cls&lt;/span> &lt;span style="color:#007020;font-weight:bold">is&lt;/span> Shape:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shape_type &lt;span style="color:#666">=&lt;/span> args[&lt;span style="color:#40a070">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> shape_type &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;circle&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> Circle()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">elif&lt;/span> shape_type &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#4070a0">&amp;#39;square&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> Square()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">super&lt;/span>(Shape, &lt;span style="color:#007020">cls&lt;/span>)&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#06287e">__new__&lt;/span>(&lt;span style="color:#007020">cls&lt;/span>, &lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Circle&lt;/span>(Shape):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Square&lt;/span>(Shape):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shape &lt;span style="color:#666">=&lt;/span> Shape(&lt;span style="color:#4070a0">&amp;#39;circle&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#007020">isinstance&lt;/span>(shape, Circle)) &lt;span style="color:#60a0b0;font-style:italic"># Output: True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="iter-and-next">&lt;code>__iter__&lt;/code> and &lt;code>__next__&lt;/code>&lt;/h3>
&lt;p>The &lt;code>__iter__&lt;/code> is a magic method that allows an object to be iterable, its result should be an iterable, and the &lt;code>__next__&lt;/code> method returns the next element of the iterable.&lt;/p>
&lt;p>A naive example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Counter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__init__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>n &lt;span style="color:#666">=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__iter__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Return the iterator object (self)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">self&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__next__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># signal the end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> &lt;span style="color:#007020">StopIteration&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="aiter-and-anext">&lt;code>__aiter__&lt;/code> and &lt;code>__anext__&lt;/code>&lt;/h3>
&lt;p>Similar to &lt;code>__iter__&lt;/code> and &lt;code>__next__&lt;/code>, the &lt;code>__aiter__&lt;/code> and &lt;code>__anext__&lt;/code> are the asynchronous version.
The &lt;code>__aiter__&lt;/code> allows an object to be an asynchronous iterator object, which is an object that has an &lt;code>__anext__&lt;/code> method that returns an awaitable object that yields the next element of the sequence.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">AsyncCounter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__init__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>n &lt;span style="color:#666">=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__aiter__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Return the iterator object (self)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">self&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">async&lt;/span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__anext__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">&amp;lt;&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Simulate some delay&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">await&lt;/span> asyncio&lt;span style="color:#666">.&lt;/span>sleep(&lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># Signal the end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">raise&lt;/span> &lt;span style="color:#007020">StopAsyncIteration&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="handy-builtin-utilities">Handy builtin utilities&lt;/h2>
&lt;h3 id="setter-and-getter">setter and getter&lt;/h3>
&lt;p>When there is some logic bound to a member when it is got or updated, then the getter and setter could be used.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">App&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">__init__&lt;/span>(&lt;span style="color:#007020">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>update_count &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>_name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">name&lt;/span>(&lt;span style="color:#007020">self&lt;/span>) &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#007020">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@name.setter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">name&lt;/span>(&lt;span style="color:#007020">self&lt;/span>, v:&lt;span style="color:#007020">str&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>_name &lt;span style="color:#666">=&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">self&lt;/span>&lt;span style="color:#666">.&lt;/span>update_count &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#666">=&lt;/span> App()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#666">.&lt;/span>name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#39;b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;name:&amp;#39;&lt;/span>, app&lt;span style="color:#666">.&lt;/span>name) &lt;span style="color:#60a0b0;font-style:italic"># b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#39;update_count:&amp;#39;&lt;/span>, app&lt;span style="color:#666">.&lt;/span>update_count) &lt;span style="color:#60a0b0;font-style:italic"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>name: b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update_count: 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dataclass">&lt;code>@dataclass&lt;/code>&lt;/h3>
&lt;p>&lt;code>@dataclass&lt;/code> is a decorator that can be used to create classes that &lt;strong>mainly store data&lt;/strong>.
It can automatically generate some common methods for the class, such as &lt;code>__init__&lt;/code>, &lt;code>__repr__&lt;/code>, and &lt;code>__eq__&lt;/code>, based on the type hints of the class attributes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Point&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: &lt;span style="color:#007020">float&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: &lt;span style="color:#007020">float&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#666">=&lt;/span> Point(&lt;span style="color:#40a070">1.&lt;/span>, &lt;span style="color:#40a070">2.&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(p)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Point(x=1.0, y=2.0)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are several classical practices using &lt;code>@dataclass&lt;/code>&lt;/p>
&lt;h4 id="use-default-values-or-default-factories">Use default values or default factories&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> dataclass, field
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">random&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> randint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">typing&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> List
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">DummyContainer&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sides: &lt;span style="color:#007020">int&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: &lt;span style="color:#007020">int&lt;/span> &lt;span style="color:#666">=&lt;/span> field(default_factory&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">lambda&lt;/span>: randint(&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alist: List[&lt;span style="color:#007020">int&lt;/span>] &lt;span style="color:#666">=&lt;/span> field(default_factory&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020">list&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># avoid assign [] directly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dummy &lt;span style="color:#666">=&lt;/span> DummyContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(dummy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>DummyContainer(sides=6, value=2, alist=[])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="use-frozen-true-to-make-the-class-immutable">Use &lt;code>frozen=True&lt;/code> to make the class immutable&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>(frozen&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Circle&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius: &lt;span style="color:#007020">float&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const_circle &lt;span style="color:#666">=&lt;/span> Circle(&lt;span style="color:#40a070">2.0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="use-order-true-to-enable-comparison-operators-based-on-the-class-attributes">Use &lt;code>order=True&lt;/code> to enable comparison operators based on the class attributes&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>(order&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Circle&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius: &lt;span style="color:#007020">float&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c0 &lt;span style="color:#666">=&lt;/span> Circle(&lt;span style="color:#40a070">1.&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1 &lt;span style="color:#666">=&lt;/span> Circle(&lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(c0 &lt;span style="color:#666">&amp;gt;&lt;/span> c1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>False
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="use-inheritance-to-create-subclasses-of-data-classes">Use inheritance to create subclasses of data classes&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> dataclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Animal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#007020">str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sound: &lt;span style="color:#007020">str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Dog&lt;/span>(Animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic"># inherits name and sound from Animal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> watch_house: &lt;span style="color:#007020">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dog &lt;span style="color:#666">=&lt;/span> Dog(name&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Huang&amp;#34;&lt;/span>, sound&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Wang&amp;#34;&lt;/span>, watch_house&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#007020;font-weight:bold">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(dog)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Dog(name=&amp;#39;Huang&amp;#39;, sound=&amp;#39;Wang&amp;#39;, watch_house=False)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="functools-partial-to-get-new-function-by-partially-fixing-some-arguments-of-an-existing-one">functools &lt;code>partial&lt;/code> to get new function by partially fixing some arguments of an existing one&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">functools&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> partial
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">func0&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;a:&lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>a&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">, b:&lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>b&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func1 &lt;span style="color:#666">=&lt;/span> partial(func0, a &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(func1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func1(b&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># reset argument a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>func1(a&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">1&lt;/span>, b&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">10&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>functools.partial(&amp;lt;function func0 at 0x7fccb00e31e0&amp;gt;, a=0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a:0, b:10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a:1, b:10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="functools-warps-to-help-define-better-decorators">functools &lt;code>@warps&lt;/code> to help define better decorators&lt;/h3>
&lt;p>Below is a classical way to define an decorator&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">decorator&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">actual_func&lt;/span>(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&amp;#39; The actual func. &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Before Calling &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>func&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;After Calling &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>func&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> actual_func
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@decorator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">greet&lt;/span>(name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&amp;#39; The greet func. &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello, &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet(&lt;span style="color:#4070a0">&amp;#34;Martin&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Before Calling greet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, Martin!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After Calling greet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The name and docstring of the decorated function will be hidden in the decorator function, and this makes the usage a bit opaque when debugging.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(greet&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(greet&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__doc__&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>actual_func
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The actual func.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, the name and the docstring of the decorated function is overwritten by the decorator, which is not expected.&lt;/p>
&lt;p>We can fix such issue with &lt;code>@wraps&lt;/code>, for example, the original code could be replaced with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">from&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">functools&lt;/span> &lt;span style="color:#007020;font-weight:bold">import&lt;/span> wraps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">decorator&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#555;font-weight:bold">@wraps&lt;/span>(func)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">actual_func&lt;/span>(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Before Calling &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>func&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func(&lt;span style="color:#666">*&lt;/span>args, &lt;span style="color:#666">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;After Calling &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>func&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> actual_func
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@decorator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">greet&lt;/span>(name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4070a0">&amp;#39;&amp;#39;&amp;#39; The greet func. &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">f&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello, &lt;/span>&lt;span style="color:#70a0d0">{&lt;/span>name&lt;span style="color:#70a0d0">}&lt;/span>&lt;span style="color:#4070a0">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(greet&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__name__&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(greet&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#bb60d5">__doc__&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>greet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> The greet func.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="functools-lru-cache-decorator-to-wrap-a-function-with-a-lru-cache">functools &lt;code>@lru_cache&lt;/code> : decorator to wrap a function with a LRU cache&lt;/h3>
&lt;h4 id="accelerating-dp-like-recursive-function-call">Accelerating DP-like recursive function call&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@functools.lru_cache&lt;/span>(maxsize&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">factorial&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> n &lt;span style="color:#666">*&lt;/span> factorial(n&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#007020;font-weight:bold">if&lt;/span> n &lt;span style="color:#007020;font-weight:bold">else&lt;/span> &lt;span style="color:#40a070">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="initialization-for-some-heavy-states-without-introducing-global-variables">Initialization for some heavy states without introducing global variables&lt;/h4>
&lt;p>Suppose we have some global states that should be initialized only once, the naive way to do it is by introducing some global variables,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>state &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_state&lt;/span>(args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">if&lt;/span> state &lt;span style="color:#007020;font-weight:bold">is&lt;/span> &lt;span style="color:#007020;font-weight:bold">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#666">=&lt;/span> construct_state(args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> state
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can eliminate the need for a global variable with a cache:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">get_state&lt;/span>(args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> construct_state(args)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>OpenAI/Triton MLIR 迁移工作简介</title><link>/posts/triton-mlir-publish/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/triton-mlir-publish/</guid><description>&lt;p>经过几个月的不懈努力，OpenAI Triton已经成功完成了面向MLIR Infra的迁移/重构工作，并将其最新的基于MLIR的代码合并至主分支。这个工作是由OpenAI和NVIDIA相关团队近几个月来深入合作完成的，而我也有幸参与其中。在这篇文章中，我将分享一些技术总结，记录一些收获和思考。&lt;/p>
&lt;p>尽管Triton目前的开源开发非常迅速，但本文将主要聚焦于基于MLIR Infra进行重构的第一个版本的&lt;a href="https://github.com/openai/triton/tree/ca05ef8e5b0b4d4834957bc31e7581b09d35c530">代码&lt;/a>（这应该也是两三个月前的）&lt;/p>
&lt;h2 id="triton-简介">Triton 简介&lt;/h2>
&lt;p>OpenAI Triton &lt;a href="https://www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf">paper&lt;/a> 中的介绍是 &amp;ldquo;An Intermediate Language and Compiler for Tiled Neural Network Computations&amp;rdquo;，其中几个关键词应该能够代表其特点：&lt;/p>
&lt;ul>
&lt;li>&lt;em>Intermediate Language&lt;/em>, 目前是基于 Python 的 DSL&lt;/li>
&lt;li>&lt;em>Compiler&lt;/em> ，是一个经典的 Compiler 的架构&lt;/li>
&lt;li>&lt;em>Tiled&lt;/em> Computation，面向 GPU 体系特点，自动分析和实施 tiling&lt;/li>
&lt;/ul>
&lt;h3 id="定位">定位&lt;/h3>
&lt;p>由于 Triton 的开发非常迅速，这里只讨论当前 Triton 的功能。&lt;/p>
&lt;p>简而言之，Triton 提供了一套针对 GPU Kernel 的开发的 Language（基于 Python） 和 高性能 Compiler。&lt;/p>
&lt;figure>&lt;img src="/static/triton-publish/1.png">
&lt;/figure>
&lt;p>因此，就层次而言，Triton的 DNN 开发能力与 CUDA 的部分相对应，但与TVM、XLA等直接面向 DL 的 Domain compiler 无法完全对应。
后者更像是面向 DL 的武器库，拥有从构图到 auto fusion 等端到端的能力，而Triton则更像一把小巧、实用的瑞士军刀，面向偏底层的也是最通用的 Kernel 开发问题。&lt;/p>
&lt;h3 id="新代码中的架构">新代码中的架构&lt;/h3>
&lt;p>Triton 新代码中的架构总体上可以如下呈现&lt;/p>
&lt;figure>&lt;img src="/static/triton-publish/three-components.png">
&lt;/figure>
&lt;p>即总体上可以分为三大块&lt;/p>
&lt;ol>
&lt;li>Frontend，将用户的 Python kernel code 转换为 Triton IR，以及维护 kernel launch 的 Runtime&lt;/li>
&lt;li>Optimizer，通过各类 pass 将 Triton IR 逐步转换为优化过的 TritonGPU IR&lt;/li>
&lt;li>Backend，将 TritonGPU IR 逐步转换为 LLVM IR，并最终通过 ptxas 编译为 cubin&lt;/li>
&lt;/ol>
&lt;p>贯穿这三部分的核心表示是 Triton 的 IR，微观上，IR 也分为两个层次&lt;/p>
&lt;ol>
&lt;li>Triton Dialect，表示计算逻辑，硬件无关的表达&lt;/li>
&lt;li>TritonGPU Dialect，GPU 相关的计算表示&lt;/li>
&lt;/ol>
&lt;p>这两者都是基于 MLIR 的自定义 dialect，除此之外，Triton 也复用了很多社区的 dialect 来进行宏观的表示，包括&lt;/p>
&lt;ul>
&lt;li>&lt;code>std&lt;/code> dialect： tensor, int, float 等数据类型&lt;/li>
&lt;li>&lt;code>arith&lt;/code> dialect：各类数学操作&lt;/li>
&lt;li>&lt;code>scf&lt;/code> dialect：if, for 等控制流&lt;/li>
&lt;li>&lt;code>nvvm&lt;/code> dialect：获取 &lt;code>thread_id&lt;/code> 等少量操作&lt;/li>
&lt;li>&lt;code>gpu&lt;/code> dialect：printf 等少量操作&lt;/li>
&lt;/ul>
&lt;p>下图是 Triton 中核心表示完整的转换过程：&lt;/p>
&lt;figure>&lt;img src="/static/2023-01-29_15-59-49_screenshot.png">
&lt;/figure>
&lt;p>其中蓝色的两部分主要是 MLIR 体系涉及的部分，随后 MLIR 会转换为 LLVM IR，之后 Triton 会调用 NVPTX 转换为 PTX Assembly，随后由 CUDA 的 ptxas 编译器编译为 cubin。&lt;/p>
&lt;h2 id="python-界面之-frontend">Python 界面之 Frontend&lt;/h2>
&lt;p>Frontend 用于将用户用 Python 编写的 kernel 转换为对应的 Triton IR (Triton Dialect)，这里由于篇幅不便展开，细节可以阅读 &lt;a href="https://github.com/openai/triton/blob/ca05ef8e5b0b4d4834957bc31e7581b09d35c530/python/triton/compiler.py#L108">compiler.py::CodeGenerator&lt;/a> 中基于 Python ast 的规则。&lt;/p>
&lt;p>比如 vector add 的例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#555;font-weight:bold">@triton.jit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">add_kernel&lt;/span>(x_ptr, y_ptr, output_ptr, N,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BLOCK_SIZE: tl&lt;span style="color:#666">.&lt;/span>constexpr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>program_id(&lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_start &lt;span style="color:#666">=&lt;/span> pid &lt;span style="color:#666">*&lt;/span> BLOCK_SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offsets &lt;span style="color:#666">=&lt;/span> block_start &lt;span style="color:#666">+&lt;/span> tl&lt;span style="color:#666">.&lt;/span>arange(&lt;span style="color:#40a070">0&lt;/span>, BLOCK_SIZE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask &lt;span style="color:#666">=&lt;/span> offsets &lt;span style="color:#666">&amp;lt;&lt;/span> N
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>load(x_ptr &lt;span style="color:#666">+&lt;/span> offsets, mask&lt;span style="color:#666">=&lt;/span>mask)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>load(y_ptr &lt;span style="color:#666">+&lt;/span> offsets, mask&lt;span style="color:#666">=&lt;/span>mask)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">+&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tl&lt;span style="color:#666">.&lt;/span>store(output_ptr&lt;span style="color:#666">+&lt;/span>offsets, output, mask&lt;span style="color:#666">=&lt;/span>mask)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># x, y are torch.Tensor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grid &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">lambda&lt;/span> meta: (triton&lt;span style="color:#666">.&lt;/span>cdiv(n_elements, meta[&lt;span style="color:#4070a0">&amp;#39;BLOCK_SIZE&amp;#39;&lt;/span>]),)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add_kernel[grid](x, y, output, n_elements, BLOCK_SIZE&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相应会得到 Triton IR&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@kernel_0d1d2d3d&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c256_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">256&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">get_program_id&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span>, &lt;span style="color:#bb60d5">%c256_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">256&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%3&lt;/span>, &lt;span style="color:#bb60d5">%2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%5&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%7&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span>, &lt;span style="color:#bb60d5">%9&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span>, &lt;span style="color:#bb60d5">%10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span>, &lt;span style="color:#bb60d5">%10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addf&lt;/span> &lt;span style="color:#bb60d5">%11&lt;/span>, &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%14&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%15&lt;/span>, &lt;span style="color:#bb60d5">%13&lt;/span>, &lt;span style="color:#bb60d5">%10&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">256&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Triton IR 几乎一比一地对应到原始的 Python code，将用户定义的 computation 带入 MLIR 的体系，后续会在此基础上做各类优化（by Optimizer）以及最终 translate 到更低层次的表示中（by Backend）。&lt;/p>
&lt;h2 id="性能优化之-optimizer">性能优化之 Optimizer&lt;/h2>
&lt;p>Optimizer 用于分析和优化 Frontend 传入的 IR，通过各类 Transformation 和 Conversion (Pass) 策略，最终传递给 Backend 做 translate。&lt;/p>
&lt;p>Optimizer 大致的 workflow 如下&lt;/p>
&lt;figure>&lt;img src="/static/triton-publish/optimizer.png">
&lt;/figure>
&lt;p>主要分为三大块优化&lt;/p>
&lt;ol>
&lt;li>TritonIR 的优化&lt;/li>
&lt;li>TritonIR to TritonGPU IR 的 Conversion&lt;/li>
&lt;li>TritonGPU IR 的优化&lt;/li>
&lt;/ol>
&lt;p>贯穿中间的数据结构是 TritonGPU IR，顾名思义是带上了 GPU 相关的信息的 IR。&lt;/p>
&lt;h3 id="tritongpu-dialect">TritonGPU Dialect&lt;/h3>
&lt;p>TritonGPU Dialect 相比 Triton Dialect，主要是增加了 GPU 硬件相关的 Op 和 Type。&lt;/p>
&lt;p>相关的主要 Op 如下&lt;/p>
&lt;ol>
&lt;li>&lt;code>async_wait(N:int) -&amp;gt; ()&lt;/code>, 直接对应到 PTX 中的 &lt;code>cp.async.wait_group N&lt;/code> 指令&lt;/li>
&lt;li>&lt;code>alloc_tensor()-&amp;gt;Tensor&lt;/code> , 表明 allocate 一个处于 shared memory 的 tensor&lt;/li>
&lt;li>&lt;code>insert_slice_async(slice:PtrTensor, dst:Tensor, index:int, mask:i1 ...) -&amp;gt; Tensor&lt;/code>, 表明往 （alloc_tensor op 产生的，shared memory中的) tensor 中 insert 一个 slice，并且这个操作是 async 的&lt;/li>
&lt;li>&lt;code>convert_layout(src:Tensor)-&amp;gt;Tensor&lt;/code> ，转换 Tensor 中的 data layout&lt;/li>
&lt;/ol>
&lt;p>前三个 Op 主要在 Pipeline 和 Prefetch 的优化（下文 Pass 中会涉及）中用到， &lt;code>convert_layout&lt;/code> Op 在 TritonGPU Dialect 中的 Type system 比较关键，以下两个小节会重点详解。&lt;/p>
&lt;h4 id="data-layout">Data layout&lt;/h4>
&lt;p>Data layout 是 TritonGPU Dialect 的 Type system 的关键，确定了 Data(各层级memory中的Tensor) 到 thread 之间的映射关系。&lt;/p>
&lt;p>目前 Triton 中有如下几种&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>Blocked Layout&lt;/li>
&lt;/ol>
&lt;p>Blocked Layout 表示 thread 间平均分配 workload 的情况，每个线程 own 一块 memory 上连续的 data 进行处理。&lt;/p>
&lt;p>其包含了如下三个字段用于帮助确定 thread 和数据之间的映射关系：&lt;/p>
&lt;ul>
&lt;li>sizePerThread：每个 thread 处理的 &lt;strong>连续排布&lt;/strong> 的元素数目&lt;/li>
&lt;li>threadsPerWarp：每个 Warp 在不同维度上的线程数，用向量表示&lt;/li>
&lt;li>warpsPerCTA：每个 CTA 对应的 Warp 数目，这个由用户在 Python 层制定&lt;/li>
&lt;/ul>
&lt;p>按代码中的例子&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-nil" data-lang="nil">For example, a row-major coalesced layout may partition a 16x16 tensor over 2 warps (i.e. 64 threads) as follows.
[ 0 0 1 1 2 2 3 3 ; 32 32 33 33 34 34 35 35 ]
[ 0 0 1 1 2 2 3 3 ; 32 32 33 33 34 34 35 35 ]
[ 4 4 5 5 6 6 7 7 ; 36 36 37 37 38 38 39 39 ]
[ 4 4 5 5 6 6 7 7 ; 36 36 37 37 38 38 39 39 ]
...
[ 28 28 29 29 30 30 31 31 ; 60 60 61 61 62 62 63 63 ]
[ 28 28 29 29 30 30 31 31 ; 60 60 61 61 62 62 63 63 ]
for
#triton_gpu.blocked_layout&amp;lt;{
sizePerThread = {2, 2}
threadsPerWarp = {8, 4}
warpsPerCTA = {1, 2}
}&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;ol start="2">
&lt;li>Shared Layout&lt;/li>
&lt;/ol>
&lt;p>Shared Layout：表示数据在 shared memory 的一些特性，比如 swizzle 访问的一些参数。&lt;/p>
&lt;p>其包含了如下字段&lt;/p>
&lt;ul>
&lt;li>vec, 支持 vectorization 的单位&lt;/li>
&lt;li>perPhase, 每个 phase 包含多少个 vec&lt;/li>
&lt;li>maxPhase, tensor 总共包含多少个 phase&lt;/li>
&lt;li>order, axis 的次序&lt;/li>
&lt;/ul>
&lt;p>其中，vec, perPhase, maxPhase 是用于避免 bank conflict 的 swizzle 操作需要的参数。&lt;/p>
&lt;p>代码中的例子：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-nil" data-lang="nil">In order to avoid shared memory bank conflicts, elements may be swizzled
in memory. For example, a swizzled row-major layout could store its data
as follows:
A_{0, 0} A_{0, 1} A_{0, 2} A_{0, 3} ... [phase 0] \ per_phase = 2
A_{1, 0} A_{1, 1} A_{1, 2} A_{1, 3} ... [phase 0] /
groups of vec=2 elements
are stored contiguously
_ _ _ _ /\_ _ _ _
A_{2, 2} A_{2, 3} A_{2, 0} A_{2, 1} ... [phase 1] \ per phase = 2
A_{3, 2} A_{3, 3} A_{3, 0} A_{3, 1} ... [phase 1] /
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;ol start="3">
&lt;li>MMA Layout&lt;/li>
&lt;/ol>
&lt;p>顾名思义，MMA Layout 表示 Tensor Core 中 MMA 指令结果的 data layout，比如 Ampere 对应的 MMA Layout 的数据排布基本可以对应到 PTX 指令中的 &lt;a href="https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-fragment-mma-1684">mma.m16n8k16&lt;/a> 的 C,D 的排布。&lt;/p>
&lt;p>MMA Layout 主要包含两个字段：&lt;/p>
&lt;ul>
&lt;li>&lt;code>version&lt;/code> ，表示 TensorCore 的版本
&lt;ul>
&lt;li>1 为 Volta&lt;/li>
&lt;li>2 为 Ampere&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>warpsPerCTA&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这里演示 FP16 精度下， &lt;code>version=2&lt;/code> 的数据排布（会映射到 &lt;code>mma.m16n8k16&lt;/code> 指令）的 Accumulators (C or D) 的 &lt;a href="https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-fragment-mma-16816-float">数据排布&lt;/a>。&lt;/p>
&lt;figure>&lt;img src="/static/mma.16816.png">
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;ol start="4">
&lt;li>DotOperand Layout&lt;/li>
&lt;/ol>
&lt;p>DotOperand Layout 用来表示 Triton 的 DotOp 的输入的 layout。&lt;/p>
&lt;p>其主要包含如下信息&lt;/p>
&lt;ol>
&lt;li>&lt;code>opIdx&lt;/code> ， Operand 的 ID
&lt;ul>
&lt;li>&lt;code>opIdx=0&lt;/code> 表示 DotOp 的 $a&lt;/li>
&lt;li>&lt;code>opIdx=1&lt;/code> 表示 DotOp 的 $b&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>parent&lt;/code> ，存储其对应的 MMA Layout，这里 DotOperand 的数据排布也可能间接的由 MMA Layout 确定（如果 DotOp lower 到 MMA 指令）或者 Blocked Layout（如果 DotOp lower 到 FMA 指令）&lt;/li>
&lt;/ol>
&lt;p>这里为了方便演示，我们采用 MMA Layout 中的 &lt;code>mma.m16n8k16.f16&lt;/code> 指令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>计算精度为 FP16&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MMA Layout&lt;/p>
&lt;ul>
&lt;li>&lt;code>version=2&lt;/code>&lt;/li>
&lt;li>&lt;code>warpsPerCTA=[8,4]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>对于 $a，对应的 DotOperand 的 opIdx = 0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$b, 对应的 DotOperand 的 opIdx = 1&lt;/p>
&lt;figure>&lt;img src="/static/mma.16816.op.png">
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;ol start="5">
&lt;li>Slice Layout&lt;/li>
&lt;/ol>
&lt;p>Slice Layout 表明单个维度上的数据反向索引&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="convertlayoutop">ConvertLayoutOp&lt;/h4>
&lt;p>顾名思义，ConvertLayoutOp 就是用来讲 Tensor 从一种 data layout 转换到另外一种 data layout。
由于 data layout 是 TensorType 的一部分，很自然会存在类型（其中layout）需要转换的情况，这就是 ConvertLayoutOp 的作用。&lt;/p>
&lt;p>有了上面的 Data Layout，接下来我们看最简单的 MatMul 中的的 IR：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#mma&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">mma&lt;/span>&amp;lt;{&lt;span style="">version&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">//&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">%37&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">%38&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">%39&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%37&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">%40&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%38&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bb60d5">%41&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span>, &lt;span style="color:#bb60d5">%40&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">//&lt;/span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面是截取了一段经典 MatMul 中某个阶段的 TritonGPU IR，逻辑比较直白，定义了 &lt;code>#blocked0&lt;/code>, &lt;code>#blocked1&lt;/code> 和 &lt;code>#mma&lt;/code> 三种 layout，之后通过 &lt;code>tt.load&lt;/code> 将 DotOp 的两个 Operand 从 GEMM 加载数据到 register files，之后两个 &lt;code>triton_gpu.convert_layout&lt;/code> 转换 layout 为 DotOp 的参数需要的 &lt;code>#triton_gpu.dot_op&lt;/code> layout。&lt;/p>
&lt;p>这里列举一些典型的 data layout 的转换，以及特点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>#shared -&amp;gt; #blocked&lt;/code> ，正常是代表数据从 shared memory 被 load 到 register file 中，需要考虑 swizzle&lt;/li>
&lt;li>&lt;code>#blocked -&amp;gt; #shared&lt;/code> ，代表数据从 register file 存储到 shared memory 中，需要上一步相同的 swizzle 方式&lt;/li>
&lt;li>&lt;code>#mma -&amp;gt; #blocked&lt;/code> ，正常是 DotOp 的输出转换为更简单的 layout 来进一步计算，由于涉及到跨 thread 间的数据传递，因此一般会借由 shared memory 中转一次&lt;/li>
&lt;li>&lt;code>#blocked -&amp;gt; #dot_operand&lt;/code> ，转换为 DotOp 的输入，这一步可能也需要 shared memory 中转&lt;/li>
&lt;/ul>
&lt;p>Triton 中几乎实现了任意 data layout 间的转换，当然不同的转换代价也不尽相同（考虑到是否会用到 shared memory，register 增减量等等），因此转换的代价也会在 Optimizer 里面一并考虑。&lt;/p>
&lt;h3 id="tritonir-的优化">TritonIR 的优化&lt;/h3>
&lt;p>TritonIR 上的优化主要是计算本身的，与硬件无关的优化，包含了如下 Pass&lt;/p>
&lt;ul>
&lt;li>Inliner Pass，将 Kernel Call 的子函数 Inline 展开&lt;/li>
&lt;li>Combine Pass，一些特定的 Pattern rewrite，比如
&lt;ul>
&lt;li>&lt;code>select(cond, load(ptrs, broadcast(cond), ???), other) =&amp;gt; load(ptrs, broadcast(cond), other)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Canonicalizer Pass，一些化简的 Pattern rewrite&lt;/li>
&lt;li>CSE Pass，MLIR 的 &lt;a href="https://mlir.llvm.org/docs/Passes/#-cse-eliminate-common-sub-expressions">cse&lt;/a> Pass，用于 Eliminate common sub-expressions&lt;/li>
&lt;li>LICM Pass，MLIR 的 &lt;a href="https://mlir.llvm.org/doxygen/LoopInvariantCodeMotion_8cpp_source.html">LoopInvariantCodeMotion Pass&lt;/a> ，将循环无关的变量挪到 forloop 外面&lt;/li>
&lt;/ul>
&lt;h3 id="tritongpu-ir-的优化">TritonGPU IR 的优化&lt;/h3>
&lt;p>TritonGPU IR 上的优化在计算本身优化外，新增了 GPU 硬件相关的优化，具体的 Pass 列表如下&lt;/p>
&lt;ul>
&lt;li>ConvertTritonToTritonGPU Pass，将 Triton IR 转换为 TritonGPU IR，主要是增加 TritonGPU 特有的 layout&lt;/li>
&lt;li>Coalesce Pass，重排 order，使得最大 contiguity 的维度排在最前面&lt;/li>
&lt;li>Combine Pass，同 Triton IR&lt;/li>
&lt;li>Pipeline Pass，MMA 指令对应的 global memory 到 shared memory 的 N-Buffer 优化，下文详解&lt;/li>
&lt;li>Prefetch Pass，MMA 指令对应的 shared memory 到 register file 的 N-Buffer 优化，下文详解&lt;/li>
&lt;li>Canonicalizer，同 Triton IR&lt;/li>
&lt;li>CSE Pass，同 Triton IR&lt;/li>
&lt;li>LICM Pass，同 Triton IR&lt;/li>
&lt;/ul>
&lt;h4 id="pipeline-pass">Pipeline Pass&lt;/h4>
&lt;p>Pipeline Pass 和下一小节中的 Prefetch Pass 是配合关系，整体用来为 DotOp (mma 指令) 的 Operand 提供 IO 优化。&lt;/p>
&lt;p>Pipeline 优化主要针对 DotOp 中 GEMM 到 SMEM 之间的数据拷贝，并自动做 Double Buffer 或者 N Buffer 的优化。&lt;/p>
&lt;p>最简单的 Double buffer 的伪代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>A &lt;span style="color:#666">=&lt;/span> alloc_tensor(shape&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#40a070">2&lt;/span>&lt;span style="color:#666">*&lt;/span>&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># cp.async &amp;amp; cp.async.commit_group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A &lt;span style="color:#666">=&lt;/span> insert_slice_async(A, ptr0, &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B &lt;span style="color:#666">=&lt;/span> alloc_tensor(shape&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#40a070">2&lt;/span>&lt;span style="color:#666">*&lt;/span>&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">8&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B &lt;span style="color:#666">=&lt;/span> insert_slice_async(B, ptr1, &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A &lt;span style="color:#666">=&lt;/span> insert_slice_async(A, ptr00, &lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B &lt;span style="color:#666">=&lt;/span> insert_slice_async(B, ptr11, &lt;span style="color:#40a070">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>async_wait(num&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">2&lt;/span>) &lt;span style="color:#60a0b0;font-style:italic"># cp.async.wait_group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A_slice0 &lt;span style="color:#666">=&lt;/span> extract_slice(A, offset&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>), size&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>B_slice0 &lt;span style="color:#666">=&lt;/span> extract_slice(B, offset&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>), size&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#666">...&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#666">=&lt;/span> ldmatrix(A_slice0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#666">=&lt;/span> ldmatrix(B_slice0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#666">=&lt;/span> dot(a, b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#666">=&lt;/span> (i&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#40a070">1&lt;/span>) &lt;span style="color:#666">%&lt;/span> &lt;span style="color:#40a070">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A &lt;span style="color:#666">=&lt;/span> insert_slice_async(A, ptr2, offset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> B &lt;span style="color:#666">=&lt;/span> insert_slice_async(B, ptr3, offset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> async_wait(num&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#40a070">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A_slice0 &lt;span style="color:#666">=&lt;/span> extract_slice(A, offset&lt;span style="color:#666">=&lt;/span>(offset,&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>), size&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> B_slice0 &lt;span style="color:#666">=&lt;/span> extract_slice(B, offset&lt;span style="color:#666">=&lt;/span>(offset,&lt;span style="color:#40a070">0&lt;/span>,&lt;span style="color:#40a070">0&lt;/span>), size&lt;span style="color:#666">=&lt;/span>(&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">16&lt;/span>,&lt;span style="color:#40a070">8&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;/p>
&lt;ul>
&lt;li>&lt;code>alloc_tensor&lt;/code> 大致对应到 &lt;code>triton_gpu.alloc_tensor&lt;/code>&lt;/li>
&lt;li>&lt;code>insert_slice_async&lt;/code> 对应到 &lt;code>triton_gpu.insert_slice_async&lt;/code> ， 表示异步地向 Tensor 中插入一个 slice，这个过程是通过 &lt;code>cp.async&lt;/code> 指令实现的异步&lt;/li>
&lt;li>&lt;code>tensor.extract_slice&lt;/code> 表示从 Tensor 中读取一个 slice&lt;/li>
&lt;li>&lt;code>async_wait&lt;/code> 的语义对应到 &lt;code>cp.async.wait_group&lt;/code> 指令&lt;/li>
&lt;/ul>
&lt;h4 id="prefetch-pass">Prefetch Pass&lt;/h4>
&lt;p>Prefetch 的逻辑跟 Pipeline Pass 基本类似，也是 Double buffer 和 N Buffer 的优化，区别是其承担了 SMEM 到 register file 的数据搬运，IR 的表示方式是 &lt;code>triton_gpu.convert_layout %37 : (tensor&amp;lt;16x16xf16, #blocked0&amp;gt;) -&amp;gt; tensor&amp;lt;16x16xf16, #triton_gpu.dot_op&amp;lt;{opIdx = 0, parent = #mma}&amp;gt;&amp;gt;&lt;/code> ， 最终映射的核心指令是 &lt;code>ldmatrix&lt;/code> 。&lt;/p>
&lt;h2 id="高性能-llvm-生成之-backend">高性能 LLVM 生成之 Backend&lt;/h2>
&lt;p>Triton 的 Backend 可以有微观和宏观两个角度&lt;/p>
&lt;ul>
&lt;li>微观上主要包括 &lt;code>TritonGPU IR -&amp;gt; LLVM Dialect&lt;/code> 的过程，这里需要注意的是，&lt;a href="https://mlir.llvm.org/docs/Dialects/LLVM/">LLVM Dialect&lt;/a> 是 MLIR 体系中的一个表示，其可以进一步自动 lower 到 LLVM IR&lt;/li>
&lt;li>宏观上进一步包括了 LLVM Dialect -&amp;gt; LLVM IR -&amp;gt; PTX -&amp;gt; cubin 等过程&lt;/li>
&lt;/ul>
&lt;p>这里我们只从微观角度介绍，因为宏观角度中，大部分流程可以通过 LLVM 社区或者 CUDA 的一些设施自动完成。&lt;/p>
&lt;p>Triton 的 Backend 是比较经典的 MLIR 的 Lowering，主要内容就是将 TritonGPU IR 中包含的每种 Op 逐个的 OpConversion。 不过为了高性能，以及保证 Codegen 产物的可控，Triton 在 LLVM 中大量插入了 PTX 的内联汇编（下文会介绍）。 此外，大部分 Op 的 Lowering 都是比较规则化，下文会简要介绍 Dot 指令的 Lowering。&lt;/p>
&lt;h3 id="ptx-inline-asm">PTX inline asm&lt;/h3>
&lt;p>Triton 中使用 Inline asm 大致几个原因：&lt;/p>
&lt;ul>
&lt;li>一些指令对应的操作在现有的 &lt;code>gpu&lt;/code> 和 &lt;code>nvgpu&lt;/code> 的 dialect 还不太完善&lt;/li>
&lt;li>性能原因，比如浮点类型间的变换，一小块汇编足以；借助一个很长的 workflow 还不太可控&lt;/li>
&lt;/ul>
&lt;p>Triton 里面针对 Inline asm 的封装有个简单的 wrapper，类似最简单的 &lt;code>cp.async.wait_group&lt;/code> 的调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>PTXBuilder ptxBuilder;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">auto&lt;/span> &lt;span style="color:#666">&amp;amp;&lt;/span>asyncWaitOp &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">*&lt;/span>ptxBuilder.create&lt;span style="color:#666">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;cp.async.wait_group&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">auto&lt;/span> num &lt;span style="color:#666">=&lt;/span> op&lt;span style="color:#666">-&amp;gt;&lt;/span>getAttrOfType&lt;span style="color:#666">&amp;lt;&lt;/span>IntegerAttr&lt;span style="color:#666">&amp;gt;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;num&amp;#34;&lt;/span>).getInt();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncWaitOp(ptxBuilder.newConstantOperand(num));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到稍微复杂点的 &lt;code>ld&lt;/code> 的各种参数组合&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">auto&lt;/span> &lt;span style="color:#666">&amp;amp;&lt;/span>ld &lt;span style="color:#666">=&lt;/span> ptxBuilder.create&lt;span style="color:#666">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;ld&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">-&amp;gt;&lt;/span>o(&lt;span style="color:#4070a0">&amp;#34;volatile&amp;#34;&lt;/span>, op.getIsVolatile())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .global()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;ca&amp;#34;&lt;/span>, op.getCache() &lt;span style="color:#666">==&lt;/span> triton&lt;span style="color:#666">::&lt;/span>CacheModifier&lt;span style="color:#666">::&lt;/span>CA)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;cg&amp;#34;&lt;/span>, op.getCache() &lt;span style="color:#666">==&lt;/span> triton&lt;span style="color:#666">::&lt;/span>CacheModifier&lt;span style="color:#666">::&lt;/span>CG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;L1::evict_first&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.getEvict() &lt;span style="color:#666">==&lt;/span> triton&lt;span style="color:#666">::&lt;/span>EvictionPolicy&lt;span style="color:#666">::&lt;/span>EVICT_FIRST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;L1::evict_last&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> op.getEvict() &lt;span style="color:#666">==&lt;/span> triton&lt;span style="color:#666">::&lt;/span>EvictionPolicy&lt;span style="color:#666">::&lt;/span>EVICT_LAST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;L1::cache_hint&amp;#34;&lt;/span>, hasL2EvictPolicy)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .v(nWords)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .b(width);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mma-指令生成">MMA 指令生成&lt;/h3>
&lt;p>相比于 ReduceOp 等需要跟 layout 结合的 Op 的 Lowering，DotOp 的是规则非常清晰的。&lt;/p>
&lt;p>这里大致提下在 Backend，一个 Dot 的工作流涉及的阶段和 Op：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Stage&lt;/th>
&lt;th>Op&lt;/th>
&lt;th>Layout&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Load &lt;code>$a&lt;/code>, &lt;code>$b&lt;/code> 的 tile 到 SMEM&lt;/td>
&lt;td>&lt;code>triton_gpu.insert_slice_async&lt;/code>&lt;/td>
&lt;td>&lt;code>#shared&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>从 SMEM Load 参数到 Register file&lt;/td>
&lt;td>&lt;code>tensor.extract_slice&lt;/code>&lt;/td>
&lt;td>&lt;code>#dot_op&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>执行 MMA，结果会在 Registter file&lt;/td>
&lt;td>&lt;code>tt.dot&lt;/code>&lt;/td>
&lt;td>&lt;code>#mma&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>所以直接跟 MMA 指令相关的其实只在第 4 步，其需要的 \(a\), \(b\) 两个参数已经通过 &lt;code>tensor.extract_slice&lt;/code> 拷贝到了 Register file，直接满足了 Ampere 上的 &lt;code>mma&lt;/code> 指令的需求。&lt;/p>
&lt;p>在 Ampere 架构上，一个 DotOp 会映射到多个 mma 指令，下面我们以 FP16 的 &lt;a href="https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-fragment-mma-16816-float">mma.m16n8k16&lt;/a> 指令为例，具体的任务设置如下&lt;/p>
&lt;ul>
&lt;li>Dot 计算的 tile 的尺寸是 M=32, N=16, K=16
&lt;ul>
&lt;li>对应着 &lt;code>mma.m16n8k16&lt;/code> 指令的尺寸是 &lt;code>M=16, N=8, K=16&lt;/code> ，因此一个 tile 需要在 m, n, k 方向展开 &lt;code>2x2x1&lt;/code> 总共 4 个 &lt;code>mma.m16n8k16&lt;/code> 指令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>最终会有类似如下的代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> k &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; k &lt;span style="color:#666">&amp;lt;&lt;/span> numK; &lt;span style="color:#666">++&lt;/span>k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> m &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; m &lt;span style="color:#666">&amp;lt;&lt;/span> numM; &lt;span style="color:#666">++&lt;/span>m)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> (&lt;span style="color:#902000">unsigned&lt;/span> n &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; n &lt;span style="color:#666">&amp;lt;&lt;/span> numN; &lt;span style="color:#666">++&lt;/span>n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callMMA(m, n, k);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，numM, numN, numK 就对应着上面的 2, 2, 1。&lt;/p>
&lt;p>callMMA 的代码如上文时候 InlineAsm，类似如下代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">auto&lt;/span> mma &lt;span style="color:#666">=&lt;/span> builder.create(&lt;span style="color:#4070a0">&amp;#34;mma.sync.aligned.m8n8k4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">-&amp;gt;&lt;/span>o(isARow &lt;span style="color:#666">?&lt;/span> &lt;span style="color:#4070a0">&amp;#34;row&amp;#34;&lt;/span> &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;col&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(isBRow &lt;span style="color:#666">?&lt;/span> &lt;span style="color:#4070a0">&amp;#34;row&amp;#34;&lt;/span> &lt;span style="color:#666">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;col&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .o(&lt;span style="color:#4070a0">&amp;#34;f32.f16.f16.f32&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mma(resOprs, AOprs, BOprs, COprs);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fyi">FYI&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/openai/triton/tree/ca05ef8e5b0b4d4834957bc31e7581b09d35c530">Triton MLIR migration code&lt;/a>&lt;/li>
&lt;li>Triton paper: &lt;a href="https://www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf">Triton: An Intermediate Language and Compiler forTiled Neural Network Computations&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gemm-在-optimizer-pass-效果">GEMM 在 Optimizer Pass 效果&lt;/h3>
&lt;p>下面列举了经典的 GEMM 在 Triton 的 Compile pipeline 里面的 IR 的变换。&lt;/p>
&lt;h4 id="python-code">Python code&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">def&lt;/span> &lt;span style="color:#06287e">matmul_kernel&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a_ptr, b_ptr, c_ptr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stride_am, stride_ak,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stride_bk, stride_bn,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stride_cm, stride_cn,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> M: tl&lt;span style="color:#666">.&lt;/span>constexpr, N: tl&lt;span style="color:#666">.&lt;/span>constexpr, K: tl&lt;span style="color:#666">.&lt;/span>constexpr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BLOCK_SIZE_M: tl&lt;span style="color:#666">.&lt;/span>constexpr, BLOCK_SIZE_N: tl&lt;span style="color:#666">.&lt;/span>constexpr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BLOCK_SIZE_K: tl&lt;span style="color:#666">.&lt;/span>constexpr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offs_m &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>arange(&lt;span style="color:#40a070">0&lt;/span>, BLOCK_SIZE_M)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offs_n &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>arange(&lt;span style="color:#40a070">0&lt;/span>, BLOCK_SIZE_N)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offs_k &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>arange(&lt;span style="color:#40a070">0&lt;/span>, BLOCK_SIZE_K)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a_ptrs &lt;span style="color:#666">=&lt;/span> a_ptr &lt;span style="color:#666">+&lt;/span> offs_m[:, &lt;span style="color:#007020;font-weight:bold">None&lt;/span>] &lt;span style="color:#666">*&lt;/span> stride_am &lt;span style="color:#666">+&lt;/span> offs_k[&lt;span style="color:#007020;font-weight:bold">None&lt;/span>, :] &lt;span style="color:#666">*&lt;/span> stride_ak
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_ptrs &lt;span style="color:#666">=&lt;/span> b_ptr &lt;span style="color:#666">+&lt;/span> offs_k[:, &lt;span style="color:#007020;font-weight:bold">None&lt;/span>] &lt;span style="color:#666">*&lt;/span> stride_bk &lt;span style="color:#666">+&lt;/span> offs_n[&lt;span style="color:#007020;font-weight:bold">None&lt;/span>, :] &lt;span style="color:#666">*&lt;/span> stride_bn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accumulator &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype&lt;span style="color:#666">=&lt;/span>tl&lt;span style="color:#666">.&lt;/span>float32)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">for&lt;/span> k &lt;span style="color:#007020;font-weight:bold">in&lt;/span> &lt;span style="color:#007020">range&lt;/span>(&lt;span style="color:#40a070">0&lt;/span>, K, BLOCK_SIZE_K):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>load(a_ptrs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#666">=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>load(b_ptrs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accumulator &lt;span style="color:#666">+=&lt;/span> tl&lt;span style="color:#666">.&lt;/span>dot(a, b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a_ptrs &lt;span style="color:#666">+=&lt;/span> BLOCK_SIZE_K &lt;span style="color:#666">*&lt;/span> stride_ak
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_ptrs &lt;span style="color:#666">+=&lt;/span> BLOCK_SIZE_K &lt;span style="color:#666">*&lt;/span> stride_bk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c_ptrs &lt;span style="color:#666">=&lt;/span> c_ptr &lt;span style="color:#666">+&lt;/span> offs_m[:, &lt;span style="color:#007020;font-weight:bold">None&lt;/span>] &lt;span style="color:#666">*&lt;/span> stride_cm &lt;span style="color:#666">+&lt;/span> offs_n[&lt;span style="color:#007020;font-weight:bold">None&lt;/span>, :] &lt;span style="color:#666">*&lt;/span> stride_cn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tl&lt;span style="color:#666">.&lt;/span>store(c_ptrs, accumulator)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="triton-ir-translated-from-python-ast--and-after-inliner-ces-dot-dot-dot-passes">Triton IR translated from Python AST(and after Inliner, CES &amp;hellip; passes)&lt;/h4>
&lt;p>这一步算是 Python code 直接翻译到了 Triton IR.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">0.000000e+00&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst_0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%5&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%7&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span>, &lt;span style="color:#bb60d5">%9&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%11&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%13&lt;/span>, &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%16&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%14&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%17&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%15&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%18&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%16&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%19&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%10&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%18&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%26&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%27&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%30&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%31&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%20&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg5&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%21&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%20&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%22&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%23&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%22&lt;/span>, &lt;span style="color:#bb60d5">%21&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%24&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%23&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%25&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%24&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%25&lt;/span>, &lt;span style="color:#bb60d5">%19&lt;/span>&lt;span style="color:#bb60d5">#0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-before-loopinvariantcodemotion">IR Before LoopInvariantCodeMotion&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">0.000000e+00&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst_0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%5&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%7&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span>, &lt;span style="color:#bb60d5">%9&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%11&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%13&lt;/span>, &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%16&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%14&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%17&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%15&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%18&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%16&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%19&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%10&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%18&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%26&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%27&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%30&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%31&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%20&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg5&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%21&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%20&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%22&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%23&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%22&lt;/span>, &lt;span style="color:#bb60d5">%21&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%24&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%23&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%25&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%24&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%25&lt;/span>, &lt;span style="color:#bb60d5">%19&lt;/span>&lt;span style="color:#bb60d5">#0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%30&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段计算的输入分别是 function argument 和 constant，不依赖 forloop 内的变量，理论上可以挪出去。&lt;/p>
&lt;h4 id="ir-after-loopinvariantcodemotion">IR After LoopInvariantCodeMotion&lt;/h4>
&lt;p>LoopInvariantCodeMotion 是 MLIR 社区的一个 Pass，用于将无关 variable 计算挪到 forloop 外面，可以看到上小节里面的计算已经挪出去了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">0.000000e+00&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst_0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%5&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%7&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span>, &lt;span style="color:#bb60d5">%9&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%11&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%13&lt;/span>, &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%16&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%14&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%17&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%15&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%18&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%16&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%19&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%20&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%19&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%21&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%10&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%18&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%20&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%30&lt;/span>, &lt;span style="color:#bb60d5">%31&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%22&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg5&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%23&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span>, &lt;span style="color:#bb60d5">%22&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%24&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%25&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%24&lt;/span>, &lt;span style="color:#bb60d5">%23&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%26&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%27&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%21&lt;/span>&lt;span style="color:#bb60d5">#0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-after-converttritontotritongpu">IR After ConvertTritonToTritonGPU&lt;/h4>
&lt;p>这一步是在原有的硬件无关的 Triton IR 基础上加入了 GPU 相关的 data layout 和 operation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">0.000000e+00&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">|\colorbo&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>{&lt;span style="">yellow&lt;/span>}{&lt;span style="">\strut&lt;/span> &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>}&lt;span style="">|&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst_0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%3&lt;/span>, &lt;span style="color:#bb60d5">%4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span>, &lt;span style="color:#bb60d5">%5&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%7&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%10&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%9&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">3&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%11&lt;/span>, &lt;span style="color:#bb60d5">%13&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%3&lt;/span>, &lt;span style="color:#bb60d5">%15&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%17&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%18&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%17&lt;/span>, &lt;span style="color:#bb60d5">%16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%19&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%20&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%19&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%21&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%18&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%22&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%21&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%23&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%20&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%24&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%23&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">5&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%25&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%22&lt;/span>, &lt;span style="color:#bb60d5">%24&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%26&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%27&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%14&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%25&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%36&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%37&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%38&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%36&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%39&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%37&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%40&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%38&lt;/span>, &lt;span style="color:#bb60d5">%39&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%41&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%42&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%27&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%40&lt;/span>, &lt;span style="color:#bb60d5">%41&lt;/span>, &lt;span style="color:#bb60d5">%42&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg5&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%3&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%31&lt;/span>, &lt;span style="color:#bb60d5">%30&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%33&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%32&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%34&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%33&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">2&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%35&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%34&lt;/span>, &lt;span style="color:#bb60d5">%24&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%28&lt;/span>&lt;span style="color:#bb60d5">#0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">4&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里比较明显的是&lt;/p>
&lt;ol>
&lt;li>作为 dotOp 的输出， &lt;code>%40&lt;/code> 应该是 mma layout，但这一步还是 blocked layout，这个会在下一节里面改写&lt;/li>
&lt;li>&lt;code>%38&lt;/code>, &lt;code>%39&lt;/code> 这些的 layout 应该是 &lt;code>dot_op&amp;lt;mma&amp;gt;&lt;/code> 但由于 mma layout 还没有给定，所以还是 &lt;code>dot_op&amp;lt;blocked&amp;gt;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h4 id="ir-after-tritongpucombineops">IR After TritonGPUCombineOps&lt;/h4>
&lt;p>这一步会包含很多 Op pattern 的改写，直接的变化是&lt;/p>
&lt;ul>
&lt;li>给 dot 相关的增加了 mma 的 data layout&lt;/li>
&lt;li>插入了 mma layout 相关的 &lt;code>convert_layout&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="">#mma&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">mma&lt;/span>&amp;lt;{&lt;span style="">version&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c16_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">0.000000e+00&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%cst_0&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="">dense&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&amp;gt; &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg3&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%6&lt;/span>, &lt;span style="color:#bb60d5">%3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%4&lt;/span>, &lt;span style="color:#bb60d5">%7&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%8&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%10&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%5&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%11&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%10&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%12&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%13&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg1&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%14&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%15&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">make_range&lt;/span> {&lt;span style="color:#007020;font-weight:bold">end&lt;/span> = &lt;span style="color:#40a070">8&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">start&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%16&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%1&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%17&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%16&lt;/span>, &lt;span style="color:#bb60d5">%12&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%18&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%13&lt;/span>, &lt;span style="color:#bb60d5">%17&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%19&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%18&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%20&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%14&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%21&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%20&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%22&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%15&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%23&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%22&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%24&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%arg4&lt;/span>, &lt;span style="color:#bb60d5">%c16_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%25&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%24&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%26&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%9&lt;/span>, &lt;span style="color:#bb60d5">%11&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%27&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%19&lt;/span>, &lt;span style="color:#bb60d5">%21&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">3&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%27&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%37&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%38&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">load&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span> {&lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%39&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%37&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%40&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%38&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%41&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span>, &lt;span style="color:#bb60d5">%40&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%42&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%43&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%41&lt;/span>, &lt;span style="color:#bb60d5">%42&lt;/span>, &lt;span style="color:#bb60d5">%43&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg5&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%arg2&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">expand_dims&lt;/span> &lt;span style="color:#bb60d5">%2&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">slice&lt;/span>&amp;lt;{&lt;span style="">dim&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>}&amp;gt;&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">muli&lt;/span> &lt;span style="color:#bb60d5">%31&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%33&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%30&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%34&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">broadcast&lt;/span> &lt;span style="color:#bb60d5">%33&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%35&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%34&lt;/span>, &lt;span style="color:#bb60d5">%23&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%36&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span>&lt;span style="color:#bb60d5">#0&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">tt&lt;/span>.&lt;span style="color:#007020;font-weight:bold">store&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%36&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-after-tritongpupipeline">IR After TritonGPUPipeline&lt;/h4>
&lt;p>这一步可以认为是在 global memory -&amp;gt; shared memory 的数据搬运做 Pipeline 优化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#mma&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">mma&lt;/span>&amp;lt;{&lt;span style="">version&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%c0&lt;/span>, &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="color:#002070;font-weight:bold">triton_gpu.alloc_tensor :&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span>, &lt;span style="color:#bb60d5">%c0_i32&lt;/span>, &lt;span style="color:#bb60d5">%30&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="color:#002070;font-weight:bold">triton_gpu.alloc_tensor :&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%33&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%34&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span>, &lt;span style="color:#bb60d5">%c0_i32&lt;/span>, &lt;span style="color:#bb60d5">%33&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%35&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%36&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%40&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%41&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%31&lt;/span>, &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%40&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%42&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%43&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%36&lt;/span>, &lt;span style="color:#bb60d5">%34&lt;/span>, &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%42&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%44&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%45&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%36&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_1&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%46&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%47&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%41&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%48&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%43&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%49&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%50&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">12&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span> = &lt;span style="color:#bb60d5">%41&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span> = &lt;span style="color:#bb60d5">%43&lt;/span>, &lt;span style="color:#bb60d5">%arg12&lt;/span> = &lt;span style="color:#bb60d5">%47&lt;/span>, &lt;span style="color:#bb60d5">%arg13&lt;/span> = &lt;span style="color:#bb60d5">%48&lt;/span>, &lt;span style="color:#bb60d5">%arg14&lt;/span> = &lt;span style="color:#bb60d5">%45&lt;/span>, &lt;span style="color:#bb60d5">%arg15&lt;/span> = &lt;span style="color:#bb60d5">%44&lt;/span>, &lt;span style="color:#bb60d5">%arg16&lt;/span> = &lt;span style="color:#bb60d5">%38&lt;/span>, &lt;span style="color:#bb60d5">%arg17&lt;/span> = &lt;span style="color:#bb60d5">%46&lt;/span>, &lt;span style="color:#bb60d5">%arg18&lt;/span> = &lt;span style="color:#bb60d5">%49&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%59&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg12&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%60&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg13&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%61&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%59&lt;/span>, &lt;span style="color:#bb60d5">%60&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%62&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%63&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg16&lt;/span>, &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%65&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%64&lt;/span>, &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%66&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%67&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%68&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">index_cast&lt;/span> &lt;span style="color:#bb60d5">%67&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%69&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%65&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%70&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span>, &lt;span style="color:#bb60d5">%66&lt;/span>, &lt;span style="color:#bb60d5">%69&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%71&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%65&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%72&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span>, &lt;span style="color:#bb60d5">%66&lt;/span>, &lt;span style="color:#bb60d5">%71&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%73&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%74&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%75&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%70&lt;/span>[&lt;span style="color:#bb60d5">%68&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%76&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%72&lt;/span>[&lt;span style="color:#bb60d5">%68&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%77&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%78&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%61&lt;/span>, &lt;span style="color:#bb60d5">%62&lt;/span>, &lt;span style="color:#bb60d5">%63&lt;/span>, &lt;span style="color:#bb60d5">%70&lt;/span>, &lt;span style="color:#bb60d5">%72&lt;/span>, &lt;span style="color:#bb60d5">%75&lt;/span>, &lt;span style="color:#bb60d5">%76&lt;/span>, &lt;span style="color:#bb60d5">%74&lt;/span>, &lt;span style="color:#bb60d5">%73&lt;/span>, &lt;span style="color:#bb60d5">%64&lt;/span>, &lt;span style="color:#bb60d5">%77&lt;/span>, &lt;span style="color:#bb60d5">%78&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-before-tritongpuprefetch">IR Before TritonGPUPrefetch&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#mma&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">mma&lt;/span>&amp;lt;{&lt;span style="">version&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt;, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%28&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%c0&lt;/span>, &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%29&lt;/span> = &lt;span style="color:#002070;font-weight:bold">triton_gpu.alloc_tensor :&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%30&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%31&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%29&lt;/span>, &lt;span style="color:#bb60d5">%c0_i32&lt;/span>, &lt;span style="color:#bb60d5">%30&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%32&lt;/span> = &lt;span style="color:#002070;font-weight:bold">triton_gpu.alloc_tensor :&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%33&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%28&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%34&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%32&lt;/span>, &lt;span style="color:#bb60d5">%c0_i32&lt;/span>, &lt;span style="color:#bb60d5">%33&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%35&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%36&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%40&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%41&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%31&lt;/span>, &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%40&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%42&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%39&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%43&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%36&lt;/span>, &lt;span style="color:#bb60d5">%34&lt;/span>, &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%42&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%44&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%35&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%45&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%36&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_1&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%46&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%37&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%47&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%41&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%48&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%43&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%49&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%50&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">12&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span> = &lt;span style="color:#bb60d5">%41&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span> = &lt;span style="color:#bb60d5">%43&lt;/span>, &lt;span style="color:#bb60d5">%arg12&lt;/span> = &lt;span style="color:#bb60d5">%47&lt;/span>, &lt;span style="color:#bb60d5">%arg13&lt;/span> = &lt;span style="color:#bb60d5">%48&lt;/span>, &lt;span style="color:#bb60d5">%arg14&lt;/span> = &lt;span style="color:#bb60d5">%45&lt;/span>, &lt;span style="color:#bb60d5">%arg15&lt;/span> = &lt;span style="color:#bb60d5">%44&lt;/span>, &lt;span style="color:#bb60d5">%arg16&lt;/span> = &lt;span style="color:#bb60d5">%38&lt;/span>, &lt;span style="color:#bb60d5">%arg17&lt;/span> = &lt;span style="color:#bb60d5">%46&lt;/span>, &lt;span style="color:#bb60d5">%arg18&lt;/span> = &lt;span style="color:#bb60d5">%49&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%59&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg12&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%60&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg13&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%61&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%59&lt;/span>, &lt;span style="color:#bb60d5">%60&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%62&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%63&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%64&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg16&lt;/span>, &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%65&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%64&lt;/span>, &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%66&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%67&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%68&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">index_cast&lt;/span> &lt;span style="color:#bb60d5">%67&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%69&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%65&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%70&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span>, &lt;span style="color:#bb60d5">%66&lt;/span>, &lt;span style="color:#bb60d5">%69&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%71&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%65&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%72&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span>, &lt;span style="color:#bb60d5">%66&lt;/span>, &lt;span style="color:#bb60d5">%71&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%73&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%74&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%75&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%70&lt;/span>[&lt;span style="color:#bb60d5">%68&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%76&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%72&lt;/span>[&lt;span style="color:#bb60d5">%68&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%77&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%78&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%61&lt;/span>, &lt;span style="color:#bb60d5">%62&lt;/span>, &lt;span style="color:#bb60d5">%63&lt;/span>, &lt;span style="color:#bb60d5">%70&lt;/span>, &lt;span style="color:#bb60d5">%72&lt;/span>, &lt;span style="color:#bb60d5">%75&lt;/span>, &lt;span style="color:#bb60d5">%76&lt;/span>, &lt;span style="color:#bb60d5">%74&lt;/span>, &lt;span style="color:#bb60d5">%73&lt;/span>, &lt;span style="color:#bb60d5">%64&lt;/span>, &lt;span style="color:#bb60d5">%77&lt;/span>, &lt;span style="color:#bb60d5">%78&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-after-tritongpuprefetch">IR After TritonGPUPrefetch&lt;/h4>
&lt;p>这一步可以认为是在 Dot 相关的 shared memory -&amp;gt; registers 的数据搬运阶段做 Pipepline 优化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">2&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">blocked&lt;/span>&amp;lt;{&lt;span style="">sizePerThread&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">threadsPerWarp&lt;/span> = [&lt;span style="color:#40a070">4&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>], &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>], &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#mma&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">mma&lt;/span>&amp;lt;{&lt;span style="">version&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">warpsPerCTA&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">4&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">2&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span> = &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span>&amp;lt;{&lt;span style="">ve&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">perPhase&lt;/span> = &lt;span style="color:#40a070">8&lt;/span>, &lt;span style="">maxPhase&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">order&lt;/span> = [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>]}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="">publi&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c56c78c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%47&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%41&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%48&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%43&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%49&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%c0_i32_2&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%50&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%47&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%51&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%50&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%52&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%48&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%53&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%52&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%54&lt;/span>&lt;span style="">:&lt;/span>&lt;span style="color:#40a070">14&lt;/span> = &lt;span style="">scf&lt;/span>.&lt;span style="">f&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span> &lt;span style="color:#bb60d5">%arg6&lt;/span> = &lt;span style="color:#bb60d5">%c0&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">step&lt;/span> &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">iter_args&lt;/span>(&lt;span style="color:#bb60d5">%arg7&lt;/span> = &lt;span style="color:#bb60d5">%cst&lt;/span>, &lt;span style="color:#bb60d5">%arg8&lt;/span> = &lt;span style="color:#bb60d5">%26&lt;/span>, &lt;span style="color:#bb60d5">%arg9&lt;/span> = &lt;span style="color:#bb60d5">%27&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span> = &lt;span style="color:#bb60d5">%41&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span> = &lt;span style="color:#bb60d5">%43&lt;/span>, &lt;span style="color:#bb60d5">%arg12&lt;/span> = &lt;span style="color:#bb60d5">%47&lt;/span>, &lt;span style="color:#bb60d5">%arg13&lt;/span> = &lt;span style="color:#bb60d5">%48&lt;/span>, &lt;span style="color:#bb60d5">%arg14&lt;/span> = &lt;span style="color:#bb60d5">%45&lt;/span>, &lt;span style="color:#bb60d5">%arg15&lt;/span> = &lt;span style="color:#bb60d5">%44&lt;/span>, &lt;span style="color:#bb60d5">%arg16&lt;/span> = &lt;span style="color:#bb60d5">%38&lt;/span>, &lt;span style="color:#bb60d5">%arg17&lt;/span> = &lt;span style="color:#bb60d5">%46&lt;/span>, &lt;span style="color:#bb60d5">%arg18&lt;/span> = &lt;span style="color:#bb60d5">%49&lt;/span>, &lt;span style="color:#bb60d5">%arg19&lt;/span> = &lt;span style="color:#bb60d5">%51&lt;/span>, &lt;span style="color:#bb60d5">%arg20&lt;/span> = &lt;span style="color:#bb60d5">%53&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%63&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg12&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%64&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%arg13&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%65&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%63&lt;/span>, &lt;span style="color:#bb60d5">%64&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%66&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">dot&lt;/span> &lt;span style="color:#bb60d5">%arg19&lt;/span>, &lt;span style="color:#bb60d5">%arg20&lt;/span>, &lt;span style="color:#bb60d5">%arg7&lt;/span> {&lt;span style="">allowTF&lt;/span>&lt;span style="color:#40a070">32&lt;/span> = &lt;span style="color:#007020;font-weight:bold">true&lt;/span>, &lt;span style="">transA&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>, &lt;span style="">transB&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; * &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%67&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg8&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%68&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg9&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%69&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg16&lt;/span>, &lt;span style="color:#bb60d5">%c16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%70&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">cmpi&lt;/span> &lt;span style="color:#007020;font-weight:bold">slt&lt;/span>, &lt;span style="color:#bb60d5">%69&lt;/span>, &lt;span style="color:#bb60d5">%c64&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%71&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%72&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">remsi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c3_i32_4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%73&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">index_cast&lt;/span> &lt;span style="color:#bb60d5">%72&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%74&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%70&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%75&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%arg10&lt;/span>, &lt;span style="color:#bb60d5">%71&lt;/span>, &lt;span style="color:#bb60d5">%74&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%76&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">splat&lt;/span> &lt;span style="color:#bb60d5">%70&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%77&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">insert_slice_asyn&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%arg11&lt;/span>, &lt;span style="color:#bb60d5">%71&lt;/span>, &lt;span style="color:#bb60d5">%76&lt;/span> {&lt;span style="">axis&lt;/span> = &lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">cache&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">evict&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">isVolatile&lt;/span> = &lt;span style="color:#007020;font-weight:bold">false&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%78&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg15&lt;/span>, &lt;span style="color:#bb60d5">%cst_0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%79&lt;/span> = &lt;span style="">tt&lt;/span>.&lt;span style="">addptr&lt;/span> &lt;span style="color:#bb60d5">%arg14&lt;/span>, &lt;span style="color:#bb60d5">%25&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">async_wait&lt;/span> {&lt;span style="">num&lt;/span> = &lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%80&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%75&lt;/span>[&lt;span style="color:#bb60d5">%73&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%81&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%77&lt;/span>[&lt;span style="color:#bb60d5">%73&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%82&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg17&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_5&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%83&lt;/span> = &lt;span style="">arith&lt;/span>.&lt;span style="">addi&lt;/span> &lt;span style="color:#bb60d5">%arg18&lt;/span>, &lt;span style="color:#bb60d5">%c1_i32_6&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%84&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%80&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">16&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%85&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%84&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%86&lt;/span> = &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>.&lt;span style="">extract_slice&lt;/span> &lt;span style="color:#bb60d5">%81&lt;/span>[&lt;span style="color:#40a070">0&lt;/span>, &lt;span style="color:#40a070">0&lt;/span>] [&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">8&lt;/span>] [&lt;span style="color:#40a070">1&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>] &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%87&lt;/span> = &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">convert_layout&lt;/span> &lt;span style="color:#bb60d5">%86&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">scf&lt;/span>.&lt;span style="">yield&lt;/span> &lt;span style="color:#bb60d5">%65&lt;/span>, &lt;span style="color:#bb60d5">%67&lt;/span>, &lt;span style="color:#bb60d5">%68&lt;/span>, &lt;span style="color:#bb60d5">%75&lt;/span>, &lt;span style="color:#bb60d5">%77&lt;/span>, &lt;span style="color:#bb60d5">%80&lt;/span>, &lt;span style="color:#bb60d5">%81&lt;/span>, &lt;span style="color:#bb60d5">%79&lt;/span>, &lt;span style="color:#bb60d5">%78&lt;/span>, &lt;span style="color:#bb60d5">%69&lt;/span>, &lt;span style="color:#bb60d5">%82&lt;/span>, &lt;span style="color:#bb60d5">%83&lt;/span>, &lt;span style="color:#bb60d5">%85&lt;/span>, &lt;span style="color:#bb60d5">%87&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">#mma&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">3&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#shared&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>&lt;span style="color:#bb60d5">!tt.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">#blocked&lt;/span>&lt;span style="color:#40a070">0&lt;/span>&amp;gt;, &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">0&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;, &lt;span style="">tens&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">16&lt;/span>&lt;span style="">x&lt;/span>&lt;span style="color:#40a070">8&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="">#triton_gpu&lt;/span>.&lt;span style="">dot_op&lt;/span>&amp;lt;{&lt;span style="">opId&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span> = &lt;span style="color:#40a070">1&lt;/span>, &lt;span style="">parent&lt;/span> = &lt;span style="">#mma&lt;/span>}&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="ir-after-tritongputollvm">IR After TritonGPUToLLVM&lt;/h4>
&lt;p>MLIR 阶段的最后一步就是 translate 到 LLVM dialect，可以看到其中 Triton backend 插入的 Inline Asm。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">module&lt;/span> &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="color:#4070a0">&amp;#34;triton_gpu.num-warps&amp;#34;&lt;/span> = &lt;span style="color:#40a070">4&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">triton_gpu&lt;/span>.&lt;span style="">shared&lt;/span> = &lt;span style="color:#40a070">36864&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">global&lt;/span> &lt;span style="color:#007020;font-weight:bold">external&lt;/span> &lt;span style="color:#bb60d5">@global_smem&lt;/span>() {&lt;span style="">addr_space&lt;/span> = &lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>} &lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.array&lt;/span>&amp;lt;&lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">x&lt;/span> &lt;span style="color:#007020;font-weight:bold">i8&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">llvm&lt;/span>.&lt;span style="">fun&lt;/span>&lt;span style="color:#007020;font-weight:bold">c&lt;/span> &lt;span style="color:#bb60d5">@matmul_kernel_0d1d2d3d4c5d6c7d8c&lt;/span>(&lt;span style="color:#bb60d5">%arg0&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg1&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg2&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>&amp;gt; {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg3&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg4&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}, &lt;span style="color:#bb60d5">%arg5&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span> {&lt;span style="">tt&lt;/span>.&lt;span style="">divisibility&lt;/span> = &lt;span style="color:#40a070">16&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>}) &lt;span style="color:#007020;font-weight:bold">attributes&lt;/span> {&lt;span style="">nvvm&lt;/span>.&lt;span style="">kernel&lt;/span> = &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">u&lt;/span>&lt;span style="color:#007020;font-weight:bold">i1&lt;/span>, &lt;span style="">nvvm&lt;/span>.&lt;span style="">maxntid&lt;/span> = &lt;span style="color:#40a070">128&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="">sym_visibility&lt;/span> = &lt;span style="color:#4070a0">&amp;#34;public&amp;#34;&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%0&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="">addressof&lt;/span> &lt;span style="color:#bb60d5">@global_smem&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">array&lt;/span>&amp;lt;&lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">x&lt;/span> &lt;span style="color:#007020;font-weight:bold">i8&lt;/span>&amp;gt;, &lt;span style="color:#40a070">3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%1&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="color:#007020;font-weight:bold">bitcast&lt;/span> &lt;span style="color:#bb60d5">%0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">array&lt;/span>&amp;lt;&lt;span style="color:#40a070">0&lt;/span> &lt;span style="color:#007020;font-weight:bold">x&lt;/span> &lt;span style="color:#007020;font-weight:bold">i8&lt;/span>&amp;gt;, &lt;span style="color:#40a070">3&lt;/span>&amp;gt; &lt;span style="color:#007020;font-weight:bold">to&lt;/span> &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="color:#007020;font-weight:bold">i8&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%2&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">3&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%3&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">1&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%4&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">0&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%5&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">2&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%6&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#007020;font-weight:bold">true&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%7&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">inde&lt;/span>&lt;span style="color:#007020;font-weight:bold">x&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%8&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">32&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">%9&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">mlir&lt;/span>.&lt;span style="color:#007020;font-weight:bold">constant&lt;/span>(&lt;span style="color:#40a070">0.000000e+00&lt;/span> &lt;span style="">:&lt;/span> &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>) &lt;span style="">:&lt;/span> &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%567&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">inline_&lt;/span>&lt;span style="color:#007020;font-weight:bold">asm&lt;/span> &lt;span style="">has_side_effects&lt;/span> &lt;span style="">asm_dialect&lt;/span> = &lt;span style="">att&lt;/span> &lt;span style="">operand_attrs&lt;/span> = [] &lt;span style="color:#4070a0">&amp;#34;ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;=r,=r,=r,=r,r&amp;#34;&lt;/span> &lt;span style="color:#bb60d5">%566&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">16&lt;/span>, &lt;span style="color:#40a070">3&lt;/span>&amp;gt;) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="color:#bb60d5">!llvm.struct&lt;/span>&amp;lt;(&lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;)&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%765&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">inline_&lt;/span>&lt;span style="color:#007020;font-weight:bold">asm&lt;/span> &lt;span style="">has_side_effects&lt;/span> &lt;span style="">asm_dialect&lt;/span> = &lt;span style="">att&lt;/span> &lt;span style="">operand_attrs&lt;/span> = [] &lt;span style="color:#4070a0">&amp;#34;mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $4, $5, $6, $7 }, { $8, $9 }, { $10, $11, $12, $13 };&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;=r,=r,=r,=r,r,r,r,r,r,r,0,1,2,3&amp;#34;&lt;/span> &lt;span style="color:#bb60d5">%677&lt;/span>, &lt;span style="color:#bb60d5">%679&lt;/span>, &lt;span style="color:#bb60d5">%678&lt;/span>, &lt;span style="color:#bb60d5">%680&lt;/span>, &lt;span style="color:#bb60d5">%685&lt;/span>, &lt;span style="color:#bb60d5">%686&lt;/span>, &lt;span style="color:#bb60d5">%701&lt;/span>, &lt;span style="color:#bb60d5">%702&lt;/span>, &lt;span style="color:#bb60d5">%703&lt;/span>, &lt;span style="color:#bb60d5">%704&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">vect&lt;/span>&lt;span style="color:#007020;font-weight:bold">or&lt;/span>&amp;lt;&lt;span style="color:#40a070">2&lt;/span>&lt;span style="">xf&lt;/span>&lt;span style="color:#40a070">16&lt;/span>&amp;gt;, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="color:#bb60d5">!llvm.struct&lt;/span>&amp;lt;(&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>)&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#bb60d5">%1789&lt;/span> = &lt;span style="">llvm&lt;/span>.&lt;span style="">inline_&lt;/span>&lt;span style="color:#007020;font-weight:bold">asm&lt;/span> &lt;span style="">has_side_effects&lt;/span> &lt;span style="">asm_dialect&lt;/span> = &lt;span style="">att&lt;/span> &lt;span style="">operand_attrs&lt;/span> = [] &lt;span style="color:#4070a0">&amp;#34;@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;r,r,r,r,l,b&amp;#34;&lt;/span> &lt;span style="color:#bb60d5">%1782&lt;/span>, &lt;span style="color:#bb60d5">%1784&lt;/span>, &lt;span style="color:#bb60d5">%1786&lt;/span>, &lt;span style="color:#bb60d5">%1788&lt;/span>, &lt;span style="color:#bb60d5">%1449&lt;/span>, &lt;span style="color:#bb60d5">%6&lt;/span> &lt;span style="">:&lt;/span> (&lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#007020;font-weight:bold">i32&lt;/span>, &lt;span style="color:#bb60d5">!llvm.ptr&lt;/span>&amp;lt;&lt;span style="">f&lt;/span>&lt;span style="color:#40a070">32&lt;/span>, &lt;span style="color:#40a070">1&lt;/span>&amp;gt;, &lt;span style="color:#007020;font-weight:bold">i1&lt;/span>) &lt;span style="">-&lt;/span>&amp;gt; &lt;span style="color:#bb60d5">!llvm.void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>About me</title><link>/posts/about/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>/posts/about/</guid><description>&lt;h2 id="about-me">About me&lt;/h2>
&lt;p>Thank you for your interest.&lt;/p>
&lt;p>I am a Deep Learning system architect at NVIDIA, and my current focus is high-performance AI Compiler(on GPU).&lt;/p>
&lt;p>Before this, I was a senior engineer in Baidu, working as an architect on PaddlePaddle (one of the most popular open-sourced deep learning frameworks in China market).&lt;/p>
&lt;p>I was the creator &amp;amp; primary author &amp;amp; tech lead of the following projects in PaddlePaddle ecosystem (before 2022-6)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/Paddle/tree/v2.3.2/paddle/fluid/inference">Paddle-Inference&lt;/a> - the server-class DL inference engine,&lt;/li>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/Paddle-Lite/tree/v2.11">Paddle-Lite&lt;/a> - A on-device inference engine with high-performance, tiny deployment size,&lt;/li>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/CINN">Paddle-CINN&lt;/a> - A DL compiler for automatically generating high-performance kernels &amp;amp; programs for AI models,&lt;/li>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/Paddle/tree/v2.3.2/paddle/infrt">Paddle/infrt&lt;/a> - A unified architecture for both server-class and mobile devices, powered by MLIR, highly modular design,&lt;/li>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/VisualDL">Paddle-VisualDL&lt;/a> - A visualization tool for AI model,&lt;/li>
&lt;li>&lt;a href="https://github.com/PaddlePaddle/continuous_evaluation">Paddle/continuous_evaluation&lt;/a> - A system that continuously traces the indicators modeling the performance of AI models.&lt;/li>
&lt;/ul></description></item><item><title>Emacs Essentials</title><link>/posts/emacs-essentials/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>/posts/emacs-essentials/</guid><description>&lt;p>It is a steep learning curve to master Emacs lisp, there are mainly two issues in it from my experience&lt;/p>
&lt;ol>
&lt;li>the lisp syntax and functional programming&lt;/li>
&lt;li>the fragmented methods and libraries&lt;/li>
&lt;/ol>
&lt;p>For the 1st issue, it is easy to master the syntax after writing several programs and getting used to them, but for the 2nd one, one needs to take notes or remember something.&lt;/p>
&lt;p>In this blog, I focus on the 2nd point and keep updating the notes of some methods and libraries that I think are essential for writing Emacs lisp packages.&lt;/p>
&lt;h2 id="builtin-methods">builtin methods&lt;/h2>
&lt;h3 id="buffer">buffer&lt;/h3>
&lt;h4 id="current-buffer-get-the-current-buffer">current-buffer: get the current buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">current-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer emacs-essentials.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-buffer-get-a-buffer-by-name">get-buffer: get a buffer by name&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer *scratch*&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-buffer-create-create-the-buffer-if-not-exist">get-buffer-create: create the buffer if not exist&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-buffer-create&lt;/span> &lt;span style="color:#4070a0">&amp;#34;yaya&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer yaya&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="changing-the-current-buffer">changing the current buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">set-buffer&lt;/span> (&lt;span style="color:#06287e">get-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">current-buffer&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="goto-a-buffer">Goto a buffer&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-current-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*BUF*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; do something like progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="changing-the-current-buffer-safely">Changing the current buffer safely&lt;/h4>
&lt;p>It will return to the original buffer after the operation finished.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">save-current-buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">set-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;*scratch*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Current buffer: %s&amp;#34;&lt;/span> (&lt;span style="color:#06287e">current-buffer&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">current-buffer&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer 20210801162858-emacs_lisp.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="working-with-file-buffers">Working with file buffers&lt;/h4>
&lt;p>To get the full file path for the file that the buffer represents&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">buffer-file-name&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/Users/yanchunwei/project/myblog2022/content-org/emacs-essentials.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To find a buffer that represents a particular file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">get-file-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/Users/yanchunwei/project/myblog2022/content-org/emacs-essentials.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#&amp;lt;buffer emacs-essentials.org&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="loading-a-file-into-a-buffer-without-display-it">Loading a file into a buffer without display it&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">find-file-noselect&lt;/span> &lt;span style="color:#4070a0">&amp;#34;xx.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-all-buffer-names">Get all buffer names&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">mapcar&lt;/span> &lt;span style="color:#06287e">#&amp;#39;buffer-name&lt;/span> (&lt;span style="color:#06287e">buffer-list&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="save-execution-operate-on-other-buffers-without-altering-the-current-context">save-execution: Operate on other buffers without altering the current context&lt;/h4>
&lt;p>Buffer is a core data structure in elisp, so it is normial to switch to other buffers, do some operations and return back. &lt;code>save-execution&lt;/code> helps to restore the previous context when switching to other buffers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">save-excursion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; do anything on other buffers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; Return to the previous context: buffer and point&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="point">point&lt;/h3>
&lt;p>The &amp;ldquo;point&amp;rdquo; is the location of the cursor in the buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>7508
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point-max&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>8010
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">point-min&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="moving-the-point">Moving the point&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">goto-char&lt;/span> &lt;span style="color:#40a070">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">goto-char&lt;/span> (&lt;span style="color:#06287e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; goto the begining of the buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">beginning-of-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">;; goto the end of the buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">end-of-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-char&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-char&lt;/span> &lt;span style="color:#40a070">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">forward-word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">backward-word&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="preserving-the-point">Preserving the point&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">save-excursion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">goto-char&lt;/span> (&lt;span style="color:#06287e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">point&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>8471
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="examining-buffer-text">Examining buffer text&lt;/h4>
&lt;p>To look at text in the buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span> (&lt;span style="color:#06287e">point&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">char-after&lt;/span> (&lt;span style="color:#06287e">point-min&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>58
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="the-thing">The Thing&lt;/h4>
&lt;p>The &lt;code>thing-at-point&lt;/code> function is very useful for grabbing the text at the point if it matches a particular type of &amp;ldquo;thing&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;word&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;sentence&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(thing-at-point &amp;#39;sentence)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#+END_SRC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">thing-at-point&lt;/span> &lt;span style="color:#517918">&amp;#39;sentence&lt;/span> &lt;span style="color:#60add5">t&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(thing-at-point &amp;#39;sentence t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#+END_SRC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="serching-for-text">Serching for text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">search-forward&lt;/span> &lt;span style="color:#4070a0">&amp;#34;thing&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="inserting-text">Inserting text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;This is&amp;#34;&lt;/span> &lt;span style="color:#4070a0">?\s&lt;/span> &lt;span style="color:#4070a0">?\n&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Sparta!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="deleting-text">Deleting text&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-current-buffer&lt;/span> &lt;span style="color:#4070a0">&amp;#34;.gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">delete-region&lt;/span> (&lt;span style="color:#06287e">point&lt;/span>) (&lt;span style="color:#06287e">point-max&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="saving-a-buffer">Saving a buffer&lt;/h4>
&lt;p>To save the contents of a buffer back to the file it is associated with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">save-buffer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="org-model-programming">org-model programming&lt;/h3>
&lt;h4 id="tags-related">Tags related&lt;/h4>
&lt;p>Tags in org-mode are as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-org" data-lang="org">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080;font-weight:bold">*&lt;/span>&lt;span style="font-weight:bold"> heading&lt;/span>&lt;span style="font-style:italic"> :tag0:tag1:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Get tags&lt;/p>
&lt;p>To get tags on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-get-tags&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>Set tags&lt;/p>
&lt;p>To set tags on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-set-tags&lt;/span> &lt;span style="color:#666">&amp;#39;&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;hello&amp;#34;&lt;/span>)) &lt;span style="color:#007020">:hello:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="properties-related">Properties related&lt;/h4>
&lt;p>Properties in org-mode is as follows, where a property called &amp;ldquo;prop&amp;rdquo; has a &amp;ldquo;value&amp;rdquo;. It is handy to store some meta data using properties.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-org" data-lang="org">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080;font-weight:bold">*&lt;/span>&lt;span style="font-weight:bold"> headline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">:PROPERTIES:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#60a0b0;background-color:#fff0f0">:prop: value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;background-color:#fff0f0">&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">:END:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Get properties&lt;/p>
&lt;p>Get properties of the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-entry-properties&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>Set property&lt;/p>
&lt;p>To set a property on the current entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">org-set-property&lt;/span> &lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;tom&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="file-and-path">file and path&lt;/h3>
&lt;h4 id="get-the-path-of-the-current-file">Get the path of the current file&lt;/h4>
&lt;p>The &lt;code>buffer-file-name&lt;/code> is a buffer builtin variable holding the file name of the current buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">file-truename&lt;/span> &lt;span style="color:#06287e">buffer-file-name&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/tmp/emacs-essentials.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="get-path-without-suffix">Get path without suffix&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">file-name-sans-extension&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/tmp/a.org&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>/tmp/a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="write-to-file">Write to file&lt;/h4>
&lt;p>Overwrite the content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">with-temp-file&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/tmp/1.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">insert&lt;/span> &lt;span style="color:#4070a0">&amp;#34;hello world&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;file content: %s&amp;#34;&lt;/span> (&lt;span style="color:#06287e">buffer-string&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>file content: hello world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="execute-shell-command">execute shell command&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#bb60d5">shell-command&lt;/span> &lt;span style="color:#4070a0">&amp;#34;echo hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="condition-case-try-catch-in-elisp">condition-case: try-catch in elisp&lt;/h3>
&lt;p>Like the try-catch in Python, where a try-catch can launch some unsafe function and catch the error.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">condition-case&lt;/span> &lt;span style="color:#bb60d5">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">progn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;No error&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">error&lt;/span> &lt;span style="color:#4070a0">&amp;#34;some error&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>No error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modern-libraries">Modern libraries&lt;/h2>
&lt;h3 id="ht-dot-el-for-hashtables">ht.el for hashtables&lt;/h3>
&lt;p>Reference &lt;a href="https://github.com/Wilfred/ht.el">ht.el&lt;/a> for more details.&lt;/p>
&lt;h4 id="creating-a-hash-table">creating a hash table&lt;/h4>
&lt;p>Create an empty hash table&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht-create&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">the-dic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a hash table with initial records&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">the-dic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (&amp;#34;name&amp;#34; &amp;#34;Tom&amp;#34; &amp;#34;sex&amp;#34; male))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="accessing-the-hash-table">accessing the hash table&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; get a record&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; returns &amp;#34;Tom&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-get&lt;/span> &lt;span style="color:#bb60d5">the-dic&lt;/span> &lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Tom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iterating-over-the-hash-table">Iterating over the hash table&lt;/h4>
&lt;p>Readonly mapping:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;age&amp;#34;&lt;/span> &lt;span style="color:#40a070">18&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-map&lt;/span> (&lt;span style="color:#007020">lambda&lt;/span> (&lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>) (&lt;span style="color:#06287e">message&lt;/span> &lt;span style="color:#4070a0">&amp;#34;%S: %S&amp;#34;&lt;/span> &lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)) &lt;span style="color:#bb60d5">the-dic&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;ldquo;age&amp;rdquo;: 18&lt;/td>
&lt;td>&amp;ldquo;sex&amp;rdquo;: male&lt;/td>
&lt;td>&amp;ldquo;name&amp;rdquo;: &amp;ldquo;Tom&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Mutable mapping:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#007020">let*&lt;/span> ((&lt;span style="color:#bb60d5">the-dic&lt;/span> (&lt;span style="color:#bb60d5">ht&lt;/span> (&lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Tom&amp;#34;&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;sex&amp;#34;&lt;/span> &lt;span style="color:#517918">&amp;#39;male&lt;/span>) (&lt;span style="color:#4070a0">&amp;#34;age&amp;#34;&lt;/span> &lt;span style="color:#40a070">18&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#bb60d5">ht-map&lt;/span> (&lt;span style="color:#007020">lambda&lt;/span> (&lt;span style="color:#bb60d5">key&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">;; modify the value if is string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#007020">setf&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span> (&lt;span style="color:#007020">if&lt;/span> (&lt;span style="color:#06287e">stringp&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#06287e">concat&lt;/span> &lt;span style="color:#4070a0">&amp;#34;modified &amp;#34;&lt;/span> &lt;span style="color:#bb60d5">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bb60d5">value&lt;/span>))) &lt;span style="color:#bb60d5">the-dic&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>male&lt;/td>
&lt;td>modified Tom&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="debug-and-development-in-elisp">Debug and development in Elisp&lt;/h2>
&lt;p>One handly tool is &lt;code>toggle-debug-on-error&lt;/code>, it will print the error stack.&lt;/p></description></item></channel></rss>